{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Overview</p> <p>EDB Backup and Recovery Manager (Barman) is a backup and recovery solution for PostgreSQL. It supports a wide variety of architectures, from a two-node PostgreSQL cluster in the same data center, to geographically-redundant multi-node clusters that span data center regions and availability zones.</p> <p>You can export Barman backups to multiple destinations, including tape, Amazon S3, Google Cloud, or Azure Blob Storage.</p> <p>Download Barman</p>"},{"location":"about/","title":"About","text":"<p>Credits and Contributors listed here</p> <p>Contributing to Barman EnterpriseDB has a team of software engineers, architects, database administrators, system administrators, QA engineers, developers and managers that dedicate their time and expertise to improve Barman's code. We adopt lean and agile methodologies for software development, and we believe in the devops culture that allowed us to implement rigorous testing procedures through cross-functional collaboration. Every Barman commit is the contribution of multiple individuals, at different stages of the production pipeline.</p> <p>Even though this is our preferred way of developing Barman, we gladly accept patches from external developers, as long as:</p> <p>user documentation (tutorial and man pages) is provided. source code is properly documented and contains relevant comments. code supplied is covered by unit tests. no unrelated feature is compromised or broken. source code is rebased on the current master branch. commits and pull requests are limited to a single feature (multi-feature patches are hard to test and review). changes to the user interface are discussed beforehand with EnterpriseDB. We also require that any contributions provide a copyright assignment and a disclaimer of any work-for-hire ownership claims from the employer of the developer.</p> <p>You can use GitHub's pull requests system for this purpose.</p>"},{"location":"about/#how-to-contribute","title":"How to contribute","text":""},{"location":"about/#contributors","title":"Contributors","text":"<p>Documentation: EDB Doc Team</p> <p>Authors In alphabetical order:</p> <p>Abhijit Menon-Sen Didier Michel Michael Wallace Past contributors (in alphabetical order):</p> <p>Anna Bellandi (QA/testing) Britt Cole (documentation reviewer) Carlo Ascani (developer) Francesco Canovai (QA/testing) Gabriele Bartolini (architect) Gianni Ciolli (QA/testing) Giulio Calacoci (developer) Giuseppe Broccolo (developer) Jane Threefoot (developer) Jonathan Battiato (QA/testing) Leonardo Cecchi (developer) Marco Nenciarini (project leader) Niccol\u00f2 Fei (QA/testing) Rubens Souza (QA/testing) Stefano Bianucci (developer)</p>"},{"location":"architecture/","title":"Architecture","text":"<p>Barman offers multiple architectural options.  It can operate remotely from a database server via the network.  You could have your Barman server located in the same data center as your PostgreSQL server(s), or in a data center in different region, thousands of miles away from your PostgreSQL server(s). </p> <p>Recommendation</p> <p>Ensure the physical distance between servers allows backup and recovery times to meet your business requirements.</p>"},{"location":"architecture/#design-recommendations","title":"Design recommendations","text":"<p>Although there isn't a \"one size fits all\" way to configure your Barman architecture, the following recommendations apply:</p> <ul> <li>Install Barman on a dedicated server.</li> <li>Don't share the same storage with your PostgreSQL server.</li> <li>Integrate Barman with your monitoring infrastructure.  The check-barman command for Nagios is a popular option.</li> <li>Test before deploying to production.</li> <li>Evaluate any single points of failure (SPOF) of your system, and conduct cost-benefit analysis of them.</li> </ul> <p>Tip</p> <p>A very common setup for Barman is to be installed in the same data center where your PostgreSQL servers are. </p> <p>In this case, the single point of failure (SPOF) is the data center. The impact of this SPOF can be alleviated thanks to two features that Barman provides to increase the number of backup tiers:</p> <ol> <li>Geographical redundancy </li> <li>Hook scripts</li> </ol>"},{"location":"architecture/#geographical-redundancy","title":"Geographical redundancy","text":"<p>Geographical redundancy allows a Barman instance that is located in a different data center or availability zone to synchronize the entire content of the source Barman server.  As geographical redundancy can be configured in Barman at the global level and server level, you can create hybrid installations of Barman.  A hybrid installation may have some servers directly connected to your local PostgreSQL servers, and others backing up subsets of different Barman installations (cross-site backup). </p> <p>This example shows two availability zones, each with a primary PostgreSQL server backed up in a local Barman installation, and relayed on the other Barman server (defined as passive) for multi-tier backup via rsync/SSH. </p> <p>An example of architecture with geographical redundancy</p>"},{"location":"architecture/#multi-server-support","title":"Multi-server support","text":"<p>Barman supports using multiple servers. It can store backup data coming from multiple PostgreSQL instances, even with different versions, in a centralized manner.  For more information on multiple servers, see Standby servers in the PostgreSQL documentation.</p> <p>Multi-server support allows for complex disaster recovery architectures, forming a \"star schema\", where multiple PostgreSQL servers rotate around a central Barman server.</p> <p>Important</p> <p>From this point forward, for the sake of simplicity, this guide will assume the following basic architecture:</p> <ul> <li>A single PostgreSQL instance with a host name of pg</li> <li>A single backup server with Barman and a host name of backup</li> </ul>"},{"location":"architecture/#backup-methods","title":"Backup methods","text":"<p>Barman can take backups using the following methods:</p> <ul> <li>Rsync, which uses SSH as a transport mechanism</li> <li>pg_basebackup, which uses PostgreSQL's streaming replication protocol</li> </ul> <p>Recommendation</p> <p>Streaming replication is recommended for all currently supported versions of PostgreSQL for the following reasons:</p> <ul> <li>Provides a simple setup procedure</li> <li>Supports backups for a PostgreSQL server on Windows (Windows support for Barman is experimental).</li> <li>Better integration with Docker</li> </ul> <p>Backup using rsync is recommended in all cases where pg_basebackup limitations occur.  For example, rsync would be recommended for a very large database that can benefit from incremental backup and deduplication.</p>"},{"location":"architecture/#backup-limitations","title":"Backup limitations","text":"<p>As Barman transparently makes use of pg_basebackup, the following features aren't supported:</p> <ul> <li>Incremental backup</li> <li>Parallel backup</li> <li>Deduplication</li> </ul> <p>In this case, bandwidth limitation has some restrictions compared to the traditional method via rsync.</p>"},{"location":"architecture/#barman-wal-archive","title":"Barman WAL archive","text":"<p>Recovering a PostgreSQL backup relies on replaying transaction logs (also known as xlog or WAL files). WAL files stored by Barman must be stored alongside the base backups so that they're available at recovery time. You can use WAL streaming or standard WAL archiving to copy WALs into Barman's WAL archive.</p> <p>WAL streaming involves streaming WAL files from the PostgreSQL server with pg_receivewal using replication slots. WAL streaming is able to reduce the risk of data loss, bringing RPO down to near zero values. You can add Barman as a synchronous WAL receiver in your PostgreSQL cluster and achieve zero data loss (RPO=0).</p> <p>Barman supports standard WAL file archiving which is achieved using PostgreSQL's <code>archive_command</code>.  The <code>archive_command</code> can be used via rsync/SSH, or with the <code>barman-wal-archive</code> command. With this method, WAL files are archived only when PostgreSQL switches to a new WAL file. This normally happens for each 16MB worth of data changes.</p> <p>Either WAL streaming or WAL archiving must be configured. You can configure both WAL streaming and standard WAL archiving.  When both are configured, Barman will automatically de-duplicate incoming WALs. This provides a fallback mechanism so that WALs are still copied to Barman's archive in the event that WAL streaming fails.</p> <p>Recommendation</p> <p>For general usage we recommend configuring WAL streaming only.</p> <p>Note</p> <p>Previous versions of Barman recommended that both WAL archiving and WAL streaming were used. This was because PostreSQL versions older than 9.4 didn't support replication slots, therefore, WAL streaming alone couldn't guarantee all WALs would be safely stored in Barman's WAL archive. Since all supported versions of PostgreSQL now have replication slots, it's sufficient to configure only WAL streaming.</p>"},{"location":"architecture/#common-backup-scenarios","title":"Common backup scenarios","text":"<p>Barman has two common backup scenarios:</p> <ul> <li>Backup via streaming protocol, aka streaming-only</li> <li>Backup via rsync/SSH</li> </ul> <p>Recommendation</p> <p>Backup via streaming protocol is recommended for most use cases.</p> <p>You must choose a scenario for every server that you'll back up with Barman. You can have heterogeneous setups within the same installation.  If your architecture contains other technologies such as repmgr, pgBouncer, Nagios/Icinga, etc..., then you should account for those in your chosen scenario.</p>"},{"location":"architecture/#backup-via-streaming-protocol-aka-streaming-only","title":"Backup via streaming protocol, aka streaming-only","text":"<p>Backup scenario 1a: streaming-only</p>"},{"location":"architecture/#requirements","title":"Requirements","text":"<p>For the streaming-only scenario, you must configure:</p> <ol> <li>A standard connection to PostgreSQL, for management, coordination, and monitoring purposes</li> <li>A streaming replication connection that will be used by both pg_basebackup for base backup operations, and pg_receivewal for WAL streaming</li> </ol> <p>This scenario doesn't use an SSH connection for backup and archiving operations, which makes it suitable and practical for Docker environments.</p>"},{"location":"architecture/#wal-archiving-plus-streaming","title":"WAL archiving plus streaming","text":"<p>You can configure WAL archiving via SSH in addition to WAL streaming:</p> <p>Backup scenario 1b: streaming backup with WAL archiving</p>"},{"location":"architecture/#requirements_1","title":"Requirements","text":"<p>The following requirements apply to configure WAL archiving via SSH:</p> <ul> <li>An additional SSH connection that allows the postgres user on the PostgreSQL server to connect as the barman user on the Barman server</li> <li>The PostgreSQL <code>archive_command</code> must be configured to ship WAL files to Barman.</li> </ul>"},{"location":"architecture/#backup-via-rsyncssh","title":"Backup via rsync/SSH","text":"<p>Important</p> <p>An rsync/SSH backup installation is required for use cases that need any of the following:</p> <ul> <li>File-level incremental backup</li> <li>Parallel backup</li> <li>Finer control of bandwidth usage, including on a per-tablespace basis</li> </ul> <p>Backup scenario 2a - rsync/SSH</p>"},{"location":"architecture/#requirements_2","title":"Requirements","text":"<p>For the rsync/SSH scenario, you must configure:</p> <ol> <li>A standard connection to PostgreSQL for management, coordination, and monitoring purposes</li> <li>An SSH connection for base backup operations to be used by rsync. The connection must allow the barman user on the Barman server to connect as postgres user on the PostgreSQL server.</li> <li>An SSH connection for WAL archiving to be used by the <code>archive_command</code> in PostgreSQL and that allows the postgres user on the PostgreSQL server to connect as the barman user on the Barman server.</li> </ol>"},{"location":"architecture/#rsync-with-wal-streaming","title":"rsync with WAL streaming","text":"<p>As an alternative to configuring WAL archiving in step 3, you can instead configure WAL streaming as described in scenario 1a. This will use a streaming replication connection instead of <code>archive_command</code> and can significantly reduce RPO. </p> <p>As with scenario 1a, it's also possible to configure both WAL streaming and WAL archiving:</p> <p>Backup scenario 2b - rsync/SSH with WAL streaming</p>"},{"location":"contributing/","title":"Contributing to Barman","text":"<p>EnterpriseDB has a team of software engineers, architects, database administrators, system administrators, QA engineers, developers and managers that dedicate their time and expertise to improve Barman's code. </p> <p>We adopt lean and agile methodologies for software development, and we believe in the devops culture that allowed us to implement rigorous testing procedures through cross-functional collaboration. </p> <p>Every Barman commit is the contribution of multiple individuals, at different stages of the production pipeline.</p>"},{"location":"contributing/#how-to-contribute","title":"How to contribute","text":"<p>Contributions from external developers are welcome.  All contributions must meet the following requirements: </p> <ul> <li>User documentation is provided.</li> <li>Source code is properly documented and contains relevant comments.</li> <li>Code is covered by unit tests.</li> <li>No unrelated feature is compromised or broken.</li> <li>Source code is rebased on the current master branch.</li> <li>Commits and pull requests are limited to a single feature.</li> <li>Changes to the user interface have been discussed with and agreed to by EnterpriseDB.</li> </ul> <p>Important</p> <p>All contributions must provide a copyright assignment and a disclaimer of any work-for-hire ownership claims from the employer of the developer.  This provides assurance that all of the Barman distribution remains free.  </p> <p>You can obtain a copy of the relevant Copyright Assignment Form by emailing the Barman team.</p> <p>Contributions are listed in the AUTHORS file of the Barman package.</p>"},{"location":"contributing/#authors","title":"Authors","text":"<ul> <li>Abhijit Menon-Sen</li> <li>Didier Michel</li> <li>Michael Wallace</li> </ul>"},{"location":"contributing/#past-contributors","title":"Past contributors","text":"Contributor Role Anna Bellandi QA/testing Britt Cole Documentation reviewer Carlo Ascani Developer Francesco Canovai QA / testing Gabriele Bartolini Architect Gianni Ciolli QA / testing Giulio Calacoci Developer Giuseppe Broccolo Developer Jane Threefoot Developer Jonathan Battiato QA / testig Leonardo Cecchi Developer Marco Nenciarini Project lead Niccol\u00f2 Fei QA / testing Rubens Souza QA / testing Stefano Bianucci Developer"},{"location":"download/","title":"Download","text":"<p>You can obtain Barman from any of the following sources:</p>"},{"location":"download/#edb-github","title":"EDB Github","text":"<p>EDB github</p>"},{"location":"download/#edb-downloads","title":"EDB Downloads","text":"<p>EDB downloads</p>"},{"location":"download/#2nd-quadrant","title":"2nd Quadrant","text":"<p>2nd Quadrant repo</p>"},{"location":"download/#python-package-index-pypi","title":"Python Package Index (PyPI)","text":"<p>PyPI</p>"},{"location":"faq/","title":"Frequently asked questions (F.A.Q.)","text":""},{"location":"faq/#general","title":"General","text":"Does Barman perform physical backup of PostgreSQL databases? <p>Yes. Barman is an application for physical backups of PostgreSQL servers that manages base backups and WAL archiving. It's a disaster recovery application. Barman doesn't support logical backups (aka dumps).</p> What's the difference between <code>pg_dump</code> and Barman and why should I use Barman instead? <p>If you already use <code>pg_dump</code>, it is a good thing. However, if your business is based on your PostgreSQL database, logical backups (the ones performed by <code>pg_dump</code>) are not enough. These dumps are snapshots of your database at a particular time of your day. Usually we perform these activities at night. If a crash occurs during the day, all your transactions between the time of the dump and the crash are lost. Forever. In this context, you need to put in place a more robust solution for disaster recovery, based on physical backups. Barman is one of these, but not the only one. Similar tools, also open-source, are pg-rman and OmniPITR which are quite different from Barman.</p> I manage several PostgreSQL instances. Can Barman manage more than one PostgreSQL server centrally? <p>Yes. Barman has been designed to allow remote backups of PostgreSQL servers. It allows DBAs to manage the backups of multiple servers from a centralised host. Barman allows definition of a catalogue of PostgreSQL servers for base backups and continuous archiving of WAL segments.</p> Does Barman manage replication and high availability as well? How does it compare with repmgr, OmniPITR, walmgr and similar tools? <p>No. Barman aims to be a pure disaster recovery solution. It is responsible for the sole backup of a cluster of PostgreSQL servers. If high availability is what you are looking for, we encourage you to use repmgr. Barman specifically targets the DR case only, because it requires a simpler and less invasive design than the one required to cover HA. This is why Barman does not duplicate existing HA tools like the ones mentioned above. You do not need to install anything on the server. The only requirement is to configure access for the Barman client, which is less invasive than what is required for HA.</p> Can you define retention policies. Does Barman manage them? <p>According to us, the PostgreSQL eco-system was lacking of a product that facilitates the setup and the management of disaster recovery solutions for DBAs. Barman 1.2.0 introduced support for retention policies both for base backups and WAL segments, for every single server. You can specify the retention policy in the configuration file based on time (e.g. \u2018recovery window of 30 days\u2019) or number of base backups (e.g. \u2018redundancy 3\u2019).</p> Does Barman guarantee data protection and security? <p>Barman communicates with your remote/local PostgreSQL server using SSH connections (for process and file management) and the standard PostgreSQL connection (for querying the database). It is the system administrator\u2019s duty to make sure that SSH communications occur in a safe way. At the same time it is the database administrator\u2019s duty to make sure communications with the PostgreSQL server occur in a secure way.</p> Is the interface complex and hard to understand? <p>Currently Barman has a console interface through which you can specify several commands. You can list the servers managed by Barman, or list the available backups (and related information such as time, size, number of WAL segments, etc.), or show the information for a particular backup. Launching a new base backup for a server is trivial, as well as restoring it, either locally or remotely.</p> I don't want to manage backup space and want my disaster recovery solution to be scalable and elastic in terms of disk resources. Do you support storage on Amazon EC2 facilities? <p>Currently, no. However Barman has been designed to one day integrate WAL shipping and backup archiving with Amazon S3 storage. We are looking for sponsors willing to fund the development of this feature and add it to Barman\u2018s open-source version.</p> Do you have packages for RedHat and Debian based distributions? <p>Yes. However, maintaining packages requires development and testing. We would appreciate it if you would consider sponsoring the project so that our Debian and RPM packages are regularly updated and released.</p> Does Barman support streaming replication protocol available from PostgreSQL 9? <p>Currently, no. However, we would love to extend Barman so that it can perform both the client and the server roles for streaming replication. It is certainly feasible and this would allow to implement cascading backup, as well as synchronous backup (for \u201c0 recovery point objective\u201d).</p> Does Barman allow to cap to bandwidth usage for backup and recovery? <p>Version 1.2.1 introduces support for bandwidth limitation at global, server and tablespace level.</p>"},{"location":"faq/#installation-and-configuration","title":"Installation and Configuration","text":"Does Barman have to be installed on the same server than PostgreSQL? <p>No. Barman does not necessarily require to be on the same host where PostgreSQL is running. It is your choice to install it locally or on another server (usually dedicated for backup purposes).</p> Setting up and managing physical backups in PostgreSQL is not trivial. Is Barman easy to setup and configure? <p>Barman is written in Python and the installer is able to download and install all the required dependencies. We have adopted a configuration by convention approach, that allows administrators to specify configuration options at global and server level but makes Barman work the same in case we want to stick with the default options. All you need to do is specify a root directory for Barman then, for each server, a Postgres connection and an SSH connection. The most complicated task you need to do is to configure WAL archiving in the PostgreSQL server in order to ship WAL files to Barman.</p> Can you have more Barman configurations in a backup server? <p>Yes. Barman needs a configuration file. You can have a system wide configuration (/etc/Barman.conf) or a user configuration (~/.Barman.conf). For instance, you could setup several users in your system that use Barman, each of those working on a subset of your managed PostgreSQL servers. This way you can protect your backups on a user basis.</p>"},{"location":"faq/#backup","title":"Backup","text":"How many backups can Barman handle for every PostgreSQL server? Can it handle just one backup per server or more? <p>Barman allows the storage of multiple base backups per PostgreSQL server. You can actually list every backup for that particular server, along with their dimensions on disks and the number of directly associated WAL files. The only limit on the number of backups is disk space.</p> I have continuous archiving in place, but managing WAL files and understanding which ones \u201cbelong\u201d to a particular base backup is not obvious. Can Barman simplify this? <p>Fortunately yes. The way Barman works is to keep separate base backups from WAL segments for a specific server. Even though they are much related, Barman sees a WAL archive as a continuous stream of data from the first base backup to the last available. A neat feature of Barman is to link every WAL file to a base backup so that it is possible to determine the size of a backup in terms of two components: base backup and WAL segments.</p> Can Barman compress base backups? <p>Currently, Barman can compress backups using the postgres backup method, thanks to <code>pg_basebackup</code> compression features. This can be enabled using the <code>backup_compression</code> config option. For rsync based backups, at the moment there is no compression method, but it is feasible and the current design allows it. We are seeking sponsors interested in developing the compression feature of rsync base backups.</p> Can Barman compress WAL segments? <p>Yes. You can specify your compression filter for WAL segments, and dramatically reduce the size of your WAL files by 5/10 times.</p> Does Barman backup tablespaces? <p>Yes. Tablespaces are handled transparently and automatically by Barman.</p> Barman backup is stuck on \u201cAsking PostgreSQL server to finalize the backup\u201d. What am I supposed to do? <p>This probably means that the WAL shipping process is not working properly. Make sure that the <code>archive_command</code> on the PostgreSQL server is correctly shipping them in the expected WAL incoming directory.</p> Can I backup from a PostgreSQL standby? <p>Yes, Barman natively supports backup from standby servers for both postgres and rsync backup methods.</p>"},{"location":"faq/#recovery","title":"Recovery","text":"Can I specify different retention policies for base backups and WAL segments? <p>Yes, definitely. It might happen for instance that you want to keep base backups of the last 12 months and keep WALs for Point-In-Time-Recovery for the last month only.</p> Does Barman manage recovery? <p>Yes. With Barman you can recover a PostgreSQL instance on your backup server or a remote one.</p> Does Barman manage recovery to a specific transaction or to a specific time? <p>Yes. With Barman you can recover a PostgreSQL instance and specify a transaction ID or a time for targets. It is just a matter of adding an option to your recover command.</p> Does Barman support timelines? <p>Yes, Barman handles PostgreSQL timelines for recovery.</p> Does Barman manage remote recovery? <p>Yes.</p> Does Barman manage tablespaces for recovery operations? <p>Yes. You can also relocate a specific tablespace to another directory.</p> Does Barman support flashbacks? <p>Currently no. However, we will get there. Adding a time machine feature to PostgreSQL is feasible with Barman and requires a bit of coding. Once again, if you need this feature and are in the position to sponsor it, please contact us.</p> During recovery, does Barman allow me to relocate the PGDATA directory? What about tablespaces? <p>Yes. When recovering a server, you can specify different locations for your PGDATA directory and all your tablespaces (if any). This allows you to setup temporary sandbox servers. This is particularly useful in case you want to recover a table that you have unintentionally dropped from the master by dumping the table from the sandbox server and then recreating it in your master server.</p>"},{"location":"features/","title":"Features","text":"<p>The main features and goals of Barman are:</p>"},{"location":"features/#management-and-configuration","title":"Management and Configuration","text":"<ul> <li>Management of multiple PostgreSQL servers</li> <li>Server status and information</li> <li>A simple INI configuration file</li> <li>Relocation of PGDATA and tablespaces at recovery time</li> <li>General and disk usage information of backups</li> <li>Server diagnostics for backup</li> <li>Local storage of metadata</li> </ul>"},{"location":"features/#backup-and-recovery","title":"Backup and Recovery","text":"<ul> <li>Full hot physical backup of a PostgreSQL server</li> <li>Point-In-Time-Recovery (PITR)</li> <li>Incremental backup and recovery</li> <li>Parallel backup and recovery</li> <li>Remote backup via rsync/SSH or pg_basebackup (including a 9.2+ standby)</li> <li>Support for both WAL archiving and streaming</li> <li>Support for synchronous WAL streaming (\u201czero data loss\u201d, RPO=0)</li> <li>Support for both local and remote (via SSH) recovery</li> <li>Hub of WAL files for enhanced integration with standby servers</li> <li>Management of retention policies for backups and WAL files</li> <li>Compression of WAL files (bzip2, gzip or custom)</li> <li>Management of base backups and WAL files through a catalog</li> <li>Pre/Post backup hook scripts</li> </ul> <p>And best of all, Barman is developed purely in Python.</p>"},{"location":"getting-started/","title":"Getting Started","text":"<p>This manual assumes that you are familiar with theoretical disaster recovery concepts, and that you have a grasp of PostgreSQL fundamentals in terms of physical backup and disaster recovery.</p>"},{"location":"getting-started/#prerequisites","title":"Prerequisites","text":"<p>Before you start using Barman, you should become familiar with PostgreSQL and the following concepts:</p> <ul> <li>Base backups</li> <li>Physical backups</li> <li>Full and point-in-time recovery</li> <li>Replication</li> <li>WAL archiving</li> </ul>"},{"location":"getting-started/#approach","title":"Approach","text":"<p>After you have a solid understanding of those concepts, you can use the following approach for Barman:</p> <ol> <li>Review your servers to ensure they meet the requirements and recommendations.</li> <li>Choose an architecture for Barman.</li> <li>Choose a backup method.</li> <li>Install Barman on your servers.</li> <li>Install the <code>barman-cli</code> package to use Barman commands.</li> <li>(Optional) If your architecture includes a cloud provider, install the <code>barman-cli-cloud</code> package to use Barman's cloud commands. </li> <li>Configure your backups.</li> <li>Test your backup and recovery strategy.</li> <li>Implement monitoring for Barman.</li> <li>Customize your Barman configuration.</li> <li>Document your Barman configuration, backup, and recovery procedures.</li> <li>Implement a strategy for ongoing backup and recovery testing.</li> <li>(Optional) Contribute to Barman.</li> </ol>"},{"location":"installing/","title":"Installing","text":"<p>Barman can be installed on the following:</p> <ul> <li>Linux / Unix</li> <li>Windows (experimental)</li> <li>Docker</li> </ul>"},{"location":"installing/#downloads","title":"Downloads","text":"<p>Official packages for Barman are distributed by EnterpriseDB through repositories listed on the Downloads page.</p> <p>Download Barman</p> <p>Note</p> <p>These packages use the default python3 version provided by the target operating system. If an alternative python3 version is required, you must install Barman from source.</p>"},{"location":"installing/#linux-unix","title":"Linux / Unix","text":"<p>Recommendation</p> <p>The recommended way to install Barman is by using the available packages for your GNU/Linux distribution.</p>"},{"location":"installing/#red-hat-enterprise-linux-rhel-and-rhel-based-systems-using-rpm-packages","title":"Red Hat Enterprise Linux (RHEL) and RHEL-based systems using RPM packages","text":"<p>Barman can be installed using RPM packages on:</p> <ul> <li>RHEL8</li> <li>RHEL7 </li> <li>Identical versions of the following RHEL derivatives: AlmaLinux, Oracle Linux, and Rocky Linux. </li> </ul> <p>You must install the Extra Packages Enterprise Linux (EPEL) repository and the PostgreSQL Global Development Group RPM repository before installing Barman.</p> <p>Official RPM packages and download instructions for Barman are distributed by EnterpriseDB via Yum through the public RPM repository.</p> <p>To install Barman on a RHEL-based system, switch to the root user and run the following command:</p> <pre><code> yum install barman\n</code></pre>"},{"location":"installing/#fedora-rpms","title":"Fedora RPMs","text":"<p>In addition to the Barman packages available in the EDB and PGDG repositories, Barman RPMs published by the Fedora project can be found in EPEL. </p> <p>Important</p> <p>Fedora RPMs are not maintained by the Barman developers!</p> <p>Fedora RPMs use a different configuration layout than the packages available in the PGDG and EDB repositories:</p> <ul> <li>EDB and PGDG packages use <code>/etc/barman.conf</code> as the main configuration file and <code>/etc/barman.d</code>for additional configuration files.</li> <li>The Fedora packages use <code>/etc/barman/barman.conf</code> as the main configuration file and <code>/etc/barman/conf.d</code> for additional configuration files.</li> </ul> <p>Bug</p> <p>The difference in configuration file layout means that upgrades between the EPEL and non-EPEL Barman packages can break existing Barman installations until configuration files are manually updated. It's recommended to use a single source repository for Barman packages. </p> <p>To use a single source repository, add the following line to the definition of the repositories from which you don't want to obtain Barman packages:</p> <pre><code>exclude=barman\\* python\\*-barman\n</code></pre> <p>Specifically, to use only Barman packages from the following repositories, add the exclude directive from above to repository definitions in:</p> <p>EDB</p> <ul> <li><code>/etc/yum.repos.d/epel.repo</code></li> <li><code>/etc/yum.repos.d/pgdg-\\*.repo</code></li> </ul> <p>PGDG</p> <ul> <li><code>/etc/yum.repos.d/epel.repo</code></li> <li><code>/etc/yum.repos.d/enterprisedb\\*.repo</code></li> </ul> <p>EPEL</p> <ul> <li><code>/etc/yum.repos.d/pgdg-\\*.repo</code></li> <li><code>/etc/yum.repos.d/enterprisedb\\*.repo</code></li> </ul>"},{"location":"installing/#debianubuntu-using-packages","title":"Debian/Ubuntu using packages","text":"<p>Barman can be installed on Debian and Ubuntu Linux systems using packages.</p> <p>It is directly available in the official repository for Debian and Ubuntu, however, these repositories might not contain the latest available version. To obtain the latest version of Barman, the recommended method is to install both these repositories:</p> <ul> <li>Public APT repository, directly maintained by Barman developers</li> <li>the PostgreSQL Community APT repository, by following instructions in the APT section of the PostgreSQL Wiki</li> </ul> <p>Note</p> <p>Thanks to the direct involvement of Barman developers in the PostgreSQL Community APT repository project, you will always have access to the most updated versions of Barman.</p> <p>To install Barman on a Debian/Ubuntu-based system, switch to the root user and run the following command:</p> <pre><code>apt-get install barman\n</code></pre>"},{"location":"installing/#sles-using-packages","title":"SLES using packages","text":"<p>Barman can be installed on SLES systems using packages available in the PGDG SLES repositories. Install the necessary repository by following the instructions available on the PGDG site.</p> <p>Supported SLES version: SLES 15 SP3.</p> <p>To install Barman on a SLES-based system, switch to the root user and run the following command:</p> <pre><code>zypper install barman\n</code></pre>"},{"location":"installing/#installation-from-sources","title":"Installation from sources","text":"<p>Warning</p> <p>Manual installation of Barman from sources should only be performed by expert GNU/Linux users. Installing Barman this way requires system administration activities such as dependencies management, barmanuser creation, configuration of the barman.conf file, cron setup for the barman cron command, log management, and so on.</p> <p>Create a system user called barman on the backup server. As barman user, download the sources and uncompress them.</p> <p>For a system-wide installation, type:</p> <p><pre><code>barman@backup\\$ ./setup.py build\n</code></pre> # run this command with root privileges or through sudo</p> <pre><code>barman@backup\\# ./setup.py install\n</code></pre> <p>For a local installation, type:</p> <pre><code>barman@backup\\$ ./setup.py install --user\n</code></pre> <p>The barman application will be installed in your user directory (make sure that your PATH environment variable is set properly).</p> <p>Barman is also available on the Python Package Index (PyPI) and can be installed through pip.</p>"},{"location":"installing/#postgresql-clientserver-binaries","title":"PostgreSQL client/server binaries","text":"<p>The following Barman features depend on PostgreSQL binaries:</p> Feature Configuration Requirement Streaming backup with <code>backup_method = postgres</code> pg_basebackup Streaming WAL archiving with <code>streaming_archiver = on</code> pg_receivewal or pg_receivexlog Verifying backups with barman <code>verify-backup</code> pg_verifybackup <p>Depending on the target OS, these binaries are installed with either the PostgreSQL client or server packages:</p> <ul> <li> <p>On RedHat/CentOS and SLES:</p> <ul> <li>The pg_basebackup and pg_receivewal/pg_receivexlog binaries are installed with the PostgreSQL client packages.</li> <li>The pg_verifybackup binary is installed with the PostgreSQL server packages.</li> <li>All binaries are installed in <code>/usr/pgsql-\\${PG_MAJOR_VERSION}/bin</code>.</li> </ul> </li> <li> <p>On Debian/Ubuntu:</p> <ul> <li>All binaries are installed with the PostgreSQL client packages.</li> <li>The binaries are installed in <code>/usr/lib/postgresql/\\${PG_MAJOR_VERSION}/bin</code>.</li> </ul> </li> </ul> <p>You must ensure that either:</p> <ol> <li>The Barman user has the <code>bin</code> directory for the appropriate PG_MAJOR_VERSION on its path, or:</li> <li>The <code>path_prefix</code>option is set in the Barman configuration for each server and points to the <code>bin</code> directory for the appropriate PG_MAJOR_VERSION.</li> </ol> <p>The <code>psql</code> program is recommended in addition to the above binaries. While Barman doesn't use it directly, the documentation provides examples of how it can be used to verify PostgreSQL connections are working as intended. The psql binary can be found in the PostgreSQL client packages.</p>"},{"location":"installing/#third-party-postgresql-variants","title":"Third party PostgreSQL variants","text":"<p>When using Barman for backup and recovery of third-party PostgreSQL variants, check whether the PGDG client/server binaries described earlier are compatible with your variant. If they're incompatible, then choose and install compatible alternatives from their appropriate packages.</p>"},{"location":"license/","title":"License","text":"<p>Barman is distributed under GNU GPL 3 and maintained by EnterpriseDB, a platinum sponsor of the PostgreSQL project.</p>"},{"location":"monitoring/","title":"Monitoring","text":"<p>Monitoring Barman</p>"},{"location":"philosophy/","title":"Philosophy","text":"<p>In a perfect world, there would be no need for a backup. In the real world, especially in business environments, one must be prepared for the \"unexpected\". Unexpected database events might present in the following forms:</p> <ul> <li>Data corruption</li> <li>Software failure</li> <li>Hardware failure</li> <li>Human error</li> <li>Natural disaster</li> </ul>"},{"location":"philosophy/#business-continuity","title":"Business continuity","text":"<p>A DBA should be able to recover from any of these unexpected events, and restore the database in the shortest time possible. We normally refer to this discipline as disaster recovery, and more broadly business continuity.</p> <p>Within business continuity, it is important to familiarise yourself with two fundamental metrics, as defined by Wikipedia:</p> <ul> <li> <p>Recovery Point Objective (RPO): The maximum targeted period in which data might be lost from an IT service due to a major incident.</p> </li> <li> <p>Recovery Time Objective (RTO): The targeted duration of time and a service level within which a business process must be restored after a disaster (or disruption) in order to avoid unacceptable consequences associated with a break in business continuity.</p> </li> </ul> <p>In more simplistic terms, RPO represents the maximum amount of data you can afford to lose, while RTO represents the maximum downtime that you can afford for your service.</p> <p>Ideally, zero data loss and zero down-time (RTO=0 / RPO=0) are preferable - even for non-critical systems. Achieving those metrics requires a careful cost analysis and conversation to determine your business continuity requirements.</p> <p>Fortunately, with an open source stack composed of Barman and PostgreSQL, you can achieve RPO=0, thanks to synchronous streaming replication. RTO is more the focus of a High Availability solution, like repmgr. Therefore, by integrating Barman and repmgr, you can dramatically reduce RTO to nearly zero.</p> <p>Based on our experience at EnterpriseDB, we can confirm that PostgreSQL open source clusters with Barman and repmgr can easily achieve more than 99.99% uptime over a year, if properly configured and monitored.</p>"},{"location":"philosophy/#mission","title":"Mission","text":"<p>Our mission with Barman is to promote a culture of disaster recovery that:</p> <ul> <li>Focuses on backup and recovery procedures.</li> <li>Relies on education and training on strong theoretical and practical concepts of PostgreSQL's crash recovery, backup, Point-In-Time-Recovery, and replication.</li> <li>Promotes testing your backups (only a backup that is tested can be considered to be valid), either manually or automatically (be creative with Barman's hook scripts!)</li> <li>Fosters regular practice of recovery procedures.</li> <li>Solicits regularly scheduled drills and disaster recovery simulations.</li> <li>Relies on continuous monitoring of PostgreSQL and Barman to promptly identify any anomalies.</li> </ul>"},{"location":"philosophy/#be-prepared","title":"Be prepared","text":"<p>It's important to prepare yourself and your team for when unexpected events happen (yes, when, not if), because, in the experiences of many:</p> <ul> <li>It's going to be on a Friday evening, most likely right when you're about to leave the office.</li> <li>It's going to be when you're on vacation and somebody else has to deal with it.</li> <li>You'll regret not being certain that the last available backup is valid.</li> <li>Every second will seem like forever, unless you know how long it takes to recover.</li> <li>It's certainly going to be stressful.</li> </ul> <p>Don't be scared.  Be prepared.</p>"},{"location":"release-notes/","title":"Release Notes","text":"<p>Release history: https://github.com/EnterpriseDB/barman/releases</p>"},{"location":"reqs_limits/","title":"Requirements","text":"<p>The following requirements apply to Barman:</p> <p>Disk space: Calculate your required disk space based on the size of the cluster, number of WAL files generated per day, frequency of backups, and your retention policies.</p> <p>File system:  XFS, ext4, or NFS. If you use NFS, keep in mind the following:</p> <p>The <code>barman_lock_directory</code> should be on a non-network filesystem.</p> <ul> <li>Use version 4 of the NFS protocol.</li> <li>The file system must be mounted using the hard and synchronous options (hard,sync).</li> </ul> <p>Network Time Protocol (NTP): Ensure the time is synchronized between the nodes in your Barman cluster, using NTP for example. For more information on configuring NTP, see Configuring NTP in the Red Hat documentation.</p> <p>Secure Shell (SSH): Ensure the SSH protocol is allowed between the nodes in your Barman cluster. For more information, see SSH Essentials by Digital Ocean.</p>"},{"location":"reqs_limits/#recommendations","title":"Recommendations","text":"<p>The following general recommendations apply to Barman:</p> <p>For each node in your Barman cluster, use the same:</p> <ul> <li>Operating system</li> <li>PostgreSQL version</li> <li>Disk layout</li> <li>Hardware architecture</li> </ul> <p>Using rsync/SSH is recommended in all cases where <code>pg_basebackup</code> limitations occur (for example, a very large database that can benefit from incremental backup and deduplication).</p>"},{"location":"reqs_limits/#limitations","title":"Limitations","text":"<p>The following limitations apply to Barman:</p>"},{"location":"support/","title":"Support","text":"<p>Barman is free software, written and maintained by EnterpriseDB.  </p> <p>You can obtain professional support, community support, and submit bug reports for Barman.</p>"},{"location":"support/#professional-support","title":"Professional Support","text":"<p>EnterpriseDB provides professional support and training courses for Barman, including 24/7 technical support.</p>"},{"location":"support/#email","title":"Email","text":"<p>You can email the Barman team directly here:  info@pgbarman.org</p>"},{"location":"support/#community-support","title":"Community Support","text":"<p>You can obtain community support or reach the Barman development team with the following:</p> <ul> <li>Google group mailing list</li> <li>Freenode IRC channel</li> </ul>"},{"location":"support/#submitting-a-bug","title":"Submitting a bug","text":"<p>To submit a bug report, use the following procedure:</p> <ul> <li>Execute the <code>barman diagnose</code> command and save the output</li> <li>Submit a bug in GitHub with the saved output output from <code>barman diagnose</code>.</li> </ul> <p>Warning</p> <p>Before submitting the output of the <code>barman diagnose</code> command, review the output to ensure it doesn't contain sensitive information.</p>"},{"location":"troubleshooting/","title":"Troubleshooting","text":"<p>To troubleshoot a Barman installation, or for diagnostic and support purposes, use the following command:</p> Command Category Description <code>barman diagnose</code> General Returns configuration information and status for all nodes within a Barman installation. <p>The <code>diagnose</code> command output provides a JSON-formatted report with a full view of the barman server, including:</p> <ul> <li>Global configuration</li> <li>SSH version</li> <li>Python version</li> <li>rsync version</li> <li>PostgreSQL clients version,</li> <li>Current configuration of all servers </li> <li>Current status of all servers</li> </ul> <p>Info</p> <p>For Barman 3.10.0 and higher versions, you can optionally specify the <code>--show-config-source</code> argument. When the argument is provided, for each configuration option of Barman and of the Barman servers, the output will include not only the configuration value, but also the configuration file which provides the effective value.</p> <p>Important</p> <p>Even if the diagnostic report is provided in JSON and that format is thought to be machine readable, its structure is not to be considered part of the interface. The format can change between different Barman versions.</p>"},{"location":"upgrade_paths/","title":"Upgrade paths","text":"<p>Barman follows the trunk-based development paradigm.  There is only one stable version, the latest. After every commit, Barman goes through thousands of automated tests for each supported PostgreSQL version and on each supported Linux distribution.</p> <p>Every version is back-compatible with previous versions. Therefore, upgrading Barman normally requires a simple update of packages using <code>yum update</code> or <code>apt update</code>.</p> <p>Important</p> <p>The following exceptions in the development of Barman have required some small changes to the configuration.</p>"},{"location":"upgrade_paths/#upgrading-to-barman-300","title":"Upgrading to Barman 3.0.0","text":"<p>Default backup approach for Rsync backups is now concurrent</p> <p>Barman will now use concurrent backups if neither <code>concurrent_backup</code> or <code>exclusive_backup</code> are specified in <code>backup_options</code>. This differs from previous Barman versions where the default was to use exclusive backup.</p> <p>If you require exclusive backups you will now need to add <code>exclusive_backup</code> to <code>backup_options</code> in the Barman configuration.</p> <p>Exclusive backups are not supported with PostgreSQL 15.</p> <p>Metadata changes</p> <p>A new field named compression will be added to the metadata stored in the <code>backup.info</code> file for all backups taken with version 3.0.0. This is used when recovering from backups taken using the built-in compression functionality of pg_basebackup.</p> <p>The presence of this field means that earlier versions of Barman are not able to read backups taken with Barman 3.0.0. This means that if you downgrade from Barman 3.0.0 to an earlier version, you will have to either manually remove any backups taken with 3.0.0 or edit the <code>backup.info</code> file of each backup to remove the compression field.</p> <p>The same metadata change affects pg-backup-api so if you are using pg-backup-api, you will need to update it to version 0.2.0.</p>"},{"location":"upgrade_paths/#upgrading-from-barman-210","title":"Upgrading from Barman 2.10","text":"<p>If you are using <code>barman-cloud-wal-archive</code> or <code>barman-cloud-backup</code>, be aware that from version 2.11 all cloud utilities have been moved into the new <code>barman-cli-cloud</code> package. Therefore, you need to ensure that the <code>barman-cli-cloud</code> package is properly installed as part of the upgrade to the latest version. If you are not using the above tools, you can upgrade to the latest version as usual.</p>"},{"location":"upgrade_paths/#upgrading-from-barman-2x-prior-to-28","title":"Upgrading from Barman 2.X (prior to 2.8)","text":"<p>Before upgrading from a version of Barman 2.7 or older users of rsync backup method on a primary server should explicitly set <code>backup_options</code> to either <code>concurrent_backup</code> (recommended for PostgreSQL 9.6 or higher), or <code>exclusive_backup</code> (current default), otherwise Barman emits a warning every time it runs.</p>"},{"location":"upgrade_paths/#upgrading-from-barman-1x","title":"Upgrading from Barman 1.X","text":"<p>If your Barman installation is 1.X, you need to explicitly configure the archiving strategy. Before, the file based archiver, controlled by archiver, was enabled by default.</p> <p>Before you upgrade your Barman installation to the latest version, make sure you add the following line either globally or for any server that requires it: <pre><code>archiver = **on**\n</code></pre> Additionally, for a few releases, Barman will transparently set <code>archiver = on</code> with any server that has not explicitly set an archiving strategy and emit a warning.</p>"},{"location":"using/","title":"Using","text":"<p>Using</p>"},{"location":"version_support/","title":"Version Support","text":"<p>Barman supports the following versions:</p> Barman version PostgreSQL version Operating system Python version Python modules Rsync version Additional requirements 3.10.0 (Latest / stable version) 10.0 and higher Linux / UNIX 3.6 and higher Argcomplete Psycopg2 2.4.2 and higher Python-dateutil setuptools 3.1.0 and higher For RedHat Enterprise Linux, CentOS, and Scientific Linux, install the Extra Packages Enterprise Linux (EPEL) repository"},{"location":"version_support/#limitations","title":"Limitations","text":"<ul> <li>Python 2.6 and 3.5 aren\u2019t supported.</li> <li>Python 2.7 is only supported with Barman 3.4.X and will receive only bugfixes.</li> <li>Python 3.6 won\u2019t be supported in future releases of Barman.</li> <li>PostgreSQL version 10 and lower aren\u2019t supported since Barman 3.0.0.</li> <li>PostgreSQL version 10 won\u2019t be supported after Barman 3.5.0.</li> </ul>"},{"location":"version_support/#release-notes","title":"Release Notes","text":"<p>For more information on release notes, bug fixes, and version history, see the Barman Github.</p>"},{"location":"backing_up/bandwidth/","title":"Limiting bandwidth usage","text":"<p>It is possible to limit the usage of I/O bandwidth through the <code>bandwidth_limit</code> option (global/per server), by specifying the maximum number of kilobytes per second. The default is 0, or no limit.</p> <p>Important</p> <p>The <code>bandwidth_limit</code> option is supported with the postgres backup method, but the <code>tablespace_bandwidth_limit</code> option is available only if you use rsync.</p> <p>If you have several tablespaces and prefer to limit the I/O workload of your backup procedures on one or more tablespaces, you can use the <code>tablespace_bandwidth_limit</code> option (global/per server): <pre><code>tablespace_bandwidth_limit = tbname:bwlimit[, tbname:bwlimit, ...]\n</code></pre> The option accepts a comma-separated list of pairs made up of the tablespace name and the bandwidth limit (in kilobytes per second).</p> <p>When backing up a server, Barman will try to locate any existing tablespace listed in the <code>tablespace_bandwidth_limit</code> option. If a tablespace is located, the specified bandwidth limit will be enforced. If not, the default bandwidth limit for that server will be applied.</p>"},{"location":"backing_up/cloud-backups/","title":"Barman-cloud and snapshot backups","text":"<p>Snapshot backups are backups which consist of one or more snapshots of cloud storage volumes.</p> <p>The <code>barman-cloud</code> client utilities can also be used to create and manage backups using cloud snapshots as an alternative to uploading to a cloud object store.</p> <p>When using <code>barman-cloud</code> this way, the backup data is stored by the cloud provider as volume snapshots and the WALs and backup metadata, including the <code>backup_label</code>, are stored in cloud object storage.</p>"},{"location":"backing_up/cloud-backups/#requirements","title":"Requirements","text":"<p>The prerequisites are the same as for snapshot backups using Barman.   An additional requirement is the credentials used by <code>barman-cloud</code> must be able to perform read/write/update operations against an object store.</p> <p>You can take a snapshot backup for a PostgreSQL server using the following commands:</p> <ul> <li><code>barman backup</code>:  with the required configuration operations for snapshots if a Barman server is being used to store WALs and backup metadata.</li> <li><code>barman-cloud-backup</code>:  with the required command line arguments if there is no Barman server and a cloud object store is being used for WALs and backup metadata.</li> </ul>"},{"location":"backing_up/cloud-backups/#process","title":"Process","text":"<p>The high level process for taking a snapshot backup is as follows:</p> <ol> <li>Barman carries out a series of pre-flight checks to validate the snapshot options, instance and disks.</li> <li>Barman starts a backup using the PostgreSQL backup API.</li> <li>The cloud provider API is used to trigger a snapshot for each specified disk. Barman will wait until the snapshot has reached the required state for guaranteeing application consistency before moving on to the next disk.</li> <li>Additional provider-specific data, such as the device name for each disk, is saved to the backup metadata.</li> <li>The mount point and mount options for each disk are saved in the backup metadata.</li> <li>Barman stops the backup using the PostgreSQL backup API.</li> <li>The cloud provider API calls are made on the node where the backup command runs.  This will be either the Barman server (when <code>barman backup</code> is used) or the PostgreSQL server (when <code>barman-cloud-backup</code> is used).</li> </ol> <p>The following pre-flight checks are carried out before each backup and also when <code>barman check</code> runs against a server configured for snapshot backups:</p> <ol> <li>The compute instance specified by <code>snapshot_instance</code> and any provider-specific arguments exists.</li> <li>The disks specified by <code>snapshot_disks</code> exist.</li> <li>The disks specified by <code>snapshot_disks</code> are attached to <code>snapshot_instance</code>.</li> <li>The disks specified by <code>snapshot_disks</code> are mounted on <code>snapshot_instance</code>.</li> </ol>"},{"location":"backing_up/cloud-backups/#taking-a-snapshot-backup","title":"Taking a snapshot backup","text":"<p>To take a snapshot backup with <code>barman-cloud</code>, use <code>barman-cloud-backup</code> with the following additional arguments:</p> <p><code>--snapshot-disk</code> (can be used multiple times for multiple disks) <code>--snapshot-instance</code></p>"},{"location":"backing_up/cloud-backups/#required-arguments","title":"Required arguments","text":"<p>The following arguments are also required for your specific cloud provider.</p>"},{"location":"backing_up/cloud-backups/#for-gcp","title":"For GCP","text":"<p>If the <code>--cloud-provider</code> is <code>google-cloud-storage</code>:</p> <p><code>--gcp-project</code> <code>--gcp-zone</code></p>"},{"location":"backing_up/cloud-backups/#for-azure","title":"For Azure","text":"<p>If the <code>--cloud-provider</code> is <code>azure-blob-storage</code>:</p> <p><code>--azure-subscription-id</code> <code>--azure-resource-group</code></p>"},{"location":"backing_up/cloud-backups/#for-aws","title":"For AWS","text":"<p>If the <code>--cloud-provider</code> is <code>aws-s3</code>, the following are optional arguments:</p> <p><code>--aws-profile</code> <code>--aws-region</code></p>"},{"location":"backing_up/cloud-backups/#unavailable-options","title":"Unavailable options","text":"<p>The following options can't be used with <code>barman-cloud-backup</code> when cloud snapshots are requested:</p> <p><code>--bzip2</code>, <code>--gzip</code> or <code>--snappy</code> <code>--jobs</code></p> <p>Once a backup has been taken, it can be managed using the standard <code>barman-cloud</code> commands such as <code>barman-cloud-backup-delete</code> and <code>barman-cloud-backup-keep</code>.</p>"},{"location":"backing_up/cloud_snapshots/","title":"Backups with cloud snapshots","text":"<p>Barman can create backups of PostgreSQL servers deployed within certain cloud environments by taking snapshots of storage volumes. In this scenario, the physical backups of PostgreSQL files are volume snapshots stored in the cloud, and Barman acts as a storage server for WALs and the backup catalog. These backups can then be managed by Barman just like traditional backups taken with the rsync or postgres backup methods. even though the backup data itself is stored in the cloud.</p> <p>You can create snapshot backups without a Barman server using the <code>barman-cloud-backup</code> command directly on a PostgreSQL server.</p>"},{"location":"backing_up/cloud_snapshots/#requirements","title":"Requirements","text":"<p>To use the snapshot backup method with Barman, deployments must meet the following requirements:</p> <ul> <li>PostgreSQL must be deployed on a compute instance within a supported cloud provider.</li> <li>PostgreSQL must be configured such that all critical data, such as <code>PGDATA</code> and any tablespace data, is stored on storage volumes which support snapshots.</li> <li>The <code>findmnt</code> command must be available on the PostgreSQL host.</li> </ul> <p>Important</p> <p>Any configuration files stored outside of <code>PGDATA</code> won't be included in the snapshots. The management of those files must be carried out using another mechanism such as a configuration management system.</p>"},{"location":"backing_up/cloud_snapshots/#google-cloud-platform-snapshot-prerequisites","title":"Google Cloud Platform snapshot prerequisites","text":"<p>The <code>google-cloud-compute</code> and <code>grpcio</code> libraries must be available to the Python distribution used by Barman. These libraries are an optional dependency and aren't installed by any of the Barman packages. You can install them using pip: <pre><code>pip3 install grpcio google-cloud-compute\n</code></pre></p> <p>Note</p> <p>The minimum version of Python required by the <code>google-cloud-compute</code> library is 3.7. GCP snapshots can't be used with earlier versions of Python.</p> <p>The following additional requirements apply to snapshot backups on Google Cloud Platform:</p> <ul> <li>All disks included in the snapshot backup must be zonal persistent disks. Regional persistent disks aren't supported.</li> <li>A service account with the required set of permissions must be available to Barman. This can be achieved by attaching such an account to the compute instance running Barman (recommended) or by using the <code>GOOGLE_APPLICATION_CREDENTIALS</code> environment variable to point to a credentials file.</li> </ul>"},{"location":"backing_up/cloud_snapshots/#required-permissions-for-gcp","title":"Required permissions for GCP","text":"<p>The required permissions are:</p> <ul> <li>compute.disks.createSnapshot</li> <li>compute.disks.get</li> <li>compute.globalOperations.get</li> <li>compute.instances.get</li> <li>compute.snapshots.create</li> <li>compute.snapshots.delete</li> <li>compute.snapshots.list</li> </ul>"},{"location":"backing_up/cloud_snapshots/#azure-snapshot-requirements","title":"Azure snapshot requirements","text":"<p>The <code>azure-mgmt-compute</code> and <code>azure-identity</code> libraries must be available to the Python distribution used by Barman.</p> <p>These libraries are an optional dependency and aren't installed by any of the Barman packages. You can install them using pip: <pre><code>pip3 install azure-mgmt-compute azure-identity\n</code></pre></p> <p>Note</p> <p>The minimum version of Python required by the <code>azure-mgmt-compute</code> library is 3.7. Azure snapshots can't be used with earlier versions of Python.</p> <p>The following additional requirements apply to snapshot backups on Azure:</p> <ul> <li>All disks included in the snapshot backup must be managed disks which are attached to the VM instance as data disks.</li> <li>Barman must be able to use a credential obtained either using managed identity or CLI login and this must grant access to Azure with the required set of permissions.</li> </ul>"},{"location":"backing_up/cloud_snapshots/#required-permissions-for-azure","title":"Required permissions for Azure","text":"<p>The following permissions are required:</p> <ul> <li>Microsoft.Compute/disks/read</li> <li>Microsoft.Compute/virtualMachines/read</li> <li>Microsoft.Compute/snapshots/read</li> <li>Microsoft.Compute/snapshots/write</li> <li>Microsoft.Compute/snapshots/delete</li> </ul>"},{"location":"backing_up/cloud_snapshots/#aws-snapshot-prerequisites","title":"AWS snapshot prerequisites","text":"<p>The <code>boto3</code> library must be available to the Python distribution used by Barman.</p> <p>This library is an optional dependency and not installed by any of the Barman packages. You can install it using pip: <pre><code>pip3 install boto3\n</code></pre> The following additional requirements and limitations apply to snapshot backups on AWS:</p> <ul> <li>All disks included in the snapshot backup must be non-root EBS volumes and must be attached to the same VM instance.</li> <li>NVMe volumes aren't supported.</li> </ul>"},{"location":"backing_up/cloud_snapshots/#required-permissions-for-aws","title":"Required permissions for AWS","text":"<p>The following permissions are required:</p> <ul> <li>ec2:CreateSnapshot</li> <li>ec2:CreateTags</li> <li>ec2:DeleteSnapshot</li> <li>ec2:DescribeSnapshots</li> <li>ec2:DescribeInstances</li> <li>ec2:DescribeVolumes</li> </ul>"},{"location":"backing_up/cloud_snapshots/#configuration-for-snapshot-backups","title":"Configuration for snapshot backups","text":"<p>To configure Barman for backup via cloud snapshots, set the <code>backup_method</code> parameter to snapshot and set <code>snapshot_provider</code> to a supported cloud provider: <pre><code>backup_method = snapshot\nsnapshot_provider = gcp\n</code></pre></p> <p>The following parameters must be set regardless of cloud provider: <pre><code>snapshot_instance = INSTANCE_NAME\nsnapshot_disks = DISK_NAME,DISK2_NAME,...\n</code></pre> Where <code>snapshot_instance</code> is set to the name of the VM or compute instance where the storage volumes are attached and <code>snapshot_disks</code> is a comma-separated list of the disks which should be included in the backup.</p> <p>Important</p> <p>Ensure that <code>snapshot_disks</code> includes every disk which stores data required by PostgreSQL. Any data which is not stored on a storage volume listed in <code>snapshot_disks</code> won't be included in the backup and won't be available at recovery time.</p>"},{"location":"backing_up/cloud_snapshots/#configuration-for-google-cloud-platform-snapshots","title":"Configuration for Google Cloud Platform snapshots","text":"<p>The following additional parameters must be set when using GCP: <pre><code>gcp_project = GCP_PROJECT_ID\ngcp_zone = ZONE\n</code></pre> - <code>gcp_project</code>:  Set to the ID of the GCP project which owns the instance and storage volumes defined by <code>snapshot_instance</code> and <code>snapshot_disks</code>.</p> <ul> <li><code>gcp_zone</code>:  Set to the availability zone in which the instance is located.</li> </ul>"},{"location":"backing_up/cloud_snapshots/#configuration-for-azure-snapshots","title":"Configuration for Azure snapshots","text":"<p>The following additional parameters must be set when using Azure: <pre><code>azure_subscription_id = AZURE_SUBSCRIPTION_ID\nazure_resource_group = AZURE_RESOURCE_GROUP\n</code></pre> - <code>azure_subscription_id</code>: Set to the ID of the Azure subscription ID which owns the instance and storage volumes defined by <code>snapshot_instance</code> and <code>snapshot_disks</code>. </p> <ul> <li><code>azure_resource_group</code>: Set to the resource group to which the instance and disks belong.</li> </ul>"},{"location":"backing_up/cloud_snapshots/#configuration-for-aws-snapshots","title":"Configuration for AWS snapshots","text":"<p>When specifying <code>snapshot_instance</code> or <code>snapshot_disks</code>, Barman will accept either the instance/volume ID which was assigned to the resource by AWS, or a name. If a name is used, Barman will query AWS to find resources with a matching name tag. If none or multiple matching resources are found, Barman will exit with an error.</p> <p>The following optional parameters can be set when using AWS: <pre><code>aws_region = AWS_REGION\naws_profile = AWS_PROFILE_NAME\n</code></pre> - <code>aws_profile</code>:  Set to the name of a section in the AWS credentials file. If <code>aws_profile</code> isn't used, the default profile will be used. If a credentials file doesn't exist, credentials will be sourced from the environment.</p> <p>If <code>aws_region</code> is specified, it will override any region that may be defined in the AWS profile.</p>"},{"location":"backing_up/cloud_snapshots/#taking-a-snapshot-backup","title":"Taking a snapshot backup","text":"<p>Once the configuration options are set and appropriate credentials are available to Barman, backups can be taken using the <code>barman backup</code> command.</p> <p>Barman will validate the configuration parameters for snapshot backups during the <code>barman check</code> command, and when starting a backup.</p>"},{"location":"backing_up/cloud_snapshots/#unavailable-arguments","title":"Unavailable arguments","text":"<p>The following arguments and config variables are unavailable when using <code>backup_method = snapshot</code>:</p> Command argument Config variable N/A backup_compression --bwlimit bandwidth_limit --jobs parallel_jobs N/A network_compression --reuse-backup reuse_backup"},{"location":"backing_up/compression/","title":"Compression","text":"<p>Barman has a variety of compression configuration options.</p>"},{"location":"backing_up/compression/#network-compression","title":"Network Compression","text":"<p>It is possible to reduce the size of transferred data using compression. It can be enabled using the <code>network_compression</code> option (global/per server):</p> <p>Important</p> <p>The <code>network_compression</code> option isn't available with the postgres backup method.</p> <p><pre><code>network_compression = **true**\\|**false**\n</code></pre> The default is <code>false</code>.  If set to <code>true</code>, data compression is enabled during network transfers (for both backup and recovery).</p>"},{"location":"backing_up/compression/#backup-compression","title":"Backup Compression","text":"<p>Barman can use the compression features of <code>pg_basebackup</code> to compress backup data during the backup process.  You can enable it with the <code>backup_compression</code> configuration option (global/per server).</p> <p>Important</p> <p>The <code>backup_compression</code> and other options in this section aren't available with the rsync or local-rsync backup methods. They're only available with postgres backup method.</p>"},{"location":"backing_up/compression/#compression-algorithms","title":"Compression algorithms","text":"<p>This option will cause <code>pg_basebackup</code> to compress the backup using the specified compression algorithm. The supported algorithms in Barman are: <code>gzip, lz4, zstd</code>, and <code>none</code>. The <code>none</code> compression algorithm will create an uncompressed archive. <pre><code>backup_compression = gzip\\|lz4\\|zstd\\|none\n</code></pre> Barman requires the CLI utility for the selected compression algorithm to be available on both the Barman server and the PostgreSQL server. The CLI utility is used to extract the backup label from the compressed backup and to decompress the backup on the PostgreSQL server during recovery. You can install them with the system packages <code>gzip, lz4</code> and <code>zstd</code> on Debian, Ubuntu, RedHat, CentOS, and SLES systems.</p> <p>Info</p> <p>On Ubuntu 18.04 (Bionic), the <code>lz4</code> utility is available in the <code>liblz4-tool</code> package.</p>"},{"location":"backing_up/compression/#requirements","title":"Requirements","text":"<ul> <li><code>zstd</code> version must be 1.4.4 or higher. The system packages for <code>zstd</code> on Debian 10 (Buster), Ubuntu 18.04 (Bionic) and SLES 12 install an earlier version.  <code>backup_compression = zstd</code> won't work with those packages.</li> <li><code>z4</code> and <code>zstd</code> are only available with PostgreSQL version 15 or higher.</li> <li>When using <code>backup_compression</code>, you must also set <code>recovery_staging_path</code> so that <code>barman recover</code> is able to recover the compressed backups.</li> </ul>"},{"location":"backing_up/compression/#compression-workers","title":"Compression workers","text":"<p>This optional parameter allows compression using multiple threads to increase compression speed The default is 0.  </p> <pre><code>backup_compression_workers = 2\n</code></pre>"},{"location":"backing_up/compression/#requirements_1","title":"Requirements","text":"<ul> <li>The <code>zstd</code> version must be either:<ul> <li>1.5.0 or higher</li> <li>1.4.4 or higher compiled with multithreading option</li> </ul> </li> </ul>"},{"location":"backing_up/compression/#limitations","title":"Limitations","text":"<ul> <li>The <code>backup_compression_workers</code> option is only available with <code>zstd</code> compression.</li> </ul>"},{"location":"backing_up/compression/#compression-level","title":"Compression level","text":"<p>The compression level can be specified using the <code>backup_compression_level</code> option. This should be set to an integer value supported by the compression algorithm specified in <code>backup_compression</code>. If undefined, the compression algorithm default value will be used.</p> <p>The <code>none</code> compression only supports <code>backup_compression_level=0</code>.</p> <p>Note</p> <p>The available and default values for <code>backup_compression_level</code> depend on the compression algorithm used. </p> <p>Info</p> <p>On PostgreSQL version 14 and lower, gzip support <code>backup_compression_level=0</code> uses the default compression level.</p>"},{"location":"backing_up/compression/#compression-location","title":"Compression location","text":"<p>When using Barman with PostgreSQL version 15 or higher, you can use the <code>backup_compression_location</code> option to specify if compression happens on the server (i.e. PostgreSQL will compress the backup) or on the client (i.e. <code>pg_basebackup</code> will compress the backup).</p> <p><pre><code>backup_compression_location = server\\|client\n</code></pre>  Using <code>server</code> should reduce the network bandwidth required by the backup at the cost of moving the compression work onto the PostgreSQL server.</p> <p>When <code>backup_compression_location</code> is set to <code>server</code>, an additional option, <code>backup_compression_format</code>, can be set to <code>plain</code> to have <code>pg_basebackup</code>uncompress the data before writing it to disk.</p>"},{"location":"backing_up/compression/#compression-format","title":"Compression format","text":"<p><pre><code>backup_compression_format = plain\\|tar\n</code></pre> If <code>backup_compression_format</code> is unset or has the value <code>tar</code>, the backup will be written to disk as compressed tarballs. A description of both the plain and tar formats can be found in the [pg_basebackup] documentation (https://www.postgresql.org/docs/current/app-pgbasebackup.html).</p> <p>Important</p> <p>Barman uses external tools to manage compressed backups. Depending on the <code>backup_compression</code> and <code>backup_compression_format</code>, you may need to install one or more tools on the Postgres server and the Barman server. The following table will help you choose according to your configuration.</p> <code>backup_compression</code> <code>backup_compression_format</code> Postgres server Barman server gzip plain tar None gzip tar tar tar lz4 plain tar, lz4 None lz4 tar tar, lz4 tar, lz4 zstd plain tar, zstd None zstd tar tar, zstd tar, zstd none tar tar tar"},{"location":"backing_up/concurrent/","title":"Concurrent backups","text":"<p>Concurrent backup is a technology that uses the streaming replication protocol, for example, with a tool like <code>pg_basebackup</code>.</p> <p>Normally, during backup operations, Barman uses PostgreSQL native functions <code>pg_start_backup</code> and <code>pg_stop_backup</code> for concurrent backup.  This is the recommended way of taking backups for PostgreSQL 9.6 and above (though note the functions have been renamed to <code>pg_backup_start</code> and <code>pg_backup_stop</code> in the PostgreSQL 15 beta).</p> <p>Concurrent backup also allows the following architecture scenario with Barman: backup from a standby server using rsync.</p> <p>By default, <code>backup_options</code> is set to <code>concurrent_backup</code>. If exclusive backup is required for PostgreSQL servers older than version 15 then users should set <code>backup_options</code> to <code>exclusive_backup</code>.</p> <p>When <code>backup_options</code> is set to <code>concurrent_backup</code>, Barman activates the concurrent backup mode for a server and follows two rules:</p> <ul> <li><code>ssh_command</code>: must point to the destination Postgres server</li> <li><code>conninfo</code>: must point to a database on the destination Postgres database.</li> </ul> <p>Important</p> <p>With a concurrent backup, Barman can't determine whether the closing WAL file of a full backup has actually been shipped.  This is the opposite of an exclusive backup, where PostgreSQL ensures the WAL file is correctly archived. </p> <p>Be aware that the full backup cannot be considered consistent until that WAL file has been received and archived by Barman. </p> <p>Barman 2.5 added a new state, called <code>WAITING_FOR_WALS</code>, which is managed by the <code>check-backup</code> command (part of the ordinary maintenance job performed by the <code>cron</code> command). From Barman 2.10, you can use the <code>--wait</code> option with <code>barman backup</code> command.</p>"},{"location":"backing_up/concurrent/#concurrent-backup-of-a-standby","title":"Concurrent backup of a standby","text":"<p>When backing up a standby, the following configuration options should point to the standby server:</p> <ul> <li><code>conninfo</code></li> <li><code>streaming_conninfo</code> (when using <code>backup_method = postgres</code> or <code>streaming_archiver = on</code>)</li> <li><code>ssh_command</code> (when using <code>backup_method = rsync</code>)</li> </ul> <p>The following configuration option should point to the primary server:</p> <ul> <li><code>primary_conninfo</code></li> </ul> <p>Barman will use <code>primary_conninfo</code> to switch to a new WAL on the primary so that the concurrent backup against the standby can complete without having to wait for a WAL switch to occur naturally.</p> <p>Important</p> <p>Set <code>primary_conninfo</code> if the standby should be backed up when there is little or no write traffic on the primary.</p> <p>As of Barman 3.8.0, if <code>primary_conninfo</code> is set, it's possible to add the <code>primary_checkpoint_timeout</code> option for a server.  This option specifies the maximum time in seconds for Barman to wait for a new WAL file to be produced before forcing the execution of a checkpoint on the primary. The <code>primary_checkpoint_timeout</code> option should be set to a number of seconds greater than the value of the <code>archive_timeout</code> option set on the primary server.</p> <p>If <code>primary_conninfo</code> isn't set, the backup will still run, however, it will wait at the stop backup stage until the current WAL segment on the primary is newer than the latest WAL required by the backup.</p> <p>Barman requires that WAL files and backup data come from the same PostgreSQL server. If the standby is promoted to primary, the backups and WALs will continue to be valid, however, you may want to update the Barman configuration so that it uses the new standby for taking backups and receiving WALs.</p> <p>WALs can be obtained from the standby using either WAL streaming or WAL archiving.  When configuring WAL archiving from the standby, set <code>archive_mode = always</code> in the PostgreSQL config on the standby server.</p> <p>Info</p> <p>With PostgreSQL 10 and earlier, Barman doesn't support WAL streaming and WAL archiving enabled at the same time on a standby. If you have one of them enabled, disable the other.  This is because it's possible for WALs produced by PostgreSQL 10 and earlier to be logically equivalent but different at the binary level, which causes Barman to fail to detect that two WALs are identical.</p>"},{"location":"backing_up/immediate_checkpoint/","title":"Immediate Checkpoint","text":"<p>Before starting a backup, Barman requests a checkpoint, which generates additional workload. Normally that checkpoint is throttled according to the settings for workload control on the PostgreSQL server, which means that the backup could be delayed.</p> <p>This default behaviour can be changed through the <code>immediate_checkpoint</code> configuration global/server option (set to false by default).</p> <p>If <code>immediate_checkpoint</code> is set to true, PostgreSQL will not try to limit the workload, and the checkpoint will happen at maximum speed, starting the backup as soon as possible.</p> <p>You can override the configuration option behavior, by issuing <code>barman backup</code> with any of these two options:</p> <ul> <li><code>\\--immediate-checkpoint</code>:  Forces an immediate checkpoint.</li> <li><code>\\--no-immediate-checkpoint</code>:  Forces to wait for the checkpoint to happen.</li> </ul>"},{"location":"backing_up/incremental/","title":"Incremental backup","text":"<p>Barman implements file-level incremental backup. Incremental backup is a type of full periodic backup which only saves data changes from the latest full backup available in the catalog for a specific PostgreSQL server. It's different from a differential backup, which is implemented by WAL continuous archiving.</p> <p>Note</p> <p>Block level incremental backup is planned for future versions of Barman.</p> <p>The main goals of incremental backups in Barman are:</p> <ul> <li>Reduce the time taken for the full backup process</li> <li>Reduce the disk space occupied by several periodic backups (data deduplication)</li> </ul> <p>This feature heavily relies on rsync and hard links, which must be supported by both the underlying operating system and the file system where the backup data resides.</p> <p>The main concept is that a subsequent base backup will share those files that haven't changed since the previous backup, resulting in lower disk usage. This is particularly true of VLDB contexts and of databases that contain a high percentage of read-only historical tables.</p> <p>Barman implements incremental backup through a global/server option called <code>reuse_backup</code>.  It transparently manages the <code>barman backup</code> command. It accepts three values:</p> <ul> <li><code>off</code>: standard full backup (default)</li> <li><code>link</code>: incremental backup, by reusing the last backup for a server and creating a hard link of the unchanged files (for backup space and time reduction)</li> <li><code>copy</code>: incremental backup, by reusing the last backup for a server and creating a copy of the unchanged files (just for backup time reduction)</li> </ul> <p>The most common scenario is to set <code>reuse_backup</code> to <code>link</code>, as follows: <pre><code>reuse_backup = link\n</code></pre> Setting this at global level will automatically enable incremental backup for all your servers.</p> <p>You can override the setting of the <code>reuse_backup</code> option through the <code>--reuse-backup</code>runtime option for the <code>barman backup</code> command. Similarly, the runtime option accepts three values: <code>off, link</code>, and <code>copy</code>. For example, you can run a one-off incremental backup as follows: <pre><code>barman backup --reuse-backup=link \\&lt;server_name\\&gt;\n</code></pre></p> <p>Note</p> <p>The <code>reuse_backup</code> option can't be used with the postgres backup method.</p>"},{"location":"backing_up/local_backups/","title":"Local backups","text":"<p>Danger</p> <p>This feature is not recommended for production usage, as Barman and PostgreSQL reside on the same server and are part of the same single point of failure. </p> <p>Some EnterpriseDB customers have requested to add support for local backup to Barman to be used under specific circumstances and, most importantly, under the 24/7 production service delivered by the company. </p> <p>Using this feature currently requires installation from sources, or to customize the environment for the postgres user in terms of permissions as well as logging and cron configurations.</p> <p>Under certain circumstances, Barman can be installed on the same server where the PostgreSQL instance resides, with backup data stored on a separate volume from <code>PGDATA</code> and, where applicable, tablespaces. Usually, these volumes reside on network storage appliances, with filesystems like NFS.</p> <p>Warning</p> <p>This architecture is not endorsed by EnterpriseDB. For an enhanced business continuity experience of PostgreSQL, with better results in terms of RPO and RTO, it's recommended to use a shared-nothing architecture with a remote installation of Barman, capable of acting like a witness server for replication and monitoring purposes.</p> <p>The only requirement for local backup is that Barman runs with the same user as the PostgreSQL server, which is normally postgres. Given that the community packages install Barman under the barman user, this use case requires manual installation procedures that include:</p> <ul> <li>cron configurations</li> <li>log configurations, including logrotate</li> </ul> <p>To use local backup for a given server in Barman, set <code>backup_method</code> to <code>local-rsync</code>. The feature is essentially identical to its rsync equivalent, which relies on SSH instead and operates remotely. With <code>local-rsync</code>, file system copy is performed issuing rsync commands locally.  For this reason, it's required that Barman runs with the same user as PostgreSQL.</p> <p>For example, a portion of the configuration for local backup for a server named local-pg13: <pre><code>**[local-pg13]**\ndescription = \"Local PostgreSQL 13\"\nbackup_method = local-rsync\n</code></pre></p>"},{"location":"backing_up/requirements/","title":"Requirements","text":""},{"location":"backing_up/requirements/#disk-space","title":"Disk space","text":"<p>The most critical requirement for a Barman server is the amount of disk space available. You should plan the required disk space based on: - The size of the cluster - Number of WAL files generated per day - Frequency of backups - Backup retention policies</p>"},{"location":"backing_up/requirements/#filesystem","title":"Filesystem","text":"<p>Barman developers regularly test Barman with XFS and ext4. </p>"},{"location":"backing_up/requirements/#using-with-nfs","title":"Using with NFS","text":"<p>Like PostgreSQL, Barman does nothing special for NFS. </p> <p>The following requirements apply for safely using Barman with NFS:</p> <ul> <li>The <code>barman_lock_directory</code> should be on a non-network filesystem.</li> <li>Use version 4 of the NFS protocol.</li> <li>The file system must be mounted using the hard and synchronous options (hard,sync).</li> </ul>"},{"location":"backing_up/rsync_ssh/","title":"Backup with rsync/SSH","text":"<p>Backup over rsync was the only available method before Barman version 2.0.  It's the only backup method that supports the incremental backup feature. </p> <p>To take a backup using rsync, add the following parameters to the Barman server configuration file: <pre><code>backup_method = rsync\nssh_command = ssh postgres@pg\n</code></pre> The <code>backup_method</code> option activates the rsync backup method, and the <code>ssh_command</code> option is used to correctly create an SSH connection from the Barman server to the PostgreSQL server.</p> <p>Important</p> <p>You won't be able to start a backup if WAL is not being correctly archived to Barman, either through the archiver or the <code>streaming_archiver</code>.</p> <p>To check if the server configuration is valid, you can use the <code>barman check</code> command: <pre><code>barman@backup\\$ barman check pg\n</code></pre> To take a backup, use the <code>barman backup</code> command: <pre><code>barman@backup\\$ barman backup pg\n</code></pre></p>"},{"location":"backing_up/streaming_backups/","title":"Streaming Backups","text":"<p>Barman can backup a PostgreSQL server using the streaming connection, relying on <code>pg_basebackup</code>.</p> <p>Important</p> <p>Barman requires that <code>pg_basebackup</code> is installed in the same server. It's recommended to install the last available version of <code>pg_basebackup</code>, as it's backwards-compatible. You can install multiple versions of <code>pg_basebackup</code> on the Barman server and point to the specific version for a server, using the <code>path_prefixoption</code> in the configuration file.</p> <p>To successfully backup your server with the streaming connection, use postgres as your backup method: <pre><code>backup_method = postgres\n</code></pre></p> <p>Warning</p> <p>You won't be able to start a backup if WAL is not being correctly archived to Barman, either through the archiver or the <code>streaming_archiver</code>.</p> <p>To check if the server configuration is valid, use the <code>barman check</code> command: <pre><code>barman@backup\\$ barman check pg\n</code></pre> To start a backup, use the <code>barman backup</code> command: <pre><code>barman@backup\\$ barman backup pg\n</code></pre></p>"},{"location":"commands/barman-cli/","title":"Barman client utilities (<code>barman-cli</code>)","text":"<p>Formerly a separate open-source project, <code>barman-cli</code> has been merged into Barman's core since Barman version 2.8.  It's distributed as an RPM/Debian package. </p> <p><code>barman-cli</code>contains a set of recommended client utilities to be installed alongside the PostgreSQL server:</p> <ul> <li><code>barman-wal-archive</code>: archiving script to be used as <code>archive_command</code>.</li> <li><code>barman-wal-restore</code>: WAL restore script to be used as part of the restore_command recovery option on standby and recovery servers.</li> </ul> <p>For more information on commands, see the specific Barman command documentation pages or the use the <code>--help</code> option.</p>"},{"location":"commands/barman-cli/#installation","title":"Installation","text":"<p>Barman client utilities are normally installed where PostgreSQL is installed.</p> <p>Tip</p> <p>It's recommended to install the <code>barman-cli</code>package on every PostgreSQL server, including primary and standbys.</p> <p>To install the <code>barman-cli</code> package:</p> <p>RedHat/CentOS: (as root) <pre><code>yum install barman-cli\n</code></pre> Debian/Ubuntu:  (as root) <pre><code>apt-get install barman-cli\n</code></pre> For more information on installing repositories, see the \"Installing\" section in the Barman documentation.</p>"},{"location":"commands/using_commands/","title":"Using commands","text":""},{"location":"commands/using_commands/#categories","title":"Categories","text":"<p>Barman has many commands and, for the sake of exposition, we can organize them into categories by scope.</p> <p>General commands: General commands apply to the entirity of a Barman server, that can back up many PostgreSQL servers.</p> <p>Server commands: Server commands, unlike general commands, act only on a specified server. </p> <p>Backup commands: Backup commands work on a backup, which is taken from a certain server.  They work directly on backups already existing in Barman's backup catalog.</p> <p>Cloud commands: Cloud commands are specific to each cloud provider.</p>"},{"location":"commands/using_commands/#requirements","title":"Requirements","text":"<p>To run the general, server, and backup commands:</p> <ul> <li>Install the <code>barman-cli</code> package on your server(s).  For more information, see Barman CLI.</li> </ul> <p>To run the cloud commands:</p> <ul> <li>Install the <code>barman-cli-cloud</code> package on your server(s).  For more information, see Barman CLI Cloud.</li> </ul>"},{"location":"commands/using_commands/#command-options","title":"Command options","text":"<p>The following options can be used with all commands:</p> Argument Description Default Example <code>-h, --help</code> Show the help message and exit <code>\\-v, --version</code> Show the version number and exit <code>-c CONFIG, --config</code> CONFIG Use the specified configuration file. <code>--color {never,always,auto}, --colour</code> Whether to use colors in the output auto <code>-q, --quiet</code> Do not output anything. Useful for cron scripts. <code>-d, --debug</code> Debug output False <code>--log-level {NOTSET,DEBUG,INFO,WARNING,ERROR,CRITICAL}</code> Override the default log level <code>-f {json,console}, --format {json,console}</code> Output format console"},{"location":"commands/backup/check-backup/","title":"check-backup","text":"Command Category Description Synopsis <code>check-backup</code> Server Perform maintenance operations on WAL files and backups <code>barman check-backup</code>"},{"location":"commands/backup/check-backup/#syntax","title":"Syntax","text":"<pre><code>barman check-backup \\&lt;server_name&gt; \\&lt;backup_id&gt;\n</code></pre>"},{"location":"commands/backup/check-backup/#details","title":"Details","text":"<p>Check that all required WAL files for the consistency of a full backup have been correctly archived by Barman with the <code>check-backup</code> command.</p> <p>Important</p> <p>This command is automatically invoked by cron and at the end of a backup operation. This means that, under normal circumstances, you should never need to execute it.</p> <p>If one or more WAL files from the start to the end of the backup haven't been archived yet, Barman will label the backup as WAITING_FOR_WALS. The <code>cron</code> command will continue to check that missing WAL files are archived, then label the backup as DONE.</p> <p>If the first required WAL file is missing at the end of the backup, the backup will be marked as FAILED. You should verify that WAL archiving (whether via streaming or <code>archive_command</code>) is working before executing a backup operation - especially when backing up from a standby server.</p>"},{"location":"commands/backup/check-backup/#supported-versions","title":"Supported versions","text":"<p>The <code>check-backup</code> command is supported for Barman version 2.5 and higher.</p>"},{"location":"commands/backup/show-backup/","title":"show-backup","text":"Command Category Description Synopsis <code>show-backup</code> Backup Show detailed information about a particular backup <code>barman show-backup</code>"},{"location":"commands/backup/show-backup/#syntax","title":"Syntax","text":"<pre><code>barman show-backup \\&lt;server_name&gt; \\&lt;backup_id&gt;\n</code></pre>"},{"location":"commands/backup/show-backup/#details","title":"Details","text":"<p>Show detailed information about a particular backup, identified by the server name and the backup ID. The <code>show-backup</code> command accepts any shortcut to identify backups.</p>"},{"location":"commands/cloud/cloud-backup-delete/","title":"Cloud backup delete","text":"Command Category Description Synopsis <code>cloud-backup-delete</code> Cloud Delete backups stored in the Cloud <code>barman-cloud-backup-delete [*OPTIONS*] *SOURCE_URL* *SERVER_NAME*</code>"},{"location":"commands/cloud/cloud-backup-delete/#supported-cloud-providers","title":"Supported cloud providers","text":"<p><code>cloud-backup-delete</code> is supported for the following cloud providers:</p> <ul> <li>AWS Simple Storage Service (S3)</li> <li>Azure Blob Storage</li> <li>Google Cloud Storage</li> </ul>"},{"location":"commands/cloud/cloud-backup-delete/#details","title":"Details","text":"<p>This script can be used to delete backups previously made with <code>barman-cloud-backup</code>.</p> <p>The target backups can be specified either using the backup ID (as returned by barman-cloud-backup-list) or by retention policy. Retention policies are the same as those for Barman server and work as described in the Barman manual: all backups not required to meet the specified policy will be deleted.</p> <p>When a backup is successfully deleted any unused WALs associated with that backup are removed. WALs are only considered unused if:</p> <ul> <li>There are no older backups than the deleted backup or all older backups are archival backups.</li> <li>The WALs pre-date the <code>begin_wal</code> value of the oldest remaining backup.</li> <li>The WALs are not required by any archival backups present in cloud storage.</li> </ul> <p>Info</p> <p>The deletion of each backup involves three separate delete requests to the cloud provider: </p> <ul> <li>Delete the backup files</li> <li>Delete the backup.info file</li> <li>Delete any associated WALs</li> </ul> <p>If you have a significant number of backups accumulated in cloud storage, deleting by retention policy could result in a large number of delete requests.</p>"},{"location":"commands/cloud/cloud-backup-delete/#usage","title":"Usage","text":"<pre><code>barman-cloud-backup-delete [-V] [--help] [-v \\| -q] [-t]\n[--cloud-provider {aws-s3,azure-blob-storage,google-cloud-storage}]\n[--endpoint-url ENDPOINT_URL]\n[-P AWS_PROFILE] [--profile AWS_PROFILE]\n[--read-timeout READ_TIMEOUT]\n[--azure-credential {azure-cli,managed-identity}\n[-b BACKUP_ID] [-m MINIMUM_REDUNDANCY]\n[-r RETENTION_POLICY] [--dry-run]\n[--batch-size DELETE_BATCH_SIZE]\n[source_url server_name]\n</code></pre>"},{"location":"commands/cloud/cloud-backup-delete/#positional-arguments","title":"Positional arguments","text":"<p>The following positional arguments can be used with the <code>cloud-backup-delete</code> command:</p> Argument Description Default Example <code>source_url</code> URL of the cloud source, such as a bucket in AWS S3. <code>s3://bucket/path/to/folder</code> <code>server_name</code> The name of the server as configured in Barman"},{"location":"commands/cloud/cloud-backup-delete/#optional-arguments","title":"Optional arguments","text":"<p>The following optional arguments can be used with the <code>cloud-backup-delete</code> command:</p> Argument Description Default Example <code>\\--help</code> Show the help message and exit <code>\\-v, --verbose</code> Increase output verbosity (<code>-vv</code> is more than <code>-v</code>) <code>\\-V, --version</code> Show the version number and exit <code>\\-q, --quiet</code> Decrease output verbosity (<code>-qq</code> is less than <code>-q</code>) <code>\\-t, --test</code> Test cloud connectivity and exit <code>\\--cloud-provider {aws-s3,azure-blob-storage,google-cloud-storage}</code> The cloud provider to use as a storage backend <code>\\-b BACKUP_ID, --backup-id BACKUP_ID</code> Backup ID of the backup to be deleted <code>\\-m MINIMUM_REDUNDANCY, --minimum-redundancy MINIMUM_REDUNDANCY</code> The minimum number of backups that should always be available. <code>\\-r RETENTION_POLICY, --retention-policy RETENTION_POLICY</code> If specified, delete all backups eligible for deletion according to the supplied retention policy. Syntax: <code>REDUNDANCY value | RECOVERY WINDOW OF value {DAYS \\|WEEKS \\| MONTHS}</code> <code>\\--dry-run</code> Find the objects which need to be deleted but do not delete them <code>\\--batch-size DELETE_BATCH_SIZE</code> The maximum number of objects to be deleted in a single request to the cloud provider. If unset then the maximum allowed batch size for the specified cloud provider will be used (1000 for aws-s3, 256 for azure-blob-storage and 100 for google-cloud-storage)."},{"location":"commands/cloud/cloud-backup-delete/#extra-options","title":"Extra options","text":"<p>The following extra options can be used with the <code>cloud-backup-delete</code> command for the following cloud providers:</p>"},{"location":"commands/cloud/cloud-backup-delete/#aws-s3","title":"aws-s3","text":"<p>The following extra options can be used with the <code>cloud-backup-delete</code> command for aws-s3:</p> Argument Description Default Example <code>\\--endpoint-url ENDPOINT_URL</code> Override default S3 endpoint URL with the given one <code>\\-P AWS_PROFILE, --aws-profile AWS_PROFILE</code> Profile name (e.g. <code>INI</code> section in the AWS credentials file) <code>\\--profile AWS_PROFILE</code> Profile name (deprecated: replaced by <code>--aws-profile</code>) <code>\\--read-timeout READ_TIMEOUT</code> The time in seconds until a timeout is raised when waiting to read from a connection 60 seconds"},{"location":"commands/cloud/cloud-backup-delete/#azure-blob-storage","title":"azure-blob-storage","text":"<p>The following extra options can be used with the <code>cloud-backup-delete</code> command for azure-blob-storage:</p> Argument Description Default Example <code>\\--azure-credential {azure-cli,managed-identity}, --credential {azure-cli,managed-identity}</code> Optionally specify the type of credential to use when authenticating with Azure. If omitted then Azure Blob Storage credentials will be obtained from the environment and the default Azure authentication flow will be used for authenticating with all other Azure services. If no credentials can be found in the environment then the default Azure authentication flow will also be used for Azure Blob Storage."},{"location":"commands/cloud/cloud-backup-delete/#google-cloud-storage","title":"google-cloud-storage","text":"<p>No extra options can be used with the <code>cloud-backup-delete</code> command for google-cloud-storage.</p>"},{"location":"commands/cloud/cloud-backup-delete/#dependencies","title":"Dependencies","text":"<p>The following dependencies apply to the <code>cloud-backup-delete</code> command:</p> Cloud provider Dependencies aws-s3 boto3 azure-blob-storage azure-storage-blob, azure-identity (optional, if you wish to use <code>DefaultAzureCredential</code>) google-cloud-storage google-cloud-storage"},{"location":"commands/cloud/cloud-backup-delete/#exit-status","title":"Exit status","text":"Exit code Description 0 Success 1 The delete was not successful 2 The connection to the cloud provider failed 3 There was an error in the command input Other non-zero code Failure"},{"location":"commands/cloud/cloud-backup-keep/","title":"Cloud backup keep","text":"Command Category Description Synopsis <code>cloud-backup-keep</code> Cloud Flag backups which should be kept forever <code>barman-cloud-backup-keep [*OPTIONS*] *SOURCE_URL* *SERVER_NAME* *BACKUP_ID*</code>"},{"location":"commands/cloud/cloud-backup-keep/#supported-cloud-providers","title":"Supported cloud providers","text":"<p><code>cloud-backup-keep</code> is supported for the following cloud providers:</p> <ul> <li>AWS Simple Storage Service (S3)</li> <li>Azure Blob Storage</li> <li>Google Cloud Storage</li> </ul>"},{"location":"commands/cloud/cloud-backup-keep/#details","title":"Details","text":"<p>This script can be used to flag backups previously made with <code>barman-cloud-backup</code> as archival backups. Archival backups are kept forever regardless of any retention policies applied.</p>"},{"location":"commands/cloud/cloud-backup-keep/#usage","title":"Usage","text":"<pre><code>barman-cloud-backup-keep [-V] [--help] [-v \\| -q] [-t]\n[--cloud-provider {aws-s3,azure-blob-storage,google-cloud-storage}]\n[--endpoint-url ENDPOINT_URL]\n[-P AWS_PROFILE] [--profile AWS_PROFILE]\n[--read-timeout READ_TIMEOUT]\n[--azure-credential {azure-cli,managed-identity}]\n(-r \\| -s \\| --target {full,standalone})\nsource_url server_name backup_id\n</code></pre>"},{"location":"commands/cloud/cloud-backup-keep/#positional-arguments","title":"Positional arguments","text":"<p>The following positional arguments can be used with the <code>cloud-backup-keep</code> command:</p> Argument Description Default Example <code>source_url</code> URL of the cloud source, such as a bucket in AWS S3. <code>s3://bucket/path/to/folder</code> <code>server_name</code> The name of the server as configured in Barman. <code>backup_id</code> The backup ID of the backup to be kept."},{"location":"commands/cloud/cloud-backup-keep/#optional-arguments","title":"Optional arguments","text":"<p>The following optional arguments can be used with the <code>cloud-backup-keep</code> command:</p> Argument Description Default Example <code>\\--help</code> Show the help message and exit <code>\\-v, --verbose</code> Increase output verbosity (<code>-vv</code> is more than <code>-v</code>) <code>\\-V, --version</code> Show the version number and exit <code>\\-q, --quiet</code> Decrease output verbosity (<code>-qq</code> is less than <code>-q</code>) <code>\\-t, --test</code> Test cloud connectivity and exit <code>\\--cloud-provider {aws-s3,azure-blob-storage,google-cloud-storage}</code> The cloud provider to use as a storage backend <code>\\-r, --release</code> Remove the keep annotation, making the backup eligible for deletion <code>\\-s, --status</code> Print the keep status of the backup <code>\\--target {full,standalone}</code> Specify the recovery target for this backup"},{"location":"commands/cloud/cloud-backup-keep/#extra-options","title":"Extra options","text":"<p>The following extra options can be used with the <code>cloud-backup-keep</code> command for the following cloud providers:</p>"},{"location":"commands/cloud/cloud-backup-keep/#aws-s3","title":"aws-s3","text":"<p>The following extra options can be used with the <code>cloud-backup-keep</code> command for aws-s3:</p> Argument Description Default Example <code>\\--endpoint-url ENDPOINT_URL</code> Override default S3 endpoint URL with the given one <code>\\-P AWS_PROFILE, --aws-profile AWS_PROFILE</code> Profile name (e.g. <code>INI</code> section in the AWS credentials file) <code>\\--profile AWS_PROFILE</code> Profile name (deprecated: replaced by <code>--aws-profile</code>) <code>\\--read-timeout READ_TIMEOUT</code> The time in seconds until a timeout is raised when waiting to read from a connection 60 seconds"},{"location":"commands/cloud/cloud-backup-keep/#azure-blob-storage","title":"azure-blob-storage","text":"<p>The following extra options can be used with the <code>cloud-backup-keep</code> command for azure-blob-storage:</p> Argument Description Default Example <code>\\--azure-credential {azure-cli,managed-identity}, --credential {azure-cli,managed-identity}</code> Optionally specify the type of credential to use when authenticating with Azure. If omitted then Azure Blob Storage credentials will be obtained from the environment and the default Azure authentication flow will be used for authenticating with all other Azure services. If no credentials can be found in the environment then the default Azure authentication flow will also be used for Azure Blob Storage."},{"location":"commands/cloud/cloud-backup-keep/#google-cloud-storage","title":"google-cloud-storage","text":"<p>No extra options can be used with the <code>cloud-backup-keep</code> command for google-cloud-storage.</p>"},{"location":"commands/cloud/cloud-backup-keep/#dependencies","title":"Dependencies","text":"<p>The following dependencies apply to the <code>cloud-backup-keep</code> command:</p> Cloud provider Dependencies aws-s3 boto3 azure-blob-storage azure-storage-blob, azure-identity (optional, if you wish to use <code>DefaultAzureCredential</code>) google-cloud-storage google-cloud-storage"},{"location":"commands/cloud/cloud-backup-keep/#exit-status","title":"Exit status","text":"Exit code Description 0 Success 1 The keep was not successful 2 The connection to the cloud provider failed 3 There was an error in the command input Other non-zero code Failure"},{"location":"commands/cloud/cloud-backup-list/","title":"Cloud backup list","text":"Command Category Description Synopsis <code>cloud-backup-list</code> Cloud List backups stored in the Cloud <code>barman-cloud-backup-list [*OPTIONS*] *SOURCE_URL* *SERVER_NAME*</code>"},{"location":"commands/cloud/cloud-backup-list/#supported-cloud-providers","title":"Supported cloud providers","text":"<p><code>cloud-backup-list</code> is supported for the following cloud providers:</p> <ul> <li>AWS Simple Storage Service (S3)</li> <li>Azure Blob Storage</li> <li>Google Cloud Storage</li> </ul>"},{"location":"commands/cloud/cloud-backup-list/#details","title":"Details","text":"<p>This script can be used to list backups previously made with <code>barman-cloud-backup</code>.</p>"},{"location":"commands/cloud/cloud-backup-list/#usage","title":"Usage","text":"<pre><code>barman-cloud-backup-list [-V] [--help] [-v | -q] [-t]\n[--cloud-provider {aws-s3,azure-blob-storage,google-cloud-storage}]\n[--endpoint-url ENDPOINT_URL]\n[-P AWS_PROFILE] [--profile AWS_PROFILE]\n[--read-timeout READ_TIMEOUT]\n[--azure-credential {azure-cli,managed-identity}]\n[--format FORMAT]\nsource_url server_name\n</code></pre>"},{"location":"commands/cloud/cloud-backup-list/#positional-arguments","title":"Positional arguments","text":"<p>The following positional arguments can be used with the <code>cloud-backup-list</code> command:</p> Argument Description Default Example <code>source_url</code> URL of the cloud source, such as a bucket in AWS S3. <code>s3://bucket/path/to/folder</code> <code>server_name</code> The name of the server as configured in Barman."},{"location":"commands/cloud/cloud-backup-list/#optional-arguments","title":"Optional arguments","text":"<p>The following optional arguments can be used with the <code>cloud-backup-list</code> command:</p> Argument Description Default Example <code>\\--help</code> Show the help message and exit <code>\\-v, --verbose</code> Increase output verbosity (<code>-vv</code> is more than <code>-v</code>) <code>\\-V, --version</code> Show the version number and exit <code>\\-q, --quiet</code> Decrease output verbosity (<code>-qq</code> is less than <code>-q</code>) <code>\\-t, --test</code> Test cloud connectivity and exit <code>--format FORMAT</code> Output format (console or json) console <code>\\--cloud-provider {aws-s3,azure-blob-storage,google-cloud-storage}</code> The cloud provider to use as a storage backend"},{"location":"commands/cloud/cloud-backup-list/#extra-options","title":"Extra options","text":"<p>The following extra options can be used with the <code>cloud-backup-list</code> command for the following cloud providers:</p>"},{"location":"commands/cloud/cloud-backup-list/#aws-s3","title":"aws-s3","text":"<p>The following extra options can be used with the <code>cloud-backup-list</code> command for aws-s3:</p> Argument Description Default Example <code>\\--endpoint-url ENDPOINT_URL</code> Override default S3 endpoint URL with the given one <code>\\-P AWS_PROFILE, --aws-profile AWS_PROFILE</code> Profile name (e.g. <code>INI</code> section in the AWS credentials file) <code>\\--profile AWS_PROFILE</code> Profile name (deprecated: replaced by <code>--aws-profile</code>) <code>\\--read-timeout READ_TIMEOUT</code> The time in seconds until a timeout is raised when waiting to read from a connection 60 seconds"},{"location":"commands/cloud/cloud-backup-list/#azure-blob-storage","title":"azure-blob-storage","text":"<p>The following extra options can be used with the <code>cloud-backup-list</code> command for azure-blob-storage:</p> Argument Description Default Example <code>\\--azure-credential {azure-cli,managed-identity}, --credential {azure-cli,managed-identity}</code> Optionally specify the type of credential to use when authenticating with Azure. If omitted then Azure Blob Storage credentials will be obtained from the environment and the default Azure authentication flow will be used for authenticating with all other Azure services. If no credentials can be found in the environment then the default Azure authentication flow will also be used for Azure Blob Storage."},{"location":"commands/cloud/cloud-backup-list/#google-cloud-storage","title":"google-cloud-storage","text":"<p>No extra options can be used with the <code>cloud-backup-list</code> command for google-cloud-storage.</p>"},{"location":"commands/cloud/cloud-backup-list/#dependencies","title":"Dependencies","text":"<p>The following dependencies apply to the <code>cloud-backup-list</code> command:</p> Cloud provider Dependencies aws-s3 boto3 azure-blob-storage azure-storage-blob, azure-identity (optional, if you wish to use <code>DefaultAzureCredential</code>) google-cloud-storage google-cloud-storage"},{"location":"commands/cloud/cloud-backup-list/#exit-status","title":"Exit status","text":"Exit code Description 0 Success 1 The list was not successful 2 The connection to the cloud provider failed 3 There was an error in the command input Other non-zero code Failure"},{"location":"commands/cloud/cloud-backup-show/","title":"Cloud backup show","text":"Command Category Description Synopsis <code>cloud-backup-show</code> Cloud Show metadata for a backup stored in the Cloud <code>barman-cloud-backup-show [*OPTIONS*] *SOURCE_URL* *SERVER_NAME* *BACKUP_ID*</code>"},{"location":"commands/cloud/cloud-backup-show/#supported-cloud-providers","title":"Supported cloud providers","text":"<p><code>cloud-backup-show</code> is supported for the following cloud providers:</p> <ul> <li>AWS Simple Storage Service (S3)</li> <li>Azure Blob Storage</li> <li>Google Cloud Storage</li> </ul>"},{"location":"commands/cloud/cloud-backup-show/#details","title":"Details","text":"<p>This script can be used to display metadata for backups previously made with <code>barman-cloud-backup</code>.</p>"},{"location":"commands/cloud/cloud-backup-show/#usage","title":"Usage","text":"<pre><code>barman-cloud-backup-show [-V] [--help] [-v | -q] [-t]\n[--cloud-provider {aws-s3,azure-blob-storage,google-cloud-storage}]\n[--endpoint-url ENDPOINT_URL]\n[-P AWS_PROFILE] [--profile AWS_PROFILE]\n[--read-timeout READ_TIMEOUT]\n[--azure-credential {azure-cli,managed-identity}]\n[--format FORMAT]\nsource_url server_name backup_id\n</code></pre>"},{"location":"commands/cloud/cloud-backup-show/#positional-arguments","title":"Positional arguments","text":"<p>The following positional arguments can be used with the <code>cloud-backup-show</code> command:</p> Argument Description Default Example <code>source_url</code> URL of the cloud source, such as a bucket in AWS S3. <code>s3://bucket/path/to/folder</code> <code>server_name</code> The name of the server as configured in Barman. <code>backup_id</code> The backup id"},{"location":"commands/cloud/cloud-backup-show/#optional-arguments","title":"Optional arguments","text":"<p>The following optional arguments can be used with the <code>cloud-backup-show</code> command:</p> Argument Description Default Example <code>\\--help</code> Show the help message and exit <code>\\-v, --verbose</code> Increase output verbosity (<code>-vv</code> is more than <code>-v</code>) <code>\\-V, --version</code> Show the version number and exit <code>\\-q, --quiet</code> Decrease output verbosity (<code>-qq</code> is less than <code>-q</code>) <code>\\-t, --test</code> Test cloud connectivity and exit <code>--format FORMAT</code> Output format (console or json) console <code>\\--cloud-provider {aws-s3,azure-blob-storage,google-cloud-storage}</code> The cloud provider to use as a storage backend"},{"location":"commands/cloud/cloud-backup-show/#extra-options","title":"Extra options","text":"<p>The following extra options can be used with the <code>cloud-backup-show</code> command for the following cloud providers:</p>"},{"location":"commands/cloud/cloud-backup-show/#aws-s3","title":"aws-s3","text":"<p>No extra options can be used with the <code>cloud-backup-show</code> command for aws-s3.</p>"},{"location":"commands/cloud/cloud-backup-show/#azure-blob-storage","title":"azure-blob-storage","text":"<p>The following extra options can be used with the <code>cloud-backup-show</code> command for azure-blob-storage:</p> Argument Description Default Example <code>\\--azure-credential {azure-cli,managed-identity}, --credential {azure-cli,managed-identity}</code> Optionally specify the type of credential to use when authenticating with Azure. If omitted then Azure Blob Storage credentials will be obtained from the environment and the default Azure authentication flow will be used for authenticating with all other Azure services. If no credentials can be found in the environment then the default Azure authentication flow will also be used for Azure Blob Storage."},{"location":"commands/cloud/cloud-backup-show/#google-cloud-storage","title":"google-cloud-storage","text":"<p>No extra options can be used with the <code>cloud-backup-show</code> command for google-cloud-storage.</p>"},{"location":"commands/cloud/cloud-backup-show/#dependencies","title":"Dependencies","text":"<p>The following dependencies apply to the <code>cloud-backup-show</code> command:</p> Cloud provider Dependencies aws-s3 boto3 azure-blob-storage azure-storage-blob, azure-identity (optional, if you wish to use <code>DefaultAzureCredential</code>) google-cloud-storage google-cloud-storage"},{"location":"commands/cloud/cloud-backup-show/#exit-status","title":"Exit status","text":"Exit code Description 0 Success 1 The show was not successful 2 The connection to the cloud provider failed 3 There was an error in the command input Other non-zero code Failure"},{"location":"commands/cloud/cloud-backup/","title":"Cloud backup","text":"Command Category Description Synopsis <code>cloud-backup</code> Cloud Perform a backup of a local PostgreSQL instance and ship the resulting tarball(s) to the cloud. <code>barman-cloud-backup [*OPTIONS*] *DESTINATION_URL* *SERVER_NAME*</code>"},{"location":"commands/cloud/cloud-backup/#supported-cloud-providers","title":"Supported cloud providers","text":"<p><code>cloud-backup</code> is supported for the following cloud providers:</p> <ul> <li>AWS Simple Storage Service (S3)</li> <li>Azure Blob Storage</li> <li>Google Cloud Storage</li> </ul>"},{"location":"commands/cloud/cloud-backup/#requirements-and-limitations","title":"Requirements and limitations","text":"<p>The following requirements and limitations apply to the <code>barman-cloud-backup</code> command:</p> <ul> <li>It requires read access to PGDATA and tablespaces (normally run as postgres user). </li> <li>It can also be used as a hook script on a Barman server, in which case it requires read access to the directory where Barman backups are stored.</li> <li>If the arguments prefixed with <code>--snapshot-</code> are used, and snapshots are supported for the selected cloud provider, then the backup will be performed using snapshots of the disks specified using <code>--snapshot-disk arguments</code>. The backup label and backup metadata will be uploaded to the cloud object store.</li> </ul> <p>Warning</p> <p>The cloud upload process may fail if any file with a size greater than the configured <code>--max-archive-size</code> is present either in the data directory or in any tablespaces. However, PostgreSQL creates files with a maximum size of 1GB, and that size is always allowed, regardless of the <code>max-archive-size</code> parameter.</p>"},{"location":"commands/cloud/cloud-backup/#usage","title":"Usage","text":"<pre><code>barman-cloud-backup [-V] [--help] [-v \\| -q] [-t]\n[--cloud-provider {aws-s3,azure-blob-storage,google-cloud-storage}]\n[--endpoint-url ENDPOINT_URL] [-P AWS_PROFILE]\n[--profile AWS_PROFILE]\n[--read-timeout READ_TIMEOUT]\n[--azure-credential {azure-cli,managed-identity}]\n[-z \\| -j \\| --snappy] [-h HOST] [-p PORT] [-U USER]\n[--immediate-checkpoint] [-J JOBS]\n[-S MAX_ARCHIVE_SIZE]\n[--min-chunk-size MIN_CHUNK_SIZE]\n[--max-bandwidth MAX_BANDWIDTH] [-d DBNAME]\n[-n BACKUP_NAME]\n[--snapshot-instance SNAPSHOT_INSTANCE]\n[--snapshot-disk NAME] [--snapshot-zone GCP_ZONE]\n[--snapshot-gcp-project GCP_PROJECT]\n[--gcp-project GCP_PROJECT]\n[--kms-key-name KMS_KEY_NAME] [--gcp-zone GCP_ZONE]\n[--tags [TAGS [TAGS ...]]] [-e {AES256,aws:kms}]\n[--sse-kms-key-id SSE_KMS_KEY_ID]\n[--aws-region AWS_REGION]\n[--encryption-scope ENCRYPTION_SCOPE]\n[--azure-subscription-id AZURE_SUBSCRIPTION_ID]\n[--azure-resource-group AZURE_RESOURCE_GROUP]\n</code></pre>"},{"location":"commands/cloud/cloud-backup/#positional-arguments","title":"Positional arguments","text":"<p>The following positional arguments can be used with the <code>cloud-backup</code> command:</p> Argument Description Default Example <code>destination_url</code> URL of the cloud destination, such as a bucket in AWS S3. <code>s3://bucket/path/to/folder</code> <code>destination_url server_name</code> <code>server_name</code> The name of the server as configured in Barman"},{"location":"commands/cloud/cloud-backup/#optional-arguments","title":"Optional arguments","text":"<p>The following optional arguments can be used with the <code>cloud-backup</code> command:</p> Argument Description Default Example <code>\\--help</code> Show the help message and exit <code>\\-v, --verbose</code> Increase output verbosity (<code>-vv</code> is more than <code>-v</code>) <code>\\-V, --version</code> Show the version number and exit <code>\\-q, --quiet</code> Decrease output verbosity (<code>-qq</code> is less than <code>-q</code>) <code>\\-t, --test</code> Test cloud connectivity and exit <code>\\--cloud-provider {aws-s3,azure-blob-storage,google-cloud-storage}</code> The cloud provider to use as a storage backend <code>\\-z, --gzip</code> gzip-compress the backup while uploading to the cloud <code>\\-j, --bzip2</code> bzip2-compress the backup while uploading to the cloud <code>\\--snappy</code> snappy-compress the backup while uploading to the cloud <code>\\-h HOST, --host HOST</code> host or Unix socket for PostgreSQL connection libpq settings <code>-p PORT, --port PORT</code> port for PostgreSQL connection libpq settings <code>\\-U USER, --user USER</code> user name for PostgreSQL connection libpq settings <code>\\--immediate-checkpoint</code> Forces the initial checkpoint to be done as quickly as possible <code>\\-J JOBS, --jobs JOBS</code> Number of subprocesses to upload data to cloud storage 2 <code>\\-S MAX_ARCHIVE_SIZE, --max-archive-size MAX_ARCHIVE_SIZE</code> Maximum size of an archive when uploading to cloud storage 100GB <code>\\--min-chunk-size MIN_CHUNK_SIZE</code> Minimum size of an individual chunk when uploading to cloud storage 5MB for aws-s3, 64KB for azure-blob-storage, not applicable for google-cloud-storage <code>\\--max-bandwidth MAX_BANDWIDTH</code> The maximum amount of data to be uploaded per second when backing up to either AWS S3 or Azure Blob Storage no limit <code>\\-d DBNAME, --dbname DBNAME</code> Database name or conninfo string for Postgres connection postgres <code>\\-n BACKUP_NAME, --name BACKUP_NAME</code> A name which can be used to reference this backup in commands such as <code>barman-cloud-restore</code> and <code>barman-cloud-backup-delete</code> <code>\\--snapshot-instance SNAPSHOT_INSTANCE</code> Instance where the disks to be backed up as snapshots are attached <code>\\--snapshot-disk NAME</code> Name of a disk from which snapshots should be taken <code>\\--snapshot-zone GCP_ZONE</code> Zone of the disks from which snapshots should be taken (deprecated: replaced by <code>--gcp-zone</code>) <code>\\--tags [TAGS [TAGS ...]]</code> Tags to be added to all uploaded files in cloud storage"},{"location":"commands/cloud/cloud-backup/#extra-options","title":"Extra options","text":"<p>The following extra options can be used with the <code>cloud-backup</code> command for the following cloud providers:</p>"},{"location":"commands/cloud/cloud-backup/#aws-s3","title":"aws-s3","text":"<p>The following extra options can be used with the <code>cloud-backup</code> command for aws-s3:</p> Argument Description Default Example <code>\\--endpoint-url ENDPOINT_URL</code> Override default S3 endpoint URL with the given one <code>\\-P AWS_PROFILE, --aws-profile AWS_PROFILE</code> profile name (e.g. <code>INI</code> section in the AWS credentials file) <code>\\--profile AWS_PROFILE</code> profile name (deprecated: replaced by <code>--aws-profile</code>) <code>\\--read-timeout READ_TIMEOUT</code> the time in seconds until a timeout is raised when waiting to read from a connection 60 seconds <code>\\-e {AES256,aws:kms}, --encryption {AES256,aws:kms}</code> The encryption algorithm used when storing the uploaded data in S3. Allowed values: 'AES256'|'aws:kms'. <code>\\--sse-kms-key-id SSE_KMS_KEY_ID</code> The AWS KMS key ID that should be used for encrypting the uploaded data in S3. Can be specified using the key ID on its own or using the full ARN for the key. Only allowed if <code>\\</code>-e/--encryption` is set to `aws:kms`. <code>\\--aws-region AWS_REGION</code> The name of the AWS region containing the EC2 VM and storage volumes defined by the <code>--snapshot-instance</code> and <code>--snapshot-disk</code> arguments."},{"location":"commands/cloud/cloud-backup/#azure-blob-storage","title":"azure-blob-storage","text":"<p>The following extra options can be used with the <code>cloud-backup</code> command for azure-blob-storage:</p> Argument Description Default Example <code>\\--azure-credential {azure-cli,managed-identity}, --credential {azure-cli,managed-identity}</code> Optionally specify the type of credential to use when authenticating with Azure. If omitted then Azure Blob Storage credentials will be obtained from the environment and the default Azure authentication flow will be used for authenticating with all other Azure services. If no credentials can be found in the environment then the default Azure authentication flow will also be used for Azure Blob Storage. <code>\\--encryption-scope ENCRYPTION_SCOPE</code> The name of an encryption scope defined in the Azure Blob Storage service which is to be used to encrypt the data in Azure <code>\\--azure-subscription-id AZURE_SUBSCRIPTION_ID</code> The ID of the Azure subscription which owns the instance and storage volumes defined by the <code>\\--snapshot-instance</code> and <code>--snapshot-disk</code> arguments. <code>\\--azure-resource-group AZURE_RESOURCE_GROUP</code> The name of the Azure resource group to which the compute instance and disks defined by the <code>--snapshot-instance</code> and <code>--snapshot-disk</code> arguments belong."},{"location":"commands/cloud/cloud-backup/#google-cloud-storage","title":"google-cloud-storage","text":"<p>The following extra options can be used with the <code>cloud-backup</code> command for google-cloud-storage:</p> Argument Description Default Example <code>\\--snapshot-gcp-project GCP_PROJECT</code> GCP project under which disk snapshots should be stored (deprecated: replaced by <code>--gcp-project</code>) <code>\\--gcp-project GCP_PROJECT</code> GCP project under which disk snapshots should be stored <code>\\--kms-key-name KMS_KEY_NAME</code> The name of the GCP KMS key which should be used for encrypting the uploaded data in GCS <code>\\--gcp-zone GCP_ZONE</code> Zone of the disks from which snapshots should be taken"},{"location":"commands/cloud/cloud-backup/#dependencies","title":"Dependencies","text":"<p>The following dependencies apply to the <code>cloud-backup</code> command:</p> Cloud provider Dependencies aws-s3 boto3 azure-blob-storage azure-storage-blob, azure-identity (optional, if you wish to use <code>DefaultAzureCredential</code>) google-cloud-storage * google-cloud-storage google-cloud-storage (with snapshot backups) grpcio, google-cloud-compute"},{"location":"commands/cloud/cloud-backup/#exit-status","title":"Exit status","text":"Exit code Description 0 Success 1 The backup was not successful 2 The connection to the cloud provider failed 3 There was an error in the command input Other non-zero code Failure"},{"location":"commands/cloud/cloud-backup/#additional-information","title":"Additional information","text":"<p>This script can be used in conjunction with a post_backup_script or post_backup_retry_script to relay barman backups to cloud storage as follows: <pre><code>post_backup_retry_script = 'barman-cloud-backup [\\*OPTIONS\\*] \\*DESTINATION_URL\\* \\${BARMAN_SERVER}'\n</code></pre> When running as a hook script, <code>barman-cloud-backup</code> will read the location of the backup directory and the backup ID from <code>BACKUP_DIR</code> and <code>BACKUP_ID</code> environment variables set by barman.</p>"},{"location":"commands/cloud/cloud-check-wal-archive/","title":"Cloud check-wal-archive","text":"Command Category Description Synopsis <code>cloud-check-wal-archive</code> Cloud Check a WAL archive destination for a new PostgreSQL cluster <code>barman-cloud-check-wal-archive [*OPTIONS*] *SOURCE_URL* *SERVER_NAME*</code>"},{"location":"commands/cloud/cloud-check-wal-archive/#supported-cloud-providers","title":"Supported cloud providers","text":"<p><code>cloud-check-wal-archive</code> is supported for the following cloud providers:</p> <ul> <li>AWS Simple Storage Service (S3)</li> <li>Azure Blob Storage</li> <li>Google Cloud Storage</li> </ul>"},{"location":"commands/cloud/cloud-check-wal-archive/#details","title":"Details","text":"<p>Check that the WAL archive destination for SERVER_NAME is safe to use for a new PostgreSQL cluster. With no optional arguments (the default), this check will pass if the WAL archive is empty or if the target bucket cannot be found. All other conditions will result in failure.</p>"},{"location":"commands/cloud/cloud-check-wal-archive/#usage","title":"Usage","text":"<pre><code>barman-cloud-check-wal-archive [-V] [--help] [-v | -q] [-t]\n[--cloud-provider {aws-s3,azure-blob-storage,google-cloud-storage}]\n[--endpoint-url ENDPOINT_URL]\n[-P AWS_PROFILE] [--profile AWS_PROFILE]\n[--read-timeout READ_TIMEOUT]\n[--azure-credential {azure-cli,managed-identity}]\n[--timeline TIMELINE]\ndestination_url server_name\n</code></pre>"},{"location":"commands/cloud/cloud-check-wal-archive/#positional-arguments","title":"Positional arguments","text":"<p>The following positional arguments can be used with the <code>cloud-backup-check-wal-archive</code> command:</p> Argument Description Default Example <code>source_url</code> URL of the cloud source, such as a bucket in AWS S3. <code>s3://bucket/path/to/folder</code> <code>server_name</code> The name of the server as configured in Barman."},{"location":"commands/cloud/cloud-check-wal-archive/#optional-arguments","title":"Optional arguments","text":"<p>The following optional arguments can be used with the <code>cloud-backup-check-wal-archive</code> command:</p> Argument Description Default Example <code>\\--help</code> Show the help message and exit <code>\\-v, --verbose</code> Increase output verbosity (<code>-vv</code> is more than <code>-v</code>) <code>\\-V, --version</code> Show the version number and exit <code>\\-q, --quiet</code> Decrease output verbosity (<code>-qq</code> is less than <code>-q</code>) <code>\\-t, --test</code> Test cloud connectivity and exit <code>\\--timeline TIMELINE</code> The earliest timeline whose WALs should cause the check to fail <code>\\--cloud-provider {aws-s3,azure-blob-storage,google-cloud-storage}</code> The cloud provider to use as a storage backend"},{"location":"commands/cloud/cloud-check-wal-archive/#extra-options","title":"Extra options","text":"<p>The following extra options can be used with the <code>cloud-check-wal-archive</code> command for the following cloud providers:</p>"},{"location":"commands/cloud/cloud-check-wal-archive/#aws-s3","title":"aws-s3","text":"<p>The following extra options can be used with the <code>cloud-check-wal-archive</code> command for aws-s3:</p> Argument Description Default Example <code>\\--endpoint-url ENDPOINT_URL</code> Override default S3 endpoint URL with the given one <code>\\-P AWS_PROFILE, --aws-profile AWS_PROFILE</code> Profile name (e.g. <code>INI</code> section in the AWS credentials file) <code>\\--profile AWS_PROFILE</code> Profile name (deprecated: replaced by <code>--aws-profile</code>) <code>\\--read-timeout READ_TIMEOUT</code> The time in seconds until a timeout is raised when waiting to read from a connection 60 seconds"},{"location":"commands/cloud/cloud-check-wal-archive/#azure-blob-storage","title":"azure-blob-storage","text":"<p>The following extra options can be used with the <code>cloud-check-wal-archive</code> command for azure-blob-storage:</p> Argument Description Default Example <code>\\--azure-credential {azure-cli,managed-identity}, --credential {azure-cli,managed-identity}</code> Optionally specify the type of credential to use when authenticating with Azure. If omitted then Azure Blob Storage credentials will be obtained from the environment and the default Azure authentication flow will be used for authenticating with all other Azure services. If no credentials can be found in the environment then the default Azure authentication flow will also be used for Azure Blob Storage."},{"location":"commands/cloud/cloud-check-wal-archive/#google-cloud-storage","title":"google-cloud-storage","text":"<p>No extra options can be used with the <code>cloud-check-wal-archive</code> command for google-cloud-storage.</p>"},{"location":"commands/cloud/cloud-check-wal-archive/#dependencies","title":"Dependencies","text":"<p>The following dependencies apply to the <code>cloud-check-wal-archive</code> command:</p> Cloud provider Dependencies aws-s3 boto3 azure-blob-storage azure-storage-blob, azure-identity (optional, if you wish to use <code>DefaultAzureCredential</code>) google-cloud-storage google-cloud-storage"},{"location":"commands/cloud/cloud-check-wal-archive/#exit-status","title":"Exit status","text":"Exit code Description 0 Success 1 The check-wal-archive was not successful 2 The connection to the cloud provider failed 3 There was an error in the command input Other non-zero code Failure"},{"location":"commands/cloud/cloud-restore/","title":"Cloud restore","text":"Command Category Description Synopsis <code>cloud-restore</code> Cloud Restore a PostgreSQL backup from the Cloud. <code>barman-cloud-restore [*OPTIONS*] *SOURCE_URL* *SERVER_NAME* *BACKUP_ID* *RECOVERY_DIR*</code>"},{"location":"commands/cloud/cloud-restore/#supported-cloud-providers","title":"Supported cloud providers","text":"<p><code>cloud-restore</code> is supported for the following cloud providers:</p> <ul> <li>AWS Simple Storage Service (S3)</li> <li>Azure Blob Storage</li> <li>Google Cloud Storage</li> </ul>"},{"location":"commands/cloud/cloud-restore/#details","title":"Details","text":"<p>This script can be used to download a backup previously made with <code>barman-cloud-backup</code>.  It can also be used to prepare for recovery from a snapshot backup by checking the attached disks were cloned from the correct snapshots and downloading the backup label from object storage. </p>"},{"location":"commands/cloud/cloud-restore/#usage","title":"Usage","text":"<pre><code>barman-cloud-restore [-V] [--help] [-v | -q] [-t]\n[--cloud-provider {aws-s3,azure-blob-storage,google-cloud-storage}]\n[--endpoint-url ENDPOINT_URL] [-P AWS_PROFILE]\n[--profile AWS_PROFILE]\n[--read-timeout READ_TIMEOUT]\n[--azure-credential {azure-cli,managed-identity}]\n[--tablespace NAME:LOCATION]\n[--snapshot-recovery-instance SNAPSHOT_RECOVERY_INSTANCE]\n[--snapshot-recovery-zone GCP_ZONE]\n[--aws-region AWS_REGION] [--gcp-zone GCP_ZONE]\n[--azure-resource-group AZURE_RESOURCE_GROUP]\nsource_url server_name backup_id recovery_dir\n</code></pre>"},{"location":"commands/cloud/cloud-restore/#positional-arguments","title":"Positional arguments","text":"<p>The following positional arguments can be used with the <code>cloud-restore</code> command:</p> Argument Description Default Example <code>source_url</code> URL of the cloud source, such as a bucket in AWS S3. <code>s3://bucket/path/to/folder</code> <code>server_name</code> The name of the server as configured in Barman <code>backup_id</code> The backup id <code>recovery_dir</code> The path to a directory for recovery"},{"location":"commands/cloud/cloud-restore/#optional-arguments","title":"Optional arguments","text":"<p>The following optional arguments can be used with the <code>cloud-restore</code> command:</p> Argument Description Default Example <code>\\--help</code> Show the help message and exit <code>\\-v, --verbose</code> Increase output verbosity (<code>-vv</code> is more than <code>-v</code>) <code>\\-V, --version</code> Show the version number and exit <code>\\-q, --quiet</code> Decrease output verbosity (<code>-qq</code> is less than <code>-q</code>) <code>\\-t, --test</code> Test cloud connectivity and exit <code>\\--cloud-provider {aws-s3,azure-blob-storage,google-cloud-storage}</code> The cloud provider to use as a storage backend <code>\\--tablespace NAME:LOCATION</code> Tablespace relocation rule <code>\\--snapshot-recovery-instance SNAPSHOT_RECOVERY_INSTANCE</code> Instance where the disks recovered from the snapshots are attached <code>\\--snapshot-recovery-zone GCP_ZONE</code> Zone containing the instance and disks for the snapshot recovery (deprecated: replaced by <code>--gcp-zone</code>)"},{"location":"commands/cloud/cloud-restore/#extra-options","title":"Extra options","text":"<p>The following extra options can be used with the <code>cloud-restore</code> command for the following cloud providers:</p>"},{"location":"commands/cloud/cloud-restore/#aws-s3","title":"aws-s3","text":"<p>The following extra options can be used with the <code>cloud-restore</code> command for aws-s3:</p> Argument Description Default Example <code>\\--endpoint-url ENDPOINT_URL</code> Override default S3 endpoint URL with the given one <code>\\-P AWS_PROFILE, --aws-profile AWS_PROFILE</code> profile name (e.g. <code>INI</code> section in the AWS credentials file) <code>\\--profile AWS_PROFILE</code> profile name (deprecated: replaced by <code>--aws-profile</code>) <code>\\--read-timeout READ_TIMEOUT</code> the time in seconds until a timeout is raised when waiting to read from a connection 60 seconds <code>\\--aws-region AWS_REGION</code> The name of the AWS region containing the EC2 VM and storage volumes defined by the <code>--snapshot-instance</code> and <code>--snapshot-disk</code> arguments."},{"location":"commands/cloud/cloud-restore/#azure-blob-storage","title":"azure-blob-storage","text":"<p>The following extra options can be used with the <code>cloud-restore</code> command for azure-blob-storage:</p> Argument Description Default Example <code>\\--azure-credential {azure-cli,managed-identity}, --credential {azure-cli,managed-identity}</code> Optionally specify the type of credential to use when authenticating with Azure. If omitted then Azure Blob Storage credentials will be obtained from the environment and the default Azure authentication flow will be used for authenticating with all other Azure services. If no credentials can be found in the environment then the default Azure authentication flow will also be used for Azure Blob Storage. <code>\\--azure-resource-group AZURE_RESOURCE_GROUP</code> The name of the Azure resource group to which the compute instance and disks defined by the <code>--snapshot-instance</code> and <code>--snapshot-disk</code> arguments belong."},{"location":"commands/cloud/cloud-restore/#google-cloud-storage","title":"google-cloud-storage","text":"<p>The following extra options can be used with the <code>cloud-restore</code> command for google-cloud-storage:</p> Argument Description Default Example <code>\\--gcp-zone GCP_ZONE</code> Zone containing the instance and disks for the snapshot recovery"},{"location":"commands/cloud/cloud-restore/#dependencies","title":"Dependencies","text":"<p>The following dependencies apply to the <code>cloud-restore</code> command:</p> Cloud provider Dependencies aws-s3 boto3 azure-blob-storage azure-storage-blob, azure-identity (optional, if you wish to use <code>DefaultAzureCredential</code>) google-cloud-storage * google-cloud-storage google-cloud-storage (with snapshot backups) grpcio, google-cloud-compute"},{"location":"commands/cloud/cloud-restore/#exit-status","title":"Exit status","text":"Exit code Description 0 Success 1 The restore was not successful 2 The connection to the cloud provider failed 3 There was an error in the command input Other non-zero code Failure"},{"location":"commands/cloud/cloud-wal-archive/","title":"Cloud wal-archive","text":"Command Category Description Synopsis <code>cloud-wal-archive</code> Cloud Archive PostgreSQL WAL files in the Cloud using <code>archive_command</code> <code>barman-cloud-wal-archive [*OPTIONS*] *DESTINATION_URL* *SERVER_NAME* *WAL_PATH*</code>"},{"location":"commands/cloud/cloud-wal-archive/#supported-cloud-providers","title":"Supported cloud providers","text":"<p><code>cloud-wal-archive</code> is supported for the following cloud providers:</p> <ul> <li>AWS Simple Storage Service (S3)</li> <li>Azure Blob Storage</li> <li>Google Cloud Storage</li> </ul>"},{"location":"commands/cloud/cloud-wal-archive/#details","title":"Details","text":"<p>This script can be used in the <code>archive_command</code> of a PostgreSQL server to ship WAL files to the Cloud.</p> <p>Note</p> <p>If you're running python 2 or older unsupported versions of python 3, then avoid the compression options <code>--gzip</code> or <code>--bzip2</code>.  <code>barman-cloud-wal-restore</code> isn't able to restore gzip-compressed WALs on python versions under 3.2 or bzip2-compressed WALs on python versions under 3.3.</p>"},{"location":"commands/cloud/cloud-wal-archive/#usage","title":"Usage","text":"<pre><code>barman-cloud-wal-archive [-V] [--help] [-v | -q] [-t]\n[--cloud-provider {aws-s3,azure-blob-storage,google-cloud-storage}]\n[--endpoint-url ENDPOINT_URL] [-P AWS_PROFILE]\n[--profile AWS_PROFILE]\n[--read-timeout READ_TIMEOUT]\n[--azure-credential {azure-cli,managed-identity}]\n[-z | -j | --snappy]\n[--tags [TAGS [TAGS ...]]]\n[--history-tags [HISTORY_TAGS [HISTORY_TAGS ...]]]\n[--kms-key-name KMS_KEY_NAME] [-e ENCRYPTION]\n[--sse-kms-key-id SSE_KMS_KEY_ID]\n[--encryption-scope ENCRYPTION_SCOPE]\n[--max-block-size MAX_BLOCK_SIZE]\n[--max-concurrency MAX_CONCURRENCY]\n[--max-single-put-size MAX_SINGLE_PUT_SIZE]\ndestination_url server_name [wal_path]\n</code></pre>"},{"location":"commands/cloud/cloud-wal-archive/#positional-arguments","title":"Positional arguments","text":"<p>The following positional arguments can be used with the <code>cloud-wal-archive</code> command:</p> Argument Description Default Example <code>destination_url</code> URL of the cloud destination, such as a bucket in AWS S3. <code>s3://bucket/path/to/folder</code> <code>server_name</code> The name of the server as configured in Barman. <code>wal_path</code> The value of the <code>%p</code> keyword (according to <code>archive_command</code>)."},{"location":"commands/cloud/cloud-wal-archive/#optional-arguments","title":"Optional arguments","text":"<p>The following optional arguments can be used with the <code>cloud-wal-archive</code> command:</p> Argument Description Default Example <code>\\--help</code> Show the help message and exit <code>\\-v, --verbose</code> Increase output verbosity (<code>-vv</code> is more than <code>-v</code>) <code>\\-V, --version</code> Show the version number and exit <code>\\-q, --quiet</code> Decrease output verbosity (<code>-qq</code> is less than <code>-q</code>) <code>\\-t, --test</code> Test cloud connectivity and exit <code>\\--cloud-provider {aws-s3,azure-blob-storage,google-cloud-storage}</code> The cloud provider to use as a storage backend <code>-z, --gzip</code> gzip-compress the WAL while uploading to the cloud (should not be used with python &lt; 3.2) <code>-j, --bzip2</code> bzip2-compress the WAL while uploading to the cloud (should not be used with python &lt; 3.3) <code>--snappy</code> snappy-compress the WAL while uploading to the cloud (requires optional python-snappy library) <code>--tags [TAGS [TAGS ...]]</code> Tags to be added to archived WAL files in cloud storage <code>--history-tags [HISTORY_TAGS [HISTORY_TAGS ...]]</code> Tags to be added to archived history files in cloud storage"},{"location":"commands/cloud/cloud-wal-archive/#extra-options","title":"Extra options","text":"<p>The following extra options can be used with the <code>cloud-wal-archive</code> command for the following cloud providers:</p>"},{"location":"commands/cloud/cloud-wal-archive/#aws-s3","title":"aws-s3","text":"<p>The following extra options can be used with the <code>cloud-wal-archive</code> command for aws-s3:</p> Argument Description Default Example <code>\\--endpoint-url ENDPOINT_URL</code> Override default S3 endpoint URL with the given one <code>\\-P AWS_PROFILE, --aws-profile AWS_PROFILE</code> Profile name (e.g. <code>INI</code> section in the AWS credentials file) <code>\\--profile AWS_PROFILE</code> Profile name (deprecated: replaced by <code>--aws-profile</code>) <code>\\--read-timeout READ_TIMEOUT</code> The time in seconds until a timeout is raised when waiting to read from a connection 60 seconds <code>\\-e {AES256,aws:kms}, --encryption {AES256,aws:kms}</code> The encryption algorithm used when storing the uploaded data in S3. Allowed values: 'AES256'|'aws:kms'. <code>\\--sse-kms-key-id SSE_KMS_KEY_ID</code> The AWS KMS key ID that should be used for encrypting the uploaded data in S3. Can be specified using the key ID on its own or using the full ARN for the key. Only allowed if <code>\\</code>-e/--encryption` is set to `aws:kms`."},{"location":"commands/cloud/cloud-wal-archive/#azure-blob-storage","title":"azure-blob-storage","text":"<p>The following extra options can be used with the <code>cloud-wal-archive</code> command for azure-blob-storage:</p> Argument Description Default Example <code>\\--azure-credential {azure-cli,managed-identity}, --credential {azure-cli,managed-identity}</code> Optionally specify the type of credential to use when authenticating with Azure. If omitted then Azure Blob Storage credentials will be obtained from the environment and the default Azure authentication flow will be used for authenticating with all other Azure services. If no credentials can be found in the environment then the default Azure authentication flow will also be used for Azure Blob Storage. <code>\\--encryption-scope ENCRYPTION_SCOPE</code> The name of an encryption scope defined in the Azure Blob Storage service which is to be used to encrypt the data in Azure <code>--max-block-size MAX_BLOCK_SIZE</code> The chunk size to be used when uploading an object via the concurrent chunk method 4MB <code>--max-concurrency MAX_CONCURRENCY</code> The maximum number of chunks to be uploaded concurrently 1 <code>--max-single-put-size MAX_SINGLE_PUT_SIZE</code> Maximum size for which the Azure client will upload an object in a single request. If this is set lower than the PostgreSQL WAL segment size after any applied compression then the concurrent chunk upload method for WAL archiving will be used. 64MB"},{"location":"commands/cloud/cloud-wal-archive/#google-cloud-storage","title":"google-cloud-storage","text":"<p>The following extra options can be used with the <code>cloud-wal-archive</code> command for google-cloud-storage:</p> Argument Description Default Example <code>\\--kms-key-name KMS_KEY_NAME</code> The name of the GCP KMS key which should be used for encrypting the uploaded data in GCS"},{"location":"commands/cloud/cloud-wal-archive/#dependencies","title":"Dependencies","text":"<p>The following dependencies apply to the <code>cloud-wal-archive</code> command:</p> Cloud provider Dependencies aws-s3 boto3 azure-blob-storage azure-storage-blob, azure-identity (optional, if you wish to use <code>DefaultAzureCredential</code>) google-cloud-storage google-cloud-storage"},{"location":"commands/cloud/cloud-wal-archive/#exit-status","title":"Exit status","text":"Exit code Description 0 Success 1 The wal-archive was not successful 2 The connection to the cloud provider failed 3 There was an error in the command input Other non-zero code Failure"},{"location":"commands/cloud/cloud-wal-archive/#additional-information","title":"Additional information","text":"<p>This script can be used in conjunction with <code>pre_archive_retry_script</code> to relay WAL files to S3, as follows:</p> <pre><code>pre_archive_retry_script = 'barman-cloud-wal-archive [*OPTIONS*] *DESTINATION_URL* ${BARMAN_SERVER}'\n</code></pre>"},{"location":"commands/cloud/cloud-wal-restore/","title":"Cloud wal-restore","text":"Command Category Description Synopsis <code>cloud-wal-restore</code> Cloud Restore PostgreSQL WAL files from the Cloud using <code>restore_command</code> <code>barman-cloud-wal-restore [*OPTIONS*] *SOURCE_URL* *SERVER_NAME* *WAL_NAME* *WAL_PATH*</code>"},{"location":"commands/cloud/cloud-wal-restore/#supported-cloud-providers","title":"Supported cloud providers","text":"<p><code>cloud-wal-restore</code> is supported for the following cloud providers:</p> <ul> <li>AWS Simple Storage Service (S3)</li> <li>Azure Blob Storage</li> <li>Google Cloud Storage</li> </ul>"},{"location":"commands/cloud/cloud-wal-restore/#details","title":"Details","text":"<p>This script can be used as a <code>restore_command</code> to download WAL files previously archived with <code>barman-cloud-wal-archive</code>. </p>"},{"location":"commands/cloud/cloud-wal-restore/#usage","title":"Usage","text":"<pre><code>barman-cloud-wal-restore [-V] [--help] [-v | -q] [-t]\n[--cloud-provider {aws-s3,azure-blob-storage,google-cloud-storage}]\n[--endpoint-url ENDPOINT_URL] [-P AWS_PROFILE]\n[--profile AWS_PROFILE]\n[--read-timeout READ_TIMEOUT]\n[--azure-credential {azure-cli,managed-identity}]\nsource_url server_name wal_name wal_dest\n</code></pre>"},{"location":"commands/cloud/cloud-wal-restore/#positional-arguments","title":"Positional arguments","text":"<p>The following positional arguments can be used with the <code>cloud-wal-restore</code> command:</p> Argument Description Default Example <code>source_url</code> URL of the cloud source, such as a bucket in AWS S3. <code>s3://bucket/path/to/folder</code> <code>server_name</code> The name of the server as configured in Barman. <code>wal_name</code> The value of the <code>%f</code> keyword (according to <code>restore_command</code>). <code>wal_dest</code> The value of the <code>%p</code> keyword (according to <code>restore_command</code>)."},{"location":"commands/cloud/cloud-wal-restore/#optional-arguments","title":"Optional arguments","text":"<p>The following optional arguments can be used with the <code>cloud-wal-restore</code> command:</p> Argument Description Default Example <code>\\--help</code> Show the help message and exit <code>\\-v, --verbose</code> Increase output verbosity (<code>-vv</code> is more than <code>-v</code>) <code>\\-V, --version</code> Show the version number and exit <code>\\-q, --quiet</code> Decrease output verbosity (<code>-qq</code> is less than <code>-q</code>) <code>\\-t, --test</code> Test cloud connectivity and exit <code>\\--cloud-provider {aws-s3,azure-blob-storage,google-cloud-storage}</code> The cloud provider to use as a storage backend"},{"location":"commands/cloud/cloud-wal-restore/#extra-options","title":"Extra options","text":"<p>The following extra options can be used with the <code>cloud-wal-restore</code> command for the following cloud providers:</p>"},{"location":"commands/cloud/cloud-wal-restore/#aws-s3","title":"aws-s3","text":"<p>The following extra options can be used with the <code>cloud-wal-restore</code> command for aws-s3:</p> Argument Description Default Example <code>\\--endpoint-url ENDPOINT_URL</code> Override default S3 endpoint URL with the given one <code>\\-P AWS_PROFILE, --aws-profile AWS_PROFILE</code> Profile name (e.g. <code>INI</code> section in the AWS credentials file) <code>\\--profile AWS_PROFILE</code> Profile name (deprecated: replaced by <code>--aws-profile</code>) <code>\\--read-timeout READ_TIMEOUT</code> The time in seconds until a timeout is raised when waiting to read from a connection 60 seconds"},{"location":"commands/cloud/cloud-wal-restore/#azure-blob-storage","title":"azure-blob-storage","text":"<p>The following extra options can be used with the <code>cloud-wal-restore</code> command for azure-blob-storage:</p> Argument Description Default Example <code>\\--azure-credential {azure-cli,managed-identity}, --credential {azure-cli,managed-identity}</code> Optionally specify the type of credential to use when authenticating with Azure. If omitted then Azure Blob Storage credentials will be obtained from the environment and the default Azure authentication flow will be used for authenticating with all other Azure services. If no credentials can be found in the environment then the default Azure authentication flow will also be used for Azure Blob Storage."},{"location":"commands/cloud/cloud-wal-restore/#google-cloud-storage","title":"google-cloud-storage","text":"<p>No extra options can be used with the <code>cloud-wal-restore</code> command for google-cloud-storage.</p>"},{"location":"commands/cloud/cloud-wal-restore/#dependencies","title":"Dependencies","text":"<p>The following dependencies apply to the <code>cloud-wal-restore</code> command:</p> Cloud provider Dependencies aws-s3 boto3 azure-blob-storage azure-storage-blob, azure-identity (optional, if you wish to use <code>DefaultAzureCredential</code>) google-cloud-storage google-cloud-storage"},{"location":"commands/cloud/cloud-wal-restore/#exit-status","title":"Exit status","text":"Exit code Description 0 Success 1 The requested WAL could not be found 2 The connection to the cloud provider failed 3 There was an error in the command input Other non-zero code Failure"},{"location":"commands/cloud/cloud_commands_using/","title":"Using Cloud commands","text":"<p>Barman client utilities (<code>barman-cli-cloud</code>) have been extended to support object storage integration and enhance disaster recovery capabilities of your PostgreSQL databases by relaying WAL files and backups to a supported cloud provider.</p> <p>These utilities are distributed in the <code>barman-cli-cloud</code> RPM/Debian package, and can be installed alongside the PostgreSQL server.</p>"},{"location":"commands/cloud/cloud_commands_using/#cloud-providers","title":"Cloud providers","text":"<p>Cloud commands are supported for the following cloud providers:</p> <ul> <li>AWS Simple Storage Service (S3) (or any S3 compatible object store)</li> <li>Azure Blob Storage</li> <li>Google Cloud Storage (Rest API)</li> </ul> <p>Info</p> <p>Some cloud commands may not be supported for all cloud providers.  For more information, see the Supported cloud providers section in each cloud command page.</p>"},{"location":"commands/cloud/cloud_commands_using/#dependencies","title":"Dependencies","text":"<p>Cloud commands have a dependency on the appropriate library for the cloud provider you wish to use.  Exact dependencies are listed on the page for each cloud command.  In general, the following dependencies apply:</p> Cloud provider Dependencies aws-s3 boto3 azure-blob-storage azure-storage-blob, azure-identity (optional, if you wish to use <code>DefaultAzureCredential</code>) google-cloud-storage google-cloud-storage <p>Use the <code>--cloud-provider</code> option to choose the cloud provider for your backups and WALs.</p>"},{"location":"commands/cloud/cloud_commands_using/#credentials","title":"Credentials","text":""},{"location":"commands/cloud/cloud_commands_using/#for-aws-s3","title":"For <code>aws-s3</code>","text":"<p>For information on how to setup credentials for the <code>aws-s3</code> cloud provider see the \"Credentials\" section in Boto 3 documentation from the References link.</p>"},{"location":"commands/cloud/cloud_commands_using/#for-azure-blob-storage","title":"For <code>azure-blob-storage</code>","text":"<p>For credentials for the <code>azure-blob-storage</code> cloud provider see the \"Environment variables for authorization parameters\" section in the Azure documentation from the References link.</p> <p>The following Azure environment variables are supported: </p> <ul> <li><code>AZURE_STORAGE_CONNECTION_STRING</code></li> <li><code>AZURE_STORAGE_KEY</code></li> <li><code>AZURE_STORAGE_SAS_TOKEN</code></li> </ul> <p>You can also use the<code>--credential</code> option to specify either <code>azure-cli</code>or managed-identity credentials in order to authenticate via Azure Active Directory.</p>"},{"location":"commands/cloud/cloud_commands_using/#installation","title":"Installation","text":"<p><code>barman-cli-cloud</code> needs to be installed on those PostgreSQL servers that you want to directly backup to a cloud provider, bypassing Barman.</p> <p>If you want to use <code>barman-cloud-backup</code> and/or <code>barman-cloud-wal-archive</code> as hook scripts, you can install the <code>barman-cli-cloud</code> package on the Barman server also.</p> <p>See the Barman \"Installation\" section to install the repositories.</p> <p>RedHat/CentOS:  (as root) <pre><code>yum install barman-cli-cloud\n</code></pre> Debian/Ubuntu:  (as root) <pre><code>apt-get install barman-cli-cloud\n</code></pre></p>"},{"location":"commands/cloud/cloud_commands_using/#usage","title":"Usage","text":"<p>All commands should be prefaced with <code>barman-cloud-</code>.  For example <code>barman-cloud-backup-keep</code></p>"},{"location":"commands/cloud/cloud_commands_using/#cloud-command-index","title":"Cloud command index","text":"<p>The following list includes the cloud commands.</p> Command Category Description <code>cloud-backup</code> Cloud Perform a backup of a local PostgreSQL instance and ship the resulting tarball(s) to the cloud. <code>cloud-backup-delete</code> Cloud Delete backups previously made with the <code>barman-cloud-backup</code> command. <code>cloud-backup-keep</code> Cloud Flag backups previously made with <code>barman-cloud-backup</code> as archival backups. <code>cloud-backup-list</code> Cloud List backups previously made with <code>barman-cloud-backup</code> command. <code>cloud-backup-show</code> Cloud Display metadata for backups previously made with the <code>barman-cloud-backup</code> command. <code>cloud-check-wal-archive</code> Cloud Check that the WAL archive destination for SERVER_NAME is safe to use for a new PostgreSQL cluster. <code>cloud-wal-archive</code> Cloud Used with the <code>archive</code> command of a PostgreSQL server to ship WAL files to the Cloud. <code>cloud-wal-restore</code> Cloud Used as a <code>restore</code> command to download WAL files previously archived with <code>barman-cloud-wal-archive</code> command. <code>cloud-restore</code> Cloud Download a backup previously made with <code>barman-cloud-backup command</code>."},{"location":"commands/cloud/cloud_commands_using/#references","title":"References","text":"<p>For more information on configuring your environment, see the following references:</p> <ul> <li>Boto</li> <li>AWS CLI Setup</li> <li>AWS CLI Getting Started</li> <li>Azure Blob Storage Environment Variables</li> <li>Azure Blob Storage Using Python</li> <li>libpq Environment Variables</li> <li> <p>Google Cloud Storage Credentials</p> <p>Info</p> <p>Only authentication with <code>GOOGLE_APPLICATION_CREDENTIALS</code> env is supported when using Google cloud storage credentials.</p> </li> </ul>"},{"location":"commands/general/commands_general/","title":"General commands","text":"<p>The scope of the general commands is the entire Barman server, that can back up many PostgreSQL servers. </p>"},{"location":"commands/general/commands_general/#usage","title":"Usage","text":"<p>All commands should be prefaced with <code>barman</code>.  For example <code>barman cron</code></p>"},{"location":"commands/general/commands_general/#general-commands-index","title":"General commands index","text":"<p>The following list includes the general commands.</p> Command Category Description <code>cron</code> General Perform maintenance operations on WAL files and backups <code>diagnose</code> General Creates a JSON report useful for diagnostic and support purposes <code>list-servers</code> General Display the list of active servers configured for your backup system"},{"location":"commands/general/cron/","title":"Cron","text":"Command Category Description Synopsis <code>barman cron</code> General Perform maintenance operations on WAL files and backups <code>barman cron</code>"},{"location":"commands/general/cron/#details","title":"Details","text":"<p>Barman doesn't include a long-running daemon or service file, therefore, there's no need to use  <code>systemctl start</code>, <code>service start</code>, or similar commands.  Instead, the <code>barman cron</code> subcommand is provided to perform background \"steady-state\" backup operations.</p> <p>You can perform maintenance operations, on both WAL files and backups, using <code>barman cron</code>.</p> <p>Note</p> <p><code>barman cron</code> should be executed in a cron script. It's recommendend to schedule <code>barman cron</code> to run every minute. If you installed Barman using the rpm or debian package, a cron entry that executes every minute will be created for you.</p> <p><code>barman cron</code> only runs background maintenance tasks. It's not responsible for running scheduled backups. Any regularly-scheduled backup jobs that you require must be scheduled separately, for example, in another cron entry which runs <code>barman backup all</code>.</p> <p><code>barman cron</code> executes WAL archiving operations concurrently on a server basis.  This enforces retention policies on servers that have:</p> <ul> <li><code>retention_policy</code> not empty and valid.</li> <li><code>retention_policy_mode</code> set to auto.</li> </ul> <p>The <code>cron</code> command ensures that WAL streaming is started for servers that have requested it, by transparently executing the <code>receive-wal</code> command.</p> <p>In order to stop the operations started by the <code>cron</code> command, comment out the cron entry and execute:</p> <pre><code>barman receive-wal --stop SERVER_NAME\n</code></pre> <p>Tip</p> <p>Use <code>barman list-servers</code> to ensure you cover all of your servers.</p>"},{"location":"commands/general/cron/#additional-options","title":"Additional options","text":"<p><code>--keep-descriptors</code> Keep the stdout and the stderr streams of the Barman subprocesses attached to this one. This is useful for Docker based installations.</p>"},{"location":"commands/general/diagnose/","title":"Diagnose","text":"Command Category Description Synopsis <code>barman diagnose</code> General Creates a JSON report useful for diagnostic and support purposes <code>barman diagnose</code>"},{"location":"commands/general/diagnose/#details","title":"Details","text":"<p>The <code>diagnose</code> command creates a JSON report useful for diagnostic and support purposes. This report contains the following diagnostic information for all configured servers:</p> <ul> <li>Global configuration</li> <li>SSH version</li> <li>Python version</li> <li>Rsync version</li> <li>Current configuration of all servers</li> <li>Status of all servers</li> </ul> <p>Note</p> <p>From Barman 3.10.0 onwards you can optionally specify the <code>--show-config-source</code> argument to the command. In that case, for each configuration option of Barman and of the Barman servers, the output will include not only the configuration value, but also the configuration file which provides the effective value.</p> <p>Important</p> <p>Even if the diagnose is written in JSON and that format is thought to be machine readable, its structure is not to be considered part of the interface. Format can change between different Barman versions.</p>"},{"location":"commands/general/list-servers/","title":"List-servers","text":"Command Category Description Synopsis <code>barman list-servers</code> General Display the list of active servers that have been configured for your backup system <code>barman list-servers</code>"},{"location":"commands/general/list-servers/#details","title":"Details","text":"<p>You can display the list of active servers that have been configured for your backup system.</p> <p>A machine readable output can be obtained with the <code>--minimal</code> option: <pre><code>barman list-servers --minimal\n</code></pre></p>"},{"location":"commands/server/archive-wal/","title":"archive-wal","text":"Command Category Description Synopsis <code>archive-wal</code> Server Perform maintenance operations on WAL files and backups <code>barman archive-wal</code>"},{"location":"commands/server/archive-wal/#details","title":"Details","text":"<p>The <code>archive-wal</code> command execute maintenance operations on WAL files for a given server. This operations include processing of the WAL files received from either the streaming connection, the <code>archive_command</code> or both.</p> <p>It gets any incoming xlog file (both through standard <code>archive_command</code> and streaming replication, where applicable), and moves them in the WAL archive for that server. If necessary, it can apply compression when requested.</p> <p>Important</p> <p>The <code>archive-wal command</code>, even if it can be directly invoked, is designed to be started from the <code>cron</code> general command.</p>"},{"location":"commands/server/backup/","title":"backup","text":"Command Category Description Synopsis <code>backup</code> Server Perform maintenance operations on WAL files and backups <code>barman backup</code>"},{"location":"commands/server/backup/#details","title":"Details","text":"<p>The backup command takes a full backup (base backup) of the given servers. It has several options that let you override the corresponding configuration parameter for the new backup. </p> <p>You can perform a full backup for a given server with: <pre><code>barman backup &lt;server_name&gt;\n</code></pre></p> <p>Tips</p> <p>You can use <code>barman backup all</code> to sequentially backup all your configured servers.</p> <p>You can use <code>barman backup</code> server_1_name server_2_name to sequentially backup both both servers.</p> <p>Barman 2.10 introduced the <code>-w/--wait</code> option for the backup command. When set, Barman temporarily saves the state of the backup to <code>WAITING_FOR_WALS</code>, then waits for all the required WAL files to be archived before setting the state to DONE and proceeding with post-backup hook scripts. </p> <p>If the <code>--wait-timeout</code> option is provided, Barman will stop waiting for WAL files after the specified number of seconds, and the state will remain in <code>WAITING_FOR_WALS</code>.  The <code>cron</code> command will continue to check that missing WAL files are archived, then label the backup as done.</p>"},{"location":"commands/server/backup/#arguments","title":"Arguments","text":"Argument Description Default <code>delete SERVER_NAME BACKUP_ID</code> Delete the specified backup. Backup ID shortcuts can be used <code>--name</code> A friendly name for this backup which can be used in place of the backup ID in barman commands. <code>--immediate-checkpoint</code> Forces the initial checkpoint to be done as quickly as possible. Overrides value of the parameter <code>immediate_checkpoint</code>, if present in the configuration file. <code>--no-immediate-checkpoint</code> Forces to wait for the checkpoint. Overrides value of the parameter immediate_checkpoint, if present in the configuration file. <code>--reuse-backup [INCREMENTAL_TYPE]</code> Overrides reuse_backup option behaviour. Possible values for <code>INCREMENTAL_TYPE</code> are: <code>off</code>: do not reuse the last available backup; <code>copy</code>: reuse the last available backup for a server and create a copy of the unchanged files (reduce backup time);  <code>link</code>: reuse the last available backup for a server and create a hard link of the unchanged files (reduce backup time and space); <code>link</code> is the default target if <code>--reuse-backup</code> is used and <code>INCREMENTAL_TYPE</code> is not explicit. <code>--retry-times</code> Number of retries of base backup copy, after an error. Used during both backup and recovery operations. Overrides value of the parameter basebackup_retry_times, if present in the configuration file. <code>--no-retry</code> Same as <code>--retry-times 0</code> <code>--retry-sleep</code> Number of seconds of wait after a failed copy, before retrying. Used during both backup and recovery operations. Overrides value of the parameter <code>basebackup_retry_sleep</code>, if present in the configuration file. <code>-j, --jobs</code> Number of parallel workers to copy files during backup. Overrides value of the parameter <code>parallel_jobs</code>, if present in the configuration file. <code>--jobs-start-batch-period</code> The time period in seconds over which a single batch of jobs will be started. Overrides the value of parallel_jobs_start_batch_period, if present in the configuration file. Defaults to 1 second. 1 second <code>--jobs-start-batch-size</code> Maximum number of parallel workers to start in a single batch. Overrides the value of <code>parallel_jobs_start_batch_size</code>, if present in the configuration file. Defaults to 10 jobs. <code>--bwlimit KBPS</code> Maximum transfer rate in kilobytes per second. A value of 0 means no limit. Overrides <code>bandwidth_limit</code> configuration option. undefined <code>--wait, -w</code> Wait for all required WAL files by the base backup to be archived <code>--wait-timeout</code> The time, in seconds, spent waiting for the required WAL files to be archived before timing out <code>--manifest</code> Forces the creation of a backup manifest file at the end of a backup. Overrides value of the parameter <code>autogenerate_manifest</code>, from the configuration file. Works with rsync backup method and strategies only <code>--no-manifest</code> Disables the automatic creation of a backup manifest file at the end of a backup. Overrides value of the parameter <code>autogenerate_manifest</code>, from the configuration file. Works with rsync backup method and strategies only"},{"location":"commands/server/backup/#backup-id-shortcuts","title":"Backup ID shortcuts","text":"<p>Rather than using the timestamp backup ID, you can use any of the following shortcuts/aliases to identity a backup for a given server.</p> Shortcut Description <code>first</code> Oldest available backup for that server, in chronological order <code>last</code> Latest available backup for that server, in chronological order <code>latest</code> Same as last <code>oldest</code> Same as first <code>last-failed</code> Latest failed backup, in chronological order <p>Using those keywords with Barman commands allows you to execute actions without knowing the exact ID of a backup for a server. For example, to remove the oldest backup available in the catalog and reclaim disk space, you can issue: <pre><code>barman delete \\&lt;server_name&gt; oldest\n</code></pre> Additionally, if backup was taken with the<code>--name \\&lt;friendly_name&gt;</code> option, you can use the friendly name in place of the backup ID to refer to that specific backup.</p>"},{"location":"commands/server/check/","title":"check","text":"Command Category Description Synopsis <code>check</code> Server Check the connection to a given server and its configuration <code>barman check-backup SERVER_NAME BACKUP_ID</code>"},{"location":"commands/server/check/#details","title":"Details","text":"<p>You can check the connection to a given server and the configuration coherence.</p> <p>Tip</p> <p>You can use <code>barman check all</code> to check all your configured servers.</p> <p>Important</p> <p>The <code>check</code> command can be considered the most critical feature that Barman implements. It's recommended to integrate it with your alerting and monitoring infrastructure. The <code>--nagios</code> option allows you to easily create a plugin for Nagios/Icinga.</p> <p>Makes sure that all the required WAL files to check the consistency of a physical backup (that is, from the beginning to the end of the full backup) are correctly archived. This command is automatically invoked by the <code>cron</code> command and at the end of every backup operation. <pre><code>check-wal-archive SERVER_NAME\n</code></pre> Check that the WAL archive destination for SERVER_NAME is safe to use for a new PostgreSQL cluster. With no optional args (the default) this will pass if the WAL archive is empty and fail otherwise.</p> <p><code>--timeline [TIMELINE]</code> A positive integer specifying the earliest timeline for which associated WALs should cause the check to fail. The check will pass if all WAL content in the archive relates to earlier timelines. If any WAL files are on this timeline or greater then the check will fail. <pre><code>check SERVER_NAME\n</code></pre> Show diagnostic information about SERVER_NAME, including: Ssh connection check, PostgreSQL version, configuration and backup directories, archiving process, streaming process, replication slots, etc. Specify all as SERVER_NAME to show diagnostic information about all the configured servers.</p> <p><code>--nagios</code> Nagios plugin compatible output</p>"},{"location":"commands/server/commands_server/","title":"Server commands","text":"<p>Server commands work directly on a PostgreSQL server or on its area in Barman.  They are useful to check its status, perform maintenance operations, take backups, and manage the WAL archive.</p> <p>Usage</p> <p>All commands should be prefaced with <code>barman</code>.  For example <code>barman check</code></p>"},{"location":"commands/server/commands_server/#server-command-index","title":"Server command index","text":"<p>The following list includes the server commands.</p> Command Category Description <code>archive-wal</code> Server Execute maintenance operations on WAL files for a given server <code>backup</code> Server Take a full backup (base backup) of the given servers <code>check</code> Server Check the connection to a given server and its configuration <code>config-update</code> Server Create or update configuration of servers and models <code>config-switch</code> Server Apply a set of configuration overrides defined through a model to a Barman server <code>delete</code> Server Delete a given backup <code>generate-manifest</code> Server Generate a <code>backup_manifest</code> file from <code>backup_id</code> using backup in barman server <code>get-wal</code> Server Request any xlog file from its WAL archive <code>keep</code> Server Flag the specified backup as an archival backup <code>list-backups</code> Server List the catalog of available backups for a given server <code>list-files</code> Server List all the files in a particular backup <code>list-servers</code> Server Show all the configured servers, and their descriptions <code>lock-directory-cleanup</code> Server Automatically cleans up the <code>barman_lock_directory</code> from unused lock files <code>put-wal</code> Server Receive a WAL file from a remote server and securely store it into the <code>SERVER_NAME</code> incoming directory <code>rebuild-xlogdb</code> Server Regenerate the content of the WAL archive <code>receive-wal</code> Server Manage the <code>receive-wal</code> process <code>recover</code> Server Recover a backup in a given directory <code>replication-status</code> Server Reports the status of any streaming client currently attached to the PostgreSQL server <code>show-servers</code> Server Show the configuration parameters for a given server <code>status</code> Server Show live information and status of a PostgreSQL server or all servers <code>switch-wal</code> Server Make the PostgreSQL server switch to another transaction log file (WAL) <code>sync-info</code> Server Collect information regarding the current status of a Barman server <code>verify-backup</code> Server Use the <code>backup_manifest</code> file from backup and run <code>pg_verifybackup</code> against it <code>wal-archive</code> Server <code>archive_command</code> based on Barman's <code>put-wal</code> <code>wal-restore</code> Server <code>restore_command</code> based on Barman's <code>get-wal</code>"},{"location":"commands/server/config-switch/","title":"config-switch","text":"Command Category Description Synopsis <code>config-switch</code> General Apply a set of configuration overrides defined through a model to a Barman server <code>barman config-switch</code>"},{"location":"commands/server/config-switch/#syntax","title":"Syntax","text":"<pre><code>barman config-switch &lt;server_name&gt; &lt;model_name&gt;\n</code></pre>"},{"location":"commands/server/config-switch/#details","title":"Details","text":"<p>The <code>config-switch</code> command is used to apply a set of configuration overrides defined through a model to a Barman server. </p> <p>The final configuration of the Barman server is composed of the configuration of the server plus the overrides applied by the selected model. Models are particularly useful for clustered environments, so you can create different configuration models which can be used in response to various scenarios such as failover events.</p> <p>The command will only succeed if  exists and belongs to the same cluster as . <p>There can only be one model active at a time. If you run the command twice with different models, only the overrides defined for the last one apply.</p> <p>To unapply an existing active model for a server: <pre><code>barman config-switch &lt;server_name&gt; --reset\n</code></pre> It will take care of unapplying the overrides that were previously in place by the active model.</p> <p>Tip</p> <p>This command can also be useful for recovering when you have a server with an active model which was previously configured but which no longer exists in your configuration.</p>"},{"location":"commands/server/config-update/","title":"config-update","text":"Command Category Description Synopsis <code>config-update</code> Server Create or update configuration of servers and models <code>barman config-update</code>"},{"location":"commands/server/config-update/#syntax","title":"Syntax","text":"<pre><code>barman config-update &lt;json_changes&gt;\n</code></pre>"},{"location":"commands/server/config-update/#details","title":"Details","text":"<p>The <code>config-update</code> command is used to create or update configuration of servers and models in Barman.</p> <p><code>json_changes</code> should be a JSON string containing an array of documents. </p> <p>Each document must contain the following key:</p> <p><code>scope</code>: either server or model, depending on if you want to create or update a Barman server or a Barman model;</p> <p>They must also contain either of the following keys, depending on value of scope:</p> <ul> <li><code>server_name</code>: if scope is server, you should fill this key with the Barman server name.</li> <li><code>model_name</code>: if scope is model, you should fill this key with the Barman model name.</li> </ul> <p>Additionally, fill in each document with one or more Barman configuration options along with the desired values for them.</p> <p>For example, to update the Barman server <code>my_server</code> with <code>archiver=on</code> and <code>streaming_archiver=off</code>:</p> <p><code>bash barman config-update \\   \u2018[{\u201cscope\u201d: \u201cserver\u201d, \u201cserver_name\u201d: \u201cmy_server\u201d, \u201carchiver\u201d: \u201con\u201d, \u201cstreaming_archiver\u201d: \u201coff\u201d}]\u2019</code></p> <p>Info</p> <p><code>barman config-update</code> writes the configuration options to a file named <code>.barman.auto.conf</code>, which is created under the <code>barman_home</code>. </p> <p>That configuration file takes higher precedence and overrides values coming from the Barman global configuration file (typically <code>/etc/barman.conf</code>), and from included files as per <code>configuration_files_directory</code> (typically files in <code>/etc/barman.d</code>). </p> <p>Warning</p> <p>If you decide to manually change configuration options in those files, be aware of the potential impact to the Barman files.</p>"},{"location":"commands/server/delete/","title":"delete","text":"Command Category Description Synopsis <code>delete</code> Server Delete a given backup <code>barman delete \\&lt;server_name&gt; \\&lt;backup_id&gt;</code>"},{"location":"commands/server/delete/#syntax","title":"Syntax","text":"<pre><code>barman delete \\&lt;server_name\\&gt; \\&lt;backup_id\\&gt;\n</code></pre>"},{"location":"commands/server/delete/#details","title":"Details","text":"<p>You can delete a backup file.  The delete command accepts any shortcut to identify backups.</p>"},{"location":"commands/server/generate-manifest/","title":"generate-manifest","text":"Command Category Description Synopsis <code>generate-manifest</code> Server Generate a backup_manifest file from backup_id using backup in barman server <code>barman generate-manifest</code>"},{"location":"commands/server/generate-manifest/#syntax","title":"Syntax","text":"<pre><code>barman generate-manifest &lt;server_name&gt; &lt;backup_id&gt;\n</code></pre>"},{"location":"commands/server/generate-manifest/#details","title":"Details","text":"<p>This command is useful when backup is created remotely and <code>pg_basebackup</code> is not involved and <code>backup_manifest</code> file does not exist in backup. It will generate a <code>backup_manifest</code> file from <code>backup_id</code> using backup in barman server. If the file already exists, the file generation command will cancel.</p> <p>Either <code>backup_id</code> backup id shortcuts can be used.</p>"},{"location":"commands/server/generate-manifest/#additional-information","title":"Additional information","text":"<p>This command can also be used as <code>post_backup</code> hook script as follows: <pre><code>post_backup_script=barman generate-manifest ${BARMAN_SERVER} ${BARMAN_BACKUP_ID}\n</code></pre></p>"},{"location":"commands/server/get-wal/","title":"get-wal","text":"Command Category Description Synopsis <code>get-wal</code> Server Request any xlog file from its WAL archive <code>barman get-wal</code>"},{"location":"commands/server/get-wal/#syntax","title":"Syntax","text":"<pre><code>barman get-wal [-o OUTPUT_DIRECTORY][-j|-x] &lt;server_name&gt; &lt;wal_id&gt;\n</code></pre>"},{"location":"commands/server/get-wal/#details","title":"Details","text":"<p>Barman allows users to request any xlog file from its WAL archive through the <code>get-wal</code> command:</p> <p>If the requested WAL file is found in the server archive, the uncompressed content will be returned to STDOUT, unless otherwise specified.</p>"},{"location":"commands/server/get-wal/#options","title":"Options","text":"<p>The following options are available for the <code>get-wal</code> command:</p> Option Description <code>-o OUTPUT_DIRECTORY</code> Allows users to specify a destination directory where Barman will deposit the requested WAL file <code>-j</code> Will compress the output using bzip2 algorithm <code>-x</code> Will compress the output using gzip algorithm <code>-p SIZE</code> Peeks from the archive up to WAL files, starting from the requested file.  <code>SIZE</code> must be an integer &gt;= 1. When invoked with this option, <code>get-wal</code> returns a list of zero to <code>SIZE</code> WAL segment names, one per row. <code>-P, --partial</code> retrieve also partial WAL files (.partial) <code>-t, --test</code> Test both the connection and the configuration of the requested PostgreSQL server in Barman for WAL retrieval. With this option, the <code>WAL_NAME</code> mandatory argument is ignored. <code>keep SERVER_NAME BACKUP_ID</code> Flag the specified backup as an archival backup which should be kept forever, regardless of any retention policies in effect. <code>--target RECOVERY_TARGET</code> Specify the recovery target for the archival backup. Possible values for <code>RECOVERY_TARGET</code> are: <code>full</code>: The backup can always be used to recover to the latest point in time. To achieve this, Barman will retain all WALs needed to ensure consistency of the backup and all subsequent WALs. <code>standalone</code>: The backup can only be used to recover the server to its state at the time the backup was taken. Barman will only retain the WALs needed to ensure consistency of the backup. <code>--status</code> Report the archival status of the backup. This will either be the recovery target of full or standalone for archival backups or nokeep for backups which have not been flagged as archival. <code>--release</code> Release the keep flag from this backup. This will remove its archival status and make it available for deletion, either directly or by retention policy."},{"location":"commands/server/get-wal/#using","title":"Using","text":"<p>It is possible to use <code>get-wal</code> during a recovery operation, transforming the Barman server into a WAL hub for your servers. This can be automatically achieved by adding the get-wal value to the <code>recovery_options</code> global/server configuration option: <pre><code>recovery_options = 'get-wal'\n</code></pre> <code>recovery_options</code> is a global/server option that accepts a list of comma separated values. If the keyword get-wal is present during a recovery operation, Barman will prepare the recovery configuration by setting the <code>restore_command</code> so that <code>barman get-wal</code> is used to fetch the required WAL files. Similarly, one can use the <code>--get-wal</code> option for the recover command at run-time.</p> <p>If <code>get-wal</code> is set in <code>recovery_options</code> but not required during a recovery operation then the <code>--no-get-wal</code> option can be used with the recover command to disable the <code>get-wal</code> recovery option.</p> <p>This is an example of a <code>restore_command</code> for a local recovery: <pre><code>restore_command = 'sudo -u barman barman get-wal SERVER %f &gt; %p'\n</code></pre> The <code>get-wal</code> command should always be invoked as barman user, and it requires the correct permission to read the WAL files from the catalog. This is the reason why we are using <code>sudo -u barman</code> in the example.</p> <p>Setting <code>recovery_options</code> to <code>get-wal</code> for a remote recovery will instead generate a <code>restore_command</code> using the <code>barman-wal-restore</code> script. <code>barman-wal-restore</code> is a more resilient shell script which manages SSH connection errors.</p> <p>This script has many useful options such as the automatic compression and decompression of the WAL files and the peek feature, which allows you to retrieve the next WAL files while PostgreSQL is applying one of them. It is an excellent way to optimise the bandwidth usage between PostgreSQL and Barman.</p> <p><code>barman-wal-restore</code> is available in the <code>barman-cli</code> package.</p>"},{"location":"commands/server/get-wal/#restore-example","title":"Restore example","text":"<p>This is an example of a <code>restore_command</code> for a remote recovery: <pre><code>restore_command = 'barman-wal-restore -U barman backup SERVER %f %p'\n</code></pre> Since it uses SSH to communicate with the Barman server, SSH key authentication is required for the postgres user to login as barman on the backup server. If a port other than the SSH default of 22 should be used then the <code>--port</code> option can be added to specify the port that should be used for the SSH connection.</p>"},{"location":"commands/server/get-wal/#verifying-connectivity","title":"Verifying connectivity","text":"<p>You can check that <code>barman-wal-restore</code> can connect to the Barman server, and that the required PostgreSQL server is configured in Barman to send WAL files with the following command: <pre><code>barman-wal-restore --test backup pg DUMMY DUMMY\n</code></pre> Where backup is the host where Barman is installed, pg is the name of the PostgreSQL server as configured in Barman and DUMMY is a placeholder (<code>barman-wal-restore</code> requires two argument for the WAL file name and destination directory, which are ignored).</p> <p>Success</p> <p>If everything is configured correctly you should see the following output:</p> <pre><code>Ready to retrieve WAL files from the server pg\nFor more information on the barman-wal-restore command, type man barman-wal-restore on the PostgreSQL server.\n</code></pre>"},{"location":"commands/server/keep/","title":"keep","text":"Command Category Description Synopsis <code>keep</code> Server Flag the specified backup as an archival backup <code>barman keep \\&lt;server_name&gt; \\&lt;backup_id&gt;</code>"},{"location":"commands/server/keep/#syntax","title":"Syntax","text":"<pre><code>barman keep \\&lt;server_name&gt; \\&lt;backup_id&gt;\n</code></pre>"},{"location":"commands/server/keep/#details","title":"Details","text":"<p><code>keep</code> flags the specified backup as an archival backup which should be kept forever, regardless of any retention policies in effect. </p> <p>If you have a backup which you wish to keep beyond the retention policy of the server then you can make it an archival backup with:</p> <p><code>barman keep \\&lt;server_name&gt; \\&lt;backup_id&gt; [--target TARGET, --status, --release]</code></p> <p>The allowed values for <code>TARGET</code> are:</p> <p><code>full</code>: The backup can always be used to recover to the latest point in time. To achieve this, Barman will retain all WALs needed to ensure consistency of the backup and all subsequent WALs. <code>standalone</code>: The backup can only be used to recover the server to its state at the time the backup was taken. Barman will only retain the WALs needed to ensure consistency of the backup.</p> <p>If the <code>--status</code> option is provided then Barman will report the archival status of the backup. This will either be the recovery target of full or standalone for archival backups or nokeep for backups which have not been flagged as archival.</p> <p>If the <code>--release</code> option is provided then Barman will release the keep flag from this backup. This will remove its archival status and make it available for deletion, either directly or by retention policy.</p> <p>Once a backup has been flagged as an archival backup, the behaviour of Barman will change as follows:</p> <ul> <li>Attempts to delete that backup by ID using barman delete will fail.</li> <li>Retention policies will never consider that backup as OBSOLETE and therefore barman cron will never delete that backup.</li> <li>The WALs required by that backup will be retained forever. If the specified recovery target is full then all subsequent WALs will also be retained.  This can be reverted by removing the keep flag with <code>barman keep \\&lt;server_name&gt; \\&lt;backup_id&gt; --release</code>.</li> </ul> <p>Warning</p> <p>Once a standalone archival backup is not required by the retention policy of a server, <code>barman cron</code> will remove the WALs between that backup and the <code>begin_wal</code> value of the next most recent backup. </p> <p>This means that while it is safe to change the target from full to standalone, it is not safe to change the target from standalone to full because there is no guarantee the necessary WALs for a recovery to the latest point in time will still be available.</p>"},{"location":"commands/server/list-backups/","title":"list-backups","text":"Command Category Description Synopsis <code>list-backups</code> Server List the catalog of available backups for a given server <code>barman list-backups</code>"},{"location":"commands/server/list-backups/#syntax","title":"Syntax","text":"<pre><code>barman list-backups &lt;server_name&gt;\n</code></pre>"},{"location":"commands/server/list-backups/#details","title":"Details","text":"<p>Lists the catalog of available backups for a given server.</p> <p>The returned output will show the backup ID.  For example, the backup ID returned here is 20111104T102647. <pre><code>servername 20111104T102647 - Fri Nov  4 10:26:48 2011 - Size: 17.0 MiB - WAL Size: 100 B\n</code></pre></p> <p>Tip</p> <p>You can request a full list of the backups of all servers using all as the server name.  For machine-readable output, use the <code>--minimal</code> option.</p>"},{"location":"commands/server/list-files/","title":"list-files","text":"Command Category Description Synopsis <code>list-files</code> Server List all the files in a particular backup <code>barman list-files</code>"},{"location":"commands/server/list-files/#syntax","title":"Syntax","text":"<pre><code>list-files [OPTIONS] SERVER_NAME BACKUP_ID\n</code></pre>"},{"location":"commands/server/list-files/#details","title":"Details","text":"<p>List all the files in a particular backup, identified by the server name and the backup ID.  The files include base backup and required WAL files.</p>"},{"location":"commands/server/list-files/#options","title":"Options","text":"Argument Description Default <code>--target TARGET_TYPE</code> Choose the content of the list for a given backup standalone <p>The allowed values for <code>TARGET_TYPE</code> are:</p> <ul> <li><code>data</code>: lists just the data files;</li> <li><code>standalone</code>: lists the base backup files, including required WAL files;</li> <li><code>wal</code>: lists all the WAL files between the start of the base backup and the end of the log / the start of the following base backup (depending on whether the specified base backup is the most recent one available);</li> <li><code>full</code>: same as data + wal.</li> </ul> <p>Tip</p> <p>The <code>list-files</code> command facilitates interaction with external tools, and can therefore be extremely useful to integrate Barman into your archiving procedures.</p>"},{"location":"commands/server/list-servers/","title":"list-servers","text":"Command Category Description Synopsis <code>list-servers</code> Server Show all the configured servers, and their descriptions <code>barman list-servers</code>"},{"location":"commands/server/list-servers/#details","title":"Details","text":"<p>Show all the configured servers, and their descriptions.</p>"},{"location":"commands/server/lock-directory-cleanup/","title":"lock-directory-cleanup","text":"Command Category Description Synopsis <code>lock-directory-cleanup</code> Server Automatically cleans up the <code>barman_lock_directory</code> from unused lock files <code>barman lock-directory-cleanup</code>"},{"location":"commands/server/lock-directory-cleanup/#details","title":"Details","text":"<p><code>lock-directory-cleanup'</code>will automatically clean up the <code>barman_lock_directory</code> from unused lock files.</p> <p>Barman allows you to specify a directory for lock files through the <code>barman_lock_directory</code> global option.</p> <p>Lock files are used to coordinate concurrent work at global and server level (for example, cron operations, backup operations, access to the WAL archive, and so on.).</p> <p>By default (for backward compatibility reasons), <code>barman_lock_directory</code> is set to <code>barman_home</code>.</p> <p>Tip</p> <p>Use a directory in a volatile partition, such as the one dedicated to run-time variable data (e.g. <code>/var/run/barman</code>).</p>"},{"location":"commands/server/put-wal/","title":"put-wal","text":"Command Category Description Synopsis <code>put-wal</code> Server Receive a WAL file from a remote server and securely store it into the <code>SERVER_NAME</code> incoming directory <code>barman put-wal</code>"},{"location":"commands/server/put-wal/#syntax","title":"Syntax","text":"<pre><code>put-wal [OPTIONS] SERVER_NAME\n</code></pre>"},{"location":"commands/server/put-wal/#details","title":"Details","text":"<p>Receive a WAL file from a remote server and securely store it into the <code>SERVER_NAME</code> incoming directory. The WAL file is retrieved from the <code>STDIN</code>, and must be encapsulated in a tar stream together with a MD5SUMS file to validate it. </p> <p>This command is meant to be invoked through SSH from a remote <code>barman-wal-archive</code> utility (part of <code>barman-cli</code> package). </p> <p>Danger</p> <p>Do not use this command directly unless you take full responsibility of the content of files.</p>"},{"location":"commands/server/put-wal/#options","title":"Options","text":"<p><code>-t, --test</code> Test both the connection and the configuration of the requested PostgreSQL server in Barman to make sure it is ready to receive WAL files.</p>"},{"location":"commands/server/rebuild-xlogdb/","title":"rebuild-xlogdb","text":"Command Category Description Synopsis <code>rebuild-xlogdb</code> Server Regenerate the content of the WAL archive <code>barman rebuild-xlogdb</code>"},{"location":"commands/server/rebuild-xlogdb/#syntax","title":"Syntax","text":"<pre><code>barman rebuild-xlogdb &lt;server_name&gt;\n</code></pre>"},{"location":"commands/server/rebuild-xlogdb/#details","title":"Details","text":"<p>At any time, you can regenerate the content of the WAL archive for a specific server (or every server, using the <code>all</code> shortcut). The WAL archive is contained in the <code>xlog.db</code> file and every server managed by Barman has its own copy.</p> <p>The <code>xlog.db</code> file can be rebuilt with the <code>rebuild-xlogdb</code> command. This will scan all the archived WAL files and regenerate the metadata for the archive.</p> <p>Tip</p> <p>You can rebuild of WAL file metadata for all servers using <code>all</code>.</p>"},{"location":"commands/server/receive-wal/","title":"receive-wal","text":"Command Category Description Synopsis <code>receive-wal</code> Server Manage the receive-wal process <code>barman receive-wal</code>"},{"location":"commands/server/receive-wal/#syntax","title":"Syntax","text":"<pre><code>barman receive-wal &lt;server_name&gt;\n</code></pre>"},{"location":"commands/server/receive-wal/#details","title":"Details","text":"<p>This command manages the <code>receive-wal</code> process, which uses the streaming protocol to receive WAL files from the PostgreSQL streaming connection.  It starts the stream of transaction logs for a server. The process relies on <code>pg_receivewal/pg_receivexlog</code> to receive WAL files from the PostgreSQL servers through the streaming protocol.</p> <p><code>receive-wal</code> process management If the command is run without options, a <code>receive-wal</code> process will be started. This command is based on the <code>pg_receivewal</code> PostgreSQL command.</p> <p>Warning</p> <p>The <code>receive-wal</code> command is a foreground process.  If the command is run with the <code>--stop</code> option, the currently running <code>receive-wal</code> process will be stopped.</p> <p>The <code>receive-wal</code> process uses a status file to track last written record of the transaction log. When the status file needs to be cleaned, the <code>--reset</code> option can be used.</p> <p>Important</p> <p>If you are not using replication slots, you rely on the value of <code>wal_keep_segments</code> (or <code>wal_keep_size</code> from PostgreSQL version 13.0 onwards). Be aware that under high peaks of workload on the database, the <code>receive-wal</code> process might fall behind and go out of sync. As a precautionary measure, Barman currently requires that users manually execute the command with the <code>--reset</code> option, to avoid making wrong assumptions.</p>"},{"location":"commands/server/receive-wal/#options","title":"Options","text":"Option Description <code>--create-slot</code> The replication slot named after the <code>slot_name</code> configuration parameter will be created on the PostgreSQL server. <code>--drop-slot</code> The previous replication slot will be deleted. <code>--reset</code> Reset the status of <code>receive-wal</code>, restarting the streaming from the current WAL file of the server <code>--stop</code> Stop the receive-wal process for the server."},{"location":"commands/server/receive-wal/#replication-slot-management","title":"Replication slot management","text":"<p>The <code>receive-wal</code> process is also useful to create or drop the replication slot needed by Barman for its WAL archiving procedure.  You can use the following options for replication slot management:</p>"},{"location":"commands/server/recover/","title":"recover","text":"Command Category Description Synopsis <code>recover</code> Server Recover a backup in a given directory <code>barman recover</code>"},{"location":"commands/server/recover/#syntax","title":"Syntax","text":"<pre><code>barman recover \\&lt;server_name\\&gt; \\&lt;backup_id\\&gt; /path/to/recover/dir\n</code></pre>"},{"location":"commands/server/recover/#details","title":"Details","text":"<p>Recover a backup in a given directory (local or remote, depending on the <code>--remote-ssh-command</code> option settings). </p> <p>Warning</p> <p>Recovery options can be complex.  Ensure you're familiar with all aspects and options of the <code>recovery</code> command before using it!  For more information on recovery procedures, see Recovering.</p> <p>Danger</p> <p>Don't issue a recover command using a target data directory where a PostgreSQL instance is running. In that case, remember to stop it before issuing the recovery. This applies also to tablespace directories.</p>"},{"location":"commands/server/recover/#options","title":"Options","text":"Argument Description Default <code>--target-tli TARGET_TLI</code> Recover the specified timeline. The special values current and latest can be used in addition to a numeric timeline ID. The default behaviour for PostgreSQL versions &gt;= 12 is to recover to the latest timeline in the WAL archive. The default for PostgreSQL versions &lt; 12 is to recover along the timeline which was current when the backup was taken. <code>--target-time TARGET_TIME</code> Recover to the specified time. You can use any valid unambiguous representation (e.g: \"YYYY-MM-DD HH:MM:SS.mmm\"). <code>--target-xid TARGET_XID</code> Recover to the specified transaction ID. <code>--target-lsn TARGET_LSN</code> Recover to the specified LSN (Log Sequence Number). Requires PostgreSQL 10 or above. <code>--target-name TARGET_NAME</code> Recover to the named restore point previously created with the <code>pg_create_restore_point</code>(name). <code>--target-immediate</code> Recover ends when a consistent state is reached (end of the base backup) <code>--exclusive</code> Set target (time, XID or LSN) to be non inclusive. <code>--target-action ACTION</code> Trigger the specified action once the recovery target is reached. Possible actions are: pause, shutdown and promote. This option requires a target to be defined, with one of the above options. <code>--tablespace NAME:LOCATION</code> Specify tablespace relocation rule. <code>--remote-ssh-command SSH_COMMAND</code> This options activates remote recovery, by specifying the secure shell command to be launched on a remote host. This is the equivalent of the \"ssh_command\" server option in the configuration file for remote recovery. Example: 'ssh postgres@db2'. <code>--retry-times RETRY_TIMES</code> Number of retries of data copy during base backup after an error. Overrides value of the parameter basebackup_retry_times, if present in the configuration file. <code>--no-retry</code> Same as <code>--retry-times 0</code> <code>--retry-sleep</code> Number of seconds of wait after a failed copy, before retrying. Overrides value of the parameter <code>basebackup_retry_sleep</code>, if present in the configuration file. <code>--bwlimit KBPS</code> Maximum transfer rate in kilobytes per second. A value of 0 means no limit. Overrides <code>bandwidth_limit</code> configuration option. undefined <code>-j , --jobs</code> Number of parallel workers to copy files during recovery. Overrides value of the parameter <code>parallel_jobs</code>, if present in the configuration file. Works only for servers configured through rsync/SSH. <code>--jobs-start-batch-period</code> The time period in seconds over which a single batch of jobs will be started. Overrides the value of <code>parallel_jobs_start_batch_period</code>, if present in the configuration file. 1 second <code>--jobs-start-batch-size</code> Maximum number of parallel workers to start in a single batch. Overrides the value of <code>parallel_jobs_start_batch_size</code>, if present in the configuration file. 10 jobs <code>--get-wal, --no-get-wal</code> Enable/Disable usage of <code>get-wal</code> for WAL fetching during recovery. Based on <code>recovery_options</code> setting. <code>--network-compression, --no-network-compression</code> Enable/Disable network compression during remote recovery. Based on <code>network_compression</code> configuration setting. <code>--standby-mode</code> Specifies whether to start the PostgreSQL server as a standby. undefined <code>--recovery-staging-path STAGING_PATH</code> A path to a location on the recovery host (either the barman server or a remote host if <code>--remote-ssh-command</code> is also used) where files for a compressed backup will be staged before being uncompressed to the destination directory. Backups will be staged in their own directory within the staging path according to the following naming convention: <code>barman-staging-SERVER_NAME-BACKUP_ID</code>. The staging directory within the staging path will be removed at the end of the recovery process. This option is required when recovering from compressed backups and has no effect otherwise. <code>--recovery-conf-filename RECOVERY_CONF_FILENAME</code> The name of the file where Barman should write the PostgreSQL recovery options when recovering backups for PostgreSQL versions 12 and later. This defaults to <code>postgresql.auto.conf</code> however if <code>--recovery-conf-filename</code> is used then recovery options will be written to <code>RECOVERY_CONF_FILENAME</code> instead. The default value is correct for a typical PostgreSQL installation however if PostgreSQL is being managed by tooling which modifies the configuration mechanism (for example <code>postgresql.auto.conf</code> could be symlinked to <code>/dev/null</code>) then this option can be used to write the recovery options to an alternative location. <code>--snapshot-recovery-instance INSTANCE_NAME</code> Name of the instance where the disks recovered from the snapshots are attached. This option is required when recovering backups made with <code>backup_method = snapshot</code>. <code>--gcp-zone ZONE_NAME</code> Name of the GCP zone where the instance and disks for snapshot recovery are located. This option can be used to override the value of <code>gcp_zone</code> in the Barman config. <code>--azure-resource-group RESOURCE_GROUP_NAME</code> Name of the Azure resource group containing the instance and disks for snapshot recovery. This option can be used to override the value of <code>azure_resource_group</code> in the Barman config. <code>--aws-region REGION_NAME</code> Name of the AWS region where the instance and disks for snapshot recovery are located. This option can be used to override the value of <code>aws_region</code> in the Barman config."},{"location":"commands/server/replication-status/","title":"replication-status","text":"Command Category Description Synopsis <code>replication-status</code> Server Reports the status of any streaming client currently attached to the PostgreSQL server <code>barman replication-status</code>"},{"location":"commands/server/replication-status/#syntax","title":"Syntax","text":"<pre><code>barman replication-status &lt;server_name&gt;\n</code></pre>"},{"location":"commands/server/replication-status/#details","title":"Details","text":"<p>The <code>replication-status</code> command reports the status of any streaming client currently attached to the PostgreSQL server, including the <code>receive-wal</code> process of your Barman server (if configured).</p> <p>Tip</p> <p>You can request a full status report of the replica for all your servers using <code>all</code> as the server name.</p> <p>For machine-readable output, use the <code>--minimal</code> option.</p>"},{"location":"commands/server/replication-status/#options","title":"Options","text":"Option Description Default Allowed Values <code>--minimal</code> Machine readable output False <code>--target TARGET_TYPE</code> all <code>hot-standby</code>: lists only hot standby servers <code>wal-streamer</code>: lists only WAL streaming clients, such as <code>pg_receivewal</code> <code>all</code>: any streaming client <code>--source SOURCE_TYPE</code> <code>backup-host</code> <code>backup-host</code>: list clients using the backup conninfo for a server <code>wal-host</code>: list clients using the WAL streaming conninfo for a server"},{"location":"commands/server/show-servers/","title":"show-servers","text":"Command Category Description Synopsis <code>show-servers</code> Server Show the configuration parameters for a given server <code>barman show-servers</code>"},{"location":"commands/server/show-servers/#syntax","title":"Syntax","text":"<pre><code>barman show-servers &lt;server_name&gt;\n</code></pre>"},{"location":"commands/server/show-servers/#details","title":"Details","text":"<p>Shows the configuration parameters for a given server.</p> <p>Tip</p> <p>You can request a full configuration report using <code>all</code> as the server name.</p>"},{"location":"commands/server/status/","title":"status","text":"Command Category Description Synopsis <code>status</code> Server Show live information and status of a PostgreSQL server or all servers <code>barman status</code>"},{"location":"commands/server/status/#syntax","title":"Syntax","text":"<pre><code>barman status &lt;server_name&gt;\n</code></pre>"},{"location":"commands/server/status/#details","title":"Details","text":"<p>The <code>status</code> command shows live information and status of a PostgreSQL server or of all servers if you use <code>all</code> as server name.</p>"},{"location":"commands/server/switch-wal/","title":"switch-wal","text":"Command Category Description Synopsis <code>switch-wal</code> Server Make the PostgreSQL server switch to another transaction log file (WAL) <code>barman switch-wal</code>"},{"location":"commands/server/switch-wal/#syntax","title":"Syntax","text":"<pre><code>barman switch-wal &lt;server_name&gt;\n</code></pre>"},{"location":"commands/server/switch-wal/#details","title":"Details","text":"<p>This command makes the PostgreSQL server switch to another transaction log file (WAL), allowing the current log file to be closed, received and then archived.  It execute <code>pg_switch_wal()</code> on the target server (from PostgreSQL 10), or <code>pg_switch_xlog</code> (for PostgreSQL 8.3 to 9.6).</p> <p>If there hasn't been any transaction activity since the last transaction log file switch, the switch needs to be forced using the <code>--force</code> option.  It forces the switch by executing CHECKPOINT before <code>pg_switch_xlog()</code>. </p> <p>Warning</p> <p>Executing a CHECKPOINT might increase I/O load on a PostgreSQL server. Use this option with care.</p> <p>The <code>--archive</code> option requests Barman to trigger WAL archiving after the xlog switch. By default, a 30 seconds timeout is enforced.  The timepout can be changed with <code>--archive-timeout</code>. If no WAL file is received, an error is returned.  The <code>--archive</code> and <code>--archive-timeout</code> options are also available on standby servers.</p> <p>Note</p> <p>In Barman 2.1 and 2.2 this command was called <code>switch-xlog</code>. It has been renamed for naming consistency with PostgreSQL version 10 and higher.</p>"},{"location":"commands/server/sync-info/","title":"sync-info","text":"Command Category Description Synopsis <code>sync-info</code> Server Collect information regarding the current status of a Barman server <code>barman sync-info</code>"},{"location":"commands/server/sync-info/#syntax","title":"Syntax","text":"<pre><code>barman sync-info [--primary] \\&lt;server_name\\&gt; [\\&lt;last_wal\\&gt; [\\&lt;last_position\\&gt;]]\n</code></pre>"},{"location":"commands/server/sync-info/#details","title":"Details","text":"<p>Collect information regarding the current status of a Barman server.  This can be useful for synchronization purposes.</p> <p>The command returns a JSON object containing:</p> <ul> <li>A map with all the backups having status DONE for that server</li> <li>A list with all the archived WAL files</li> <li>The configuration for the server</li> <li>The last read position (in the xlog database file)</li> <li>The name of the last read WAL file</li> </ul> <p>The JSON response contains all the required information for the synchronization between the master and a passive node.</p> <p>If <code>--primary</code> is specified, the command is executed on the defined primary node, rather than locally.</p>"},{"location":"commands/server/verify-backup/","title":"verify-backup","text":"Command Category Description Synopsis <code>verify-backup</code> Server Use the backup_manifest file from backup and run pg_verifybackup against it <code>barman verify-backup</code>"},{"location":"commands/server/verify-backup/#syntax","title":"Syntax","text":"<pre><code>barman verify-backup &lt;server_name&gt; &lt;backup_id&gt;\n</code></pre>"},{"location":"commands/server/verify-backup/#details","title":"Details","text":"<p>The verify-backup command uses <code>backup_manifest</code> file from backup and runs <code>pg_verifybackup</code> against it.</p> <p>This command will call <code>pg_verifybackup &lt;path_to_backup_manifest&gt; -n</code> (available on PostgreSQL version 13 and higher). </p> <p><code>pg_verifybackup</code> must be installed on the backup server. For rsync backups, it can be used with the <code>generate-manifest</code> command.</p> <p>Either <code>backup_id</code> backup id shortcuts can be used.</p> <p>You can also use <code>verify SERVER_NAME BACKUP_ID</code> as an alias for <code>verify-backup</code>.</p>"},{"location":"commands/server/wal-archive/","title":"wal-archive","text":"Command Category Description Synopsis <code>wal-archive</code> Server <code>archive_command</code> based on Barman's <code>put-wal</code> <code>barman-wal-archive [*OPTIONS*] *BARMAN_HOST* *SERVER_NAME* *WAL_DEST*</code>"},{"location":"commands/server/wal-archive/#details","title":"Details","text":"<p>This script can be used in the <code>archive_command</code> of a PostgreSQL server to ship WAL files to a Barman host using the <code>put-wal</code> command. An SSH connection will be opened to the Barman host. <code>barman-wal-archive</code> allows the integration of Barman in PostgreSQL clusters to improve business continuity.</p>"},{"location":"commands/server/wal-archive/#positional-arguments","title":"Positional arguments","text":"<p>The following positional arguments can be used with the <code>wal-archive</code> command:</p> Argument Description Default Example <code>BARMAN_HOST</code> The host of the Barman server. <code>server_name</code> The name of the server as configured in Barman. <code>wal_path</code> The value of the <code>%p</code> keyword (according to <code>archive_command</code>)."},{"location":"commands/server/wal-archive/#optional-arguments","title":"Optional arguments","text":"<p>The following optional arguments can be used with the <code>wal-archive</code> command:</p> Argument Description Default Example <code>\\--help</code> Show the help message and exit <code>\\-V, --version</code> Show the version number and exit <code>-U USER, --user USER</code> The user used for the ssh connection to the Barman server. barman <code>--port PORT</code> The port used for the ssh connection to the Barman server. <code>-c CONFIG, --config CONFIG</code> Configuration file on the Barman server. <code>-t, --test</code> Test both the connection and the configuration of the requested PostgreSQL server in Barman to make sure it is ready to receive WAL files. With this option, the <code>WAL_NAME</code> and <code>WAL_DEST</code> mandatory arguments are ignored."},{"location":"commands/server/wal-archive/#exit-status","title":"Exit status","text":"Exit code Description 0 Success Other non-zero code Failure"},{"location":"commands/server/wal-restore/","title":"wal-restore","text":"Command Category Description Synopsis <code>wal-restore</code> Server <code>restore_command</code> based on Barman's <code>get-wal</code> <code>barman-wal-restore [*OPTIONS*] *BARMAN_HOST* *SERVER_NAME* *WAL_NAME* *WAL_DEST*</code>"},{"location":"commands/server/wal-restore/#details","title":"Details","text":"<p>This script can be used as a <code>restore_command</code> for PostgreSQL servers, retrieving WAL files using the <code>get-wal</code> feature of Barman. An SSH connection will be opened to the Barman host. `barman-wal-restore' allows the integration of Barman in PostgreSQL clusters to improve business continuity.</p>"},{"location":"commands/server/wal-restore/#positional-arguments","title":"Positional arguments","text":"<p>The following positional arguments can be used with the <code>wal-restore</code> command:</p> Argument Description Default Example <code>BARMAN_HOST</code> The host of the Barman server. <code>server_name</code> The name of the server as configured in Barman. <code>wal_name</code> The value of the <code>%f</code> keyword (according to <code>restore_command</code>). <code>wal_dest</code> The value of the <code>%p</code> keyword (according to <code>restore_command</code>)."},{"location":"commands/server/wal-restore/#optional-arguments","title":"Optional arguments","text":"<p>The following optional arguments can be used with the <code>wal-restore</code> command:</p> Argument Description Default Example <code>\\--help</code> Show the help message and exit <code>\\-V, --version</code> Show the version number and exit <code>-U USER, --user USER</code> The user used for the ssh connection to the Barman server. barman <code>--port PORT</code> The port used for the ssh connection to the Barman server. <code>-s SECONDS, --sleep SECONDS</code> Sleep for SECONDS after a failure of <code>get-wal</code> request. 0 (nowait) <code>-p JOBS, --parallel JOBS</code> Specifies the number of files to peek and transfer in parallel 0 (disabled) <code>--spool-dir SPOOL_DIR</code> Specifies spool directory for WAL files. <code>/var/tmp/walrestore</code> <code>-P, --partial</code> Retrieve also partial WAL files (.partial). <code>-z, --gzip</code> Transfer the WAL files compressed with gzip. <code>-j, --bzip2</code> Transfer the WAL files compressed with bzip2. <code>-c CONFIG, --config CONFIG</code> Configuration file on the Barman server. <code>-t, --test</code> Test both the connection and the configuration of the requested PostgreSQL server in Barman to make sure it is ready to receive WAL files. With this option, the <code>WAL_NAME</code> and <code>WAL_DEST</code> mandatory arguments are ignored."},{"location":"commands/server/wal-restore/#exit-status","title":"Exit status","text":"Exit code Description 0 Success 1 The remote get-wal command failed, most likely because the requested WAL could not be found. 2 The SSH connection to the Barman server failed. Other non-zero code Failure"},{"location":"configuring/configuration_examples/","title":"Configuration examples","text":"<p>The following examples show various types of configuration files.</p> <p>For more information, refer to the the following files:</p> <ul> <li><code>distributed barman.conf</code></li> <li><code>ssh-server.conf-template</code></li> <li><code>streaming-server.conf-template</code></li> </ul>"},{"location":"configuring/configuration_examples/#main-configuration-file","title":"Main configuration file","text":"<pre><code>**[barman]**\n\nbarman_user = barman\nconfiguration_files_directory = /etc/barman.d\nbarman_home = /var/lib/barman\nlog_file = /var/log/barman/barman.log\nlog_level = INFO\ncompression = gzip\n</code></pre>"},{"location":"configuring/configuration_examples/#server-configuration-file-for-streaming-backup","title":"Server configuration file for streaming backup","text":"<pre><code>**[streaming-pg]**\ndescription = \"Example of PostgreSQL Database (Streaming-Only)\"\nconninfo = host=pg user=barman dbname=postgres\nstreaming_conninfo = host=pg user=streaming_barman\nbackup_method = postgres\nstreaming_archiver = **on**\nslot_name = barman\n</code></pre>"},{"location":"configuring/configuration_examples/#configuration-model-with-a-set-of-overrides","title":"Configuration model with a set of overrides","text":"<p>In this example, the overrides are applied to the server with a cluster named streaming-pg:</p> <pre><code>**[streaming-pg:switchover]**\ncluster=streaming-pg\nmodel=**true**\nconninfo = host=pg-2 user=barman dbname=postgres\nstreaming_conninfo = host=pg-2 user=streaming_barman\n</code></pre>"},{"location":"configuring/configuration_examples/#traditional-backup-using-rsyncssh","title":"Traditional backup using rsync/SSH","text":"<pre><code>**[ssh-pg]**\ndescription = \"Example of PostgreSQL Database (via Ssh)\"\nssh_command = ssh postgres@pg\nconninfo = host=pg user=barman dbname=postgres\nbackup_method = rsync\n```parallel_jobs = 1``` \nreuse_backup = link\narchiver = **on**\n</code></pre>"},{"location":"configuring/configuration_examples/#full-configuration-file","title":"Full configuration file","text":"<pre><code>[barman]\n; Main directory\nbarman_home = /var/lib/barman\n; System user\nbarman_user = barman\n; Log location\nlog_file = /var/log/barman/barman.log\n; Default compression level\n;compression = gzip\n; Incremental backup\nreuse_backup = link\n; 'main' PostgreSQL Server configuration\n[main]\n; Human readable description\ndescription =  \"Main PostgreSQL Database\"\n; SSH options\nssh_command = ssh postgres@pg\n; PostgreSQL connection string\nconninfo = host=pg user=postgres\n; PostgreSQL streaming connection string\nstreaming_conninfo = host=pg user=postgres\n; Minimum number of required backups (redundancy)\nminimum_redundancy = 1\n; Retention policy (based on redundancy)\nretention_policy = REDUNDANCY 2\n</code></pre>"},{"location":"configuring/configuration_files/","title":"Configuration Files","text":"<p>Barman has the following three types of configuration files:</p> File type Location Notes Global / General / Main <code>/etc/barman.conf</code> or <code>/etc/barman/barman.conf</code> Contains general options such as main directory, system user, log file, and so on. Server <code>/etc/barman.d</code> Must have a .conf suffix.  There's a configuration file for each server that gets backed up by Barman. Model <code>/etc/barman.d</code> Must have a .conf suffix. <ul> <li>The configuration file location can be overridden on a per-user level by <code>$HOME/.barman.conf</code>.</li> <li>Configuration files follow the INI format.  </li> <li>Rows starting with <code>;</code> are comments.</li> </ul> <p>Note</p> <p>Models define a set of configuration overrides which can be applied on top of the configuration of Barman servers that are part of the same cluster as the model, through the <code>barman config-switch</code> command.</p> <p>Important</p> <p>For historical reasons, you can still have one single configuration file containing both global as well as server and model options. However, for maintenance reasons, this approach is deprecated.</p>"},{"location":"configuring/configuration_files/#configuration-file-directory","title":"Configuration file directory","text":"<p>Barman supports the inclusion of multiple configuration files, through the <code>configuration_files_directory</code> option. Included files must contain only server specifications, not global configurations. If the value of <code>configuration_files_directory</code> is a directory, Barman reads all files with <code>.conf</code> extension that exist in that folder. For example, if you set it to <code>/etc/barman.d</code>, you can specify your PostgreSQL servers placing each section in a separate <code>.conf</code> file inside the <code>/etc/barman.d</code> folder.</p>"},{"location":"configuring/configuration_files/#configuration-file-parameters","title":"Configuration file parameters","text":"<p>Configuration files accept distinct types of parameters:</p> <ul> <li>string</li> <li>enum</li> <li>integer</li> <li>boolean (Accepts <code>on/true/1</code> and <code>off/false/0</code>).</li> </ul> <p>Parameters don't need to be quoted.</p> <p>Note</p> <p>Some enum allows off but not false.</p>"},{"location":"configuring/configuration_files/#configuration-file-options-scope","title":"Configuration file options scope","text":"<p>Every configuration option has a scope:</p> <ul> <li>global</li> <li>server</li> <li>model</li> <li>global/server: server options that can be generally set at global level</li> </ul>"},{"location":"configuring/configuration_files/#global","title":"Global","text":"<p>Global options are allowed in the general section, which is identified in the INI file by the [barman] label:</p> <pre><code>**[barman]**\n*; ... global and global/server options go here*\n</code></pre>"},{"location":"configuring/configuration_files/#server","title":"Server","text":"<p>Server options can only be specified in a server section, which is identified by a line in the configuration file, in square brackets (<code>[</code> and <code>]</code>). The server section represents the ID of that server in Barman. </p> <p>For example, the following specifies a section for the server named pg, which belongs to the my-cluster cluster: <pre><code>**[pg]**\ncluster=my-cluster\n*; Configuration options for the server named 'pg' go here*\n</code></pre></p>"},{"location":"configuring/configuration_files/#model","title":"Model","text":"<p>Model options can only be specified in a model section, which is identified the same way as a server section. There can't be any conflicts among the identifier of server sections and model sections. </p> <p>For example, the following specifies a section for the model named pg:switchover, which belongs to the my-cluster cluster: <pre><code>**[pg:switchover]**\ncluster=my-cluster\nmodel=**true**\n*; Configuration options for the model named 'pg:switchover', \n*; which belongs to the server which is configured with the option 'cluster=pg', go here*\n</code></pre></p>"},{"location":"configuring/configuration_files/#reserved-words","title":"Reserved words","text":"<p>The following two reserved words can't be used as server names or as model names in Barman:</p> <ul> <li>barman: identifier of the global section</li> <li>all: a shortcut that allows you to execute some commands in sequence on every server managed by Barman</li> </ul>"},{"location":"configuring/configuration_files/#overrides","title":"Overrides","text":"<p>Barman implements the convention over configuration design paradigm, which attempts to reduce the number of options that you're required to configure, without losing flexibility. Some server options can be defined at global level and overridden at server level, allowing you to specify a generic behavior and refine it for one or more servers. These options have a global/server scope.</p>"},{"location":"configuring/configuring_new_server/","title":"Configuring a new server","text":"<p>To configure a new server, use the following steps. The following conventions are used:</p> Name Description <code>pg</code> The server ID and host name where PostgreSQL is installed <code>backup</code> The host name where Barman is located <code>barman</code> The user running Barman on the backup server (identified by the parameter <code>barman_user</code> in the configuration) <code>postgres</code> The user running PostgreSQL on the <code>pg</code> server <p>Important</p> <p>A server in Barman must refer to the same PostgreSQL instance for the whole backup and recoverability history (i.e. the same system identifier).  </p> <p>If you perform an upgrade of the instance, for example, with pg_upgrade, don't reuse the same server definition in Barman.</p>"},{"location":"configuring/configuring_new_server/#requirements","title":"Requirements","text":"<p>Before setting up your PostgreSQL server in Barman, ensure you've met the following requirements:</p> <ul> <li>You've chosen a defined strategy for WAL archiving.</li> <li>You've chosen a defined strategy for backups methods.</li> </ul>"},{"location":"configuring/configuring_new_server/#postgresql-connection","title":"PostgreSQL connection","text":"<p>This connection is required by Barman in order to coordinate its activities with the server, as well as for monitoring purposes.</p> <p>Ensure one of the following:</p> <ul> <li>The backup server can connect to the PostgreSQL server on pg as superuser.</li> <li>The correct set of privileges are granted to the user that connects to the database.</li> </ul>"},{"location":"configuring/configuring_new_server/#create-a-user","title":"Create a user","text":"<p>To create a specific superuser in PostgreSQL, named barman, use the following command: <pre><code>postgres@pg\\$ createuser -s -P barman\n</code></pre></p> <p>Alternatively, create a normal user with the required set of privileges with the following commands: <pre><code>postgres@pg\\$ createuser -P barman\n</code></pre> <pre><code>GRANT EXECUTE ON FUNCTION pg_start_backup(text, boolean, boolean) to barman;\nGRANT EXECUTE ON FUNCTION pg_stop_backup() to barman;\nGRANT EXECUTE ON FUNCTION pg_stop_backup(boolean, boolean) to barman;\nGRANT EXECUTE ON FUNCTION pg_switch_wal() to barman;\nGRANT EXECUTE ON FUNCTION pg_create_restore_point(text) to barman;\nGRANT pg_read_all_settings TO barman;\nGRANT pg_read_all_stats TO barman;\n</code></pre></p>"},{"location":"configuring/configuring_new_server/#differences-between-versions","title":"Differences between versions","text":"<ul> <li>In PostgreSQL 15 beta and higher PostgreSQL versions, the functions <code>pg_start_backup</code> and <code>pg_stop_backup</code> have been renamed and have different signatures. Replace the first three lines in the previous command block with: <pre><code>GRANT EXECUTE ON FUNCTION pg_backup_start(text, boolean) to barman;\nGRANT EXECUTE ON FUNCTION pg_backup_stop(boolean) to barman;\n</code></pre></li> <li>For PostgreSQL version 13 and lower without a real superuser, the <code>--force</code> option of the <code>barman switch-wal</code> command won't work.  </li> <li>For PostgreSQL version 14 or higher, you can grant the <code>pg_checkpoint</code> role, so you can use this feature without a superuser: <pre><code>GRANT pg_checkpoint TO barman;\n</code></pre></li> </ul> <p>Important</p> <p>The <code>createuser</code> command will prompt for a password.  It's recommended to add the password to the <code>\\~barman/.pgpass</code> file on the backup server. For more information, see \"The Password File\" in the PostgreSQL documentation.</p>"},{"location":"configuring/configuring_new_server/#client-authentication","title":"Client authentication","text":"<p>You can choose your preferred client authentication method from those offered by PostgreSQL. For more information, see \"Client Authentication\" in the PostgreSQL documentation.</p>"},{"location":"configuring/configuring_new_server/#verify-connection","title":"Verify connection","text":"<p>Run the following command as the barman user on the backup host to verify that it can connect to PostgreSQL on the pg host:</p> <p><pre><code>barman@backup\\$ psql -c 'SELECT version()' -U barman -h pg postgres\n</code></pre> Save the output (user name, host name and database name) to use within the <code>conninfo</code> option for your server configuration.  </p> <p>For example: <pre><code>**[pg]**\n*; ...*\nconninfo = host=pg user=barman dbname=postgres application_name=myapp\n</code></pre></p> <p>Note</p> <p><code>application_name</code> is optional.</p>"},{"location":"configuring/configuring_options/","title":"Configuration options","text":"<p>The following options are available:</p> Option Default Scope <code>active</code> True Server/Model Description When set to true, the server is in full operational state. When set to false, the server can be used for diagnostics, but any operational command such as backup execution or WAL archiving is temporarily disabled. When adding a new server to Barman, we suggest setting <code>active=false</code> at first, making sure that barman check shows no problems, and only then activating the server. This will avoid spamming the Barman logs with errors during the initial setup. Option Default Scope <code>archiver</code> False Global/Server/Model Description This option allows you to activate log file shipping through PostgreSQL's <code>archive_command</code> for a server. If set to true, Barman expects that continuous archiving for a server is in place and will activate checks as well as management (including compression) of WAL files that Postgres deposits in the incoming directory. Setting it to false (default), will disable standard continuous archiving for a server. Note: If neither <code>archiver</code> nor <code>streaming_archiver</code> are set, Barman will automatically set this option to true. This is in order to maintain parity with deprecated behaviour where archiver would be enabled by default. This behaviour will be removed from the next major Barman version. Option Default Scope <code>archiver_batch_size</code> Global/Server/Model Description This option allows you to activate batch processing of WAL files for the archiver process, by setting it to a value &gt; 0. Otherwise, the traditional unlimited processing of the WAL queue is enabled. When batch processing is activated, the archive-wal process would limit itself to maximum <code>archiver_batch_size</code> WAL segments per single run. Integer. Option Default Scope <code>autogenerate_manifest</code> Global/Server/Model Description This option enables the auto-generation of backup manifest files for rsync based backups and strategies. The manifest file is a JSON file containing the list of files contained in the backup. It is generated at the end of the backup process and stored in the backup directory. The manifest file generated follows the format described in the postgesql documentation, and is compatible with the <code>pg_verifybackup</code> tool. The option is ignored if the backup method is not rsync. Option Default Scope <code>aws_profile</code> Global/Server/Model Description The name of the AWS profile to use when authenticating with AWS (e.g. INI section in AWS credentials file). Option Default Scope <code>aws_region</code> Global/Server/Model Description The name of the AWS region containing the EC2 VM and storage volumes defined by <code>snapshot_instance</code> and <code>snapshot_disks</code>. Option Default Scope <code>azure_credential</code> Global/Server/Model Description The credential type (either <code>azure-cli</code> or `managed-identity) to use when authenticating with Azure. If this is omitted then the default Azure authentication flow will be used. Option Default Scope <code>azure_resource_group</code> Global/Server/Model Description The name of the Azure resource group to which the compute instance and disks defined by <code>snapshot_instance</code> and <code>snapshot_disks</code> belong. Required when the snapshot value is specified for backup_method and snapshot_provider is set to azure. Option Default Scope <code>azure_subscription_id</code> Global/Server/Model Description The ID of the Azure subscription which owns the instance and storage volumes defined by <code>snapshot_instance</code> and <code>snapshot_disks</code>. Required when the snapshot value is specified for <code>backup_method</code> and <code>snapshot_provider</code> is set to azure. Option Default Scope <code>backup_compression</code> Global/Server/Model Description The compression to be used during the backup process. Only supported when <code>backup_method = postgres</code>. Can either be unset or gzip,lz4, zstd or none. If unset then no compression will be used during the backup. Use of this option requires that the CLI application for the specified compression algorithm is available on the Barman server (at backup time) and the PostgreSQL server (at recovery time). Note that the lz4 and zstd algorithms require PostgreSQL 15 (beta) or later. Note that none compression will create an archive not compressed. Option Default Scope <code>backup_compression_format</code> Global/Server/Model Description The format <code>pg_basebackup</code> should use when writing compressed backups to disk. Can be set to either <code>plain</code> or <code>tar</code>. If unset then a default of <code>tar</code> is assumed. The value <code>plain</code> can only be used if the server is running PostgreSQL 15 or later and if <code>backup_compression_location</code> is server. Only supported when <code>backup_method = postgres</code>. Option Default Scope <code>backup_compression_level</code> Global/Server/Model Description An integer value representing the compression level to use when compressing backups. Allowed values depend on the compression algorithm specified by <code>backup_compression</code>. Only supported when <code>backup_method = postgres.</code> Option Default Scope <code>backup_compression_location</code> Global/Server/Model Description The location (either client or server) where compression should be performed during the backup. The value server is only allowed if the server is running PostgreSQL 15 or later. Option Default Scope <code>backup_compression_workers</code> 0 Global/Server/Model Description The number of compression threads to be used during the backup process. Only supported when <code>backup_compression = zstd</code> is set.  In this case default compression behavior will be used. Option Default Scope <code>backup_directory</code> Server Description Directory where backup data for a server will be placed. Option Default Scope <code>backup_method</code> Global/Server/Model Description Configure the method barman used for backup execution. If set to rsync (default), barman will execute backup using the rsync command over SSH (requires ssh_command). If set to postgres barman will use the pg_basebackup command to execute the backup. If set to local-rsync, barman will assume to be running on the same server as the PostgreSQL instance and with the same user, then execute rsync for the file system copy. If set to snapshot, barman will use the API for the cloud provider defined in the snapshot_provider option to create snapshots of disks specified in the snapshot_disks option and save only the backup label and metadata to its own storage. Option Default Scope <code>backup_options</code> Description This option allows you to control the way Barman interacts with PostgreSQL for backups. It is a comma-separated list of values that accepts the following options: Option Default Scope <code>concurrent_backup</code> Global/Server/Model Description <code>barman backup</code> executes backup operations using concurrent backup which is the recommended backup approach for PostgreSQL versions &gt;= 9.6 and uses the PostgreSQL API. <code>concurrent_backup</code> can also be used to perform a backup from a standby server. <code>exclusive_backup</code> (PostgreSQL versions older than 15 only): barman backup executes backup operations using the deprecated exclusive backup approach (technically through <code>pg_start_backup</code> and <code>pg_stop_backup</code>) <code>external_configuration</code>: if present, any warning regarding external configuration files is suppressed during the execution of a backup. Note that <code>exclusive_backup</code> and <code>concurrent_backup</code> are mutually exclusive. Option Default Scope <code>bandwidth_limit</code> 0 Global/Server/Model Description This option allows you to specify a maximum transfer rate in kilobytes per second. A value of zero specifies no limit. Option Default Scope <code>barman_home</code> Global Description Main data directory for Barman. Option Default Scope <code>barman_lock_directory</code> <code>%(barman_home)s</code> Global Description Directory for locks. Option Default Scope <code>basebackup_retry_sleep</code> 30 Global/Server/Model Description Number of seconds of wait after a failed copy, before retrying. Used during both backup and recovery operations. Positive integer. Option Default Scope <code>basebackup_retry_times</code> 0 Global/Server/Model Description Number of retries of base backup copy, after an error. Used during both backup and recovery operations. Positive integer. Option Default Scope <code>basebackups_directory</code> Server Description Directory where base backups will be placed. Option Default Scope <code>check_timeout</code> 30 Global/Server/Model Description Maximum execution time, in seconds per server, for a <code>barman check</code> command. Set to 0 to disable the timeout. Positive integer. Option Default Scope <code>cluster</code> Server/Model Description Name of the Barman cluster associated with a Barman server or model. Used by Barman to group servers and configuration models that can be applied to them. Can be omitted for servers, in which case it defaults to the server name. Must be set for configuration models, so Barman knows the set of servers which can apply a given model. Option Default Scope <code>compression</code> Description Standard compression algorithm applied to WAL files. Possible values are: gzip (requires gzip to be installed on the system), bzip2 (requires bzip2), pigz (requires pigz), pygzip (Python's internal gzip compressor) and pybzip2 (Python's internal bzip2 compressor). <p>Scope: Global/Server/Model.</p> Option Default Scope <code>config_changes_queue</code> Global Description Barman uses a queue to apply configuration changes requested through barman config-update command. This allows it to serialize multiple requests of configuration changes, and also retry an operation which has been abruptly terminated. This configuration option allows you to specify where in the filesystem the queue should be written. By default Barman writes to a file named <code>cfg_changes.queue</code> under <code>barman_home</code>. Option Default Scope <code>conninfo</code> Server/Model Description Connection string used by Barman to connect to the Postgres server. This is a libpq connection string, consult the PostgreSQL manual for more information. Commonly used keys are: <code>host, hostaddr, port, dbname, user, password</code>. Option Default Scope <code>create_slot</code> manual Global/Server/Model Description When set to auto and slot_name is defined, Barman automatically attempts to create the replication slot if not present. When set to manual, the replication slot needs to be manually created. Option Default Scope <code>custom_compression_filter</code> Global/Server/Model Description Customised compression algorithm applied to WAL files. Option Default Scope <code>custom_compression_magic</code> Global/Server/Model Description Customised compression magic which is checked in the beginning of a WAL file to select the custom algorithm. If you are using a custom compression filter then setting this will prevent barman from applying the custom compression to WALs which have been pre-compressed with that compression. If you do not configure this then custom compression will still be applied but any pre-compressed WAL files will be compressed again during WAL archive. Option Default Scope <code>custom_decompression_filter</code> Global/Server/Model Description Customized decompression algorithm applied to compressed WAL files. This must match the compression algorithm. Option Default Scope <code>description</code> Server/Model Description A human-readable description of a server. Option Default Scope <code>errors_directory</code> Server Description Directory that contains WAL files that contain an error; usually this is related to a conflict with an existing WAL file (e.g. a WAL file that has been archived after a streamed one). Option Default Scope <code>forward_config_path</code> false Global/Server/Model Description Parameter which determines whether a passive node should forward its configuration file path to its primary node during cron or sync-info commands. Set to <code>true</code> if you are invoking barman with the<code>-c/--config</code> option and your configuration is in the same place on both the passive and primary barman servers. Option Default Scope <code>gcp_project</code> Global/Server/Model Description The ID of the GCP project which owns the instance and storage volumes defined by <code>snapshot_instance</code> and <code>snapshot_disks</code>. Required when the snapshot value is specified for <code>backup_method</code> and <code>snapshot_provider</code> is set to <code>gcp</code>. Option Default Scope <code>gcp_zone</code> Server/Model Description The name of the availability zone where the compute instance and disks to be backed up in a snapshot backup are located. Required when the snapshot value is specified for <code>backup_method</code> and <code>snapshot_provider</code> is set to <code>gcp</code>. Option Default Scope <code>immediate_checkpoint</code> false Global/Server/Model Description This option allows you to control the way PostgreSQL handles checkpoint at the start of the backup. If set to <code>false</code>, the I/O workload for the checkpoint will be limited, according to the <code>checkpoint_completion_target</code> setting on the PostgreSQL server. If set to <code>true</code>, an immediate checkpoint will be requested, meaning that PostgreSQL will complete the checkpoint as soon as possible. Option Default Scope <code>incoming_wals_directory</code> Description Directory where incoming WAL files are archived into. Requires archiver to be enabled. Option Default Scope <code>last_backup_maximum_age</code> empty Global/Server/Model Description This option identifies a time frame that must contain the latest backup. If the latest backup is older than the time frame,  the <code>barman check</code> command will report an error to the user. If empty, the latest backup is always considered valid. The syntax for this option is: \"i (DAYS WEEKS MONTHS)\" where <code>i</code> is an integer greater than zero, representing the number of days Option Default Scope <code>last_backup_minimum_size</code> empty Global/Server/Model Description This option identifies lower limit to the acceptable size of the latest successful backup. If the latest backup is smaller than the specified size, the <code>barman check</code> command will report an error to the user. If empty, the latest backup is always considered valid. The syntax for this option is: \"i (k Ki M Option Default Scope <code>last_wal_maximum_age</code> empty Global/Server/Model Description This option identifies a time frame that must contain the latest WAL file archived. If the latest WAL file is older than the time frame, the <code>barman check</code> command will report an error to the user. If empty, the age of the WAL files is not checked. The syntax is the same as the <code>last_backup_maximum_age</code> option. Option Default Scope <code>lock_directory_cleanup</code> Global Description Enables automatic cleaning up of the <code>barman_lock_directory</code> from unused lock files. Option Default Scope <code>log_file</code> Global Description Location of Barman's log file. Option Default Scope <code>log_level</code> Global Description Level of logging (DEBUG, INFO, WARNING, ERROR, CRITICAL). Option Default Scope <code>max_incoming_wals_queue</code> Global/Server/Model Description Maximum number of WAL files in the incoming queue (in both streaming and archiving pools) that are allowed before barman check returns an error (that does not block backups). Default: None (disabled). Option Default Scope <code>minimum_redundancy</code> 0 Global/Server/Model Description Minimum number of backups to be retained. Option Default Scope <code>model</code> Model Description By default any section configured in the Barman configuration files define the configuration for a Barman server. If you set <code>model = true</code> in a section, that turns that section into a configuration model for a given cluster. Cannot be set as false. Option Default Scope <code>network_compression</code> false Global/Server/Model Description This option allows you to enable data compression for network transfers. If set to false, no compression is used. If set to true, compression is enabled, reducing network usage. Option Default Scope <code>parallel_jobs</code> 1 Global/Server/Model Description This option controls how many parallel workers will copy files during a backup or recovery command. For backup purposes, it works only when <code>backup_method</code> is rsync. Option Default Scope <code>parallel_jobs_start_batch_period</code> 1 second Global/Server/Model Description The time period in seconds over which a single batch of jobs will be started. Option Default Scope <code>parallel_jobs_start_batch_size</code> 10 jobs Global/Server/Model Description Maximum number of parallel jobs to start in a single batch. Option Default Scope <code>path_prefix</code> Global/Server/Model Description One or more absolute paths, separated by colon, where Barman looks for executable files. The paths specified in <code>path_prefix</code> are tried before the ones specified in <code>PATH</code> environment variable. Option Default Scope <code>post_archive_retry_script</code> Global/Server Description Hook script launched after a WAL file is archived by maintenance. Being this a retry hook script, Barman will retry the execution of the script until this either returns a SUCCESS (0), an ABORT_CONTINUE (62) or an ABORT_STOP (63) code. In a post archive scenario, ABORT_STOP has currently the same effects as ABORT_CONTINUE. Option Default Scope <code>post_archive_script</code> Global/Server Description Hook script launched after a WAL file is archived by maintenance, after 'post_archive_retry_script'. Option Default Scope <code>post_backup_retry_script</code> Global/Server Description Hook script launched after a base backup. Being this a retry hook script, Barman will retry the execution of the script until this either returns a SUCCESS (0), an ABORT_CONTINUE (62) or an ABORT_STOP (63) code. In a post backup scenario, ABORT_STOP has currently the same effects as ABORT_CONTINUE. Option Default Scope <code>post_backup_script</code> Global/Server Description Hook script launched after a base backup, after 'post_backup_retry_script'. Option Default Scope <code>post_delete_retry_script</code> Global/Server Description Hook script launched after the deletion of a backup. Being this a retry hook script, Barman will retry the execution of the script until this either returns a SUCCESS (0), an ABORT_CONTINUE (62) or an ABORT_STOP (63) code. In a post delete scenario, ABORT_STOP has currently the same effects as ABORT_CONTINUE. Option Default Scope <code>post_delete_script</code> Global/Server Description Hook script launched after the deletion of a backup, after 'post_delete_retry_script'. Option Default Scope <code>post_recovery_retry_script</code> Global/Server Description Hook script launched after a recovery. Being this a retry hook script, Barman will retry the execution of the script until this either returns a SUCCESS (0), an ABORT_CONTINUE (62) or an ABORT_STOP (63) code. In a post recovery scenario, ABORT_STOP has currently the same effects as ABORT_CONTINUE. Option Default Scope <code>post_recovery_script</code> Global/Server Description Hook script launched after a recovery, after 'post_recovery_retry_script'. Option Default Scope <code>post_wal_delete_retry_script</code> Global/Server Description Hook script launched after the deletion of a WAL file. Being this a retry hook script, Barman will retry the execution of the script until this either returns a SUCCESS (0), an ABORT_CONTINUE (62) or an ABORT_STOP (63) code. In a post delete scenario, ABORT_STOP has currently the same effects as ABORT_CONTINUE. Option Default Scope <code>post_wal_delete_script</code> Global/Server Description Hook script launched after the deletion of a WAL file, after 'post_wal_delete_retry_script'. Option Default Scope <code>pre_archive_retry_script</code> Global/Server Description Hook script launched before a WAL file is archived by maintenance, after 'pre_archive_script'. Being this a retry hook script, Barman will retry the execution of the script until this either returns a SUCCESS (0), an ABORT_CONTINUE (62) or an ABORT_STOP (63) code. Returning ABORT_STOP will propagate the failure at a higher level and interrupt the WAL archiving operation. Option Default Scope <code>pre_archive_script</code> Global/Server Description Hook script launched before a WAL file is archived by maintenance. Option Default Scope <code>pre_backup_retry_script</code> Global/Server Description Hook script launched before a base backup, after 'pre_backup_script'. Being this a retry hook script, Barman will retry the execution of the script until this either returns a SUCCESS (0), an ABORT_CONTINUE (62) or an ABORT_STOP (63) code. Returning ABORT_STOP will propagate the failure at a higher level and interrupt the backup operation. Option Default Scope <code>pre_backup_script</code> Global/Server Description Hook script launched before a base backup. Option Default Scope <code>pre_delete_retry_script</code> Global/Server Description Hook script launched before the deletion of a backup, after 'pre_delete_script'. Being this a retry hook script, Barman will retry the execution of the script until this either returns a SUCCESS (0), an ABORT_CONTINUE (62) or an ABORT_STOP (63) code. Returning ABORT_STOP will propagate the failure at a higher level and interrupt the backup deletion. Option Default Scope <code>pre_delete_script</code> Global/Server Description Hook script launched before the deletion of a backup. Option Default Scope <code>pre_recovery_retry_script</code> Global/Server Description Hook script launched before a recovery, after 'pre_recovery_script'. Being this a retry hook script, Barman will retry the execution of the script until this either returns a SUCCESS (0), an ABORT_CONTINUE (62) or an ABORT_STOP (63) code. Returning ABORT_STOP will propagate the failure at a higher level and interrupt the recover operation. Option Default Scope <code>pre_recovery_script</code> Global/Server Description Hook script launched before a recovery. Option Default Scope <code>pre_wal_delete_retry_script</code> Global/Server Description Hook script launched before the deletion of a WAL file, after 'pre_wal_delete_script'. Being this a retry hook script, Barman will retry the execution of the script until this either returns a SUCCESS (0), an ABORT_CONTINUE (62) or an ABORT_STOP (63) code. Returning ABORT_STOP will propagate the failure at a higher level and interrupt the WAL file deletion. Option Default Scope <code>pre_wal_delete_script</code> Global/Server Description Hook script launched before the deletion of a WAL file. Option Default Scope <code>primary_checkpoint_timeout</code> Server/Model Description This defines the amount of seconds that Barman will wait at the end of a backup if no new WAL files are produced, before forcing a checkpoint on the primary server.  If not set or set to 0, Barman will not force a checkpoint on the primary, and wait indefinitely for new WAL files to be produced.  The value of this option should be greater of the value of the <code>archive_timeout</code> set on the primary server.  This option works only if <code>primary_conninfo</code> option is set, and it is ignored otherwise. Option Default Scope <code>primary_conninfo</code> Server/Model Description The connection string used by Barman to connect to the primary Postgres server during backup of a standby Postgres server. Barman will use this connection to carry out any required WAL switches on the primary during the backup of the standby. This allows backups to complete even when <code>archive_mode = always</code> is set on the standby and write traffic to the primary is not sufficient to trigger a natural WAL switch.  If <code>primary_conninfo</code> is set then it must be pointing to a primary Postgres instance and conninfo must be pointing to a standby Postgres instance. Furthermore both instances must share the same systemid. If these conditions are not met then barman check will fail.  The <code>primary_conninfo</code> value must be a libpq connection string.  Consult the PostgreSQL manual for more information. Commonly used keys are: <code>host, hostaddr, port, dbname, user, password</code>. Option Default Scope <code>primary_ssh_command</code> Global/Server/Model Description Parameter that identifies a Barman server as passive. In a passive node, the source of a backup server is a Barman installation rather than a PostgreSQL server. If <code>primary_ssh_command</code> is specified, Barman uses it to establish a connection with the primary server. Empty by default, it can also be set globally. Option Default Scope <code>recovery_options</code> empty Global/Server/Model Description Options for recovery operations. Currently only supports get-wal. get-wal activates generation of a basic restore_command in the resulting recovery configuration that uses the barman get-wal command to fetch WAL files directly from Barman's archive of WALs. Comma separated list of values. Option Default Scope <code>recovery_staging_path</code> Global/Server/Model Description A path to a location on the recovery host (either the barman server or a remote host if <code>--remote-ssh-command</code> is also used) where files for a compressed backup will be staged before being uncompressed to the destination directory. Backups will be staged in their own directory within the staging path according to the following naming convention: \"barman-staging-SERVER_NAME-BACKUP_ID\". The staging directory within the staging path will be removed at the end of the recovery process. This option is required when recovering from compressed backups and has no effect otherwise. Option Default Scope <code>retention_policy</code> empty Global/Server/Model Description Policy for retention of periodic backups and archive logs. If left empty, retention policies are not enforced. For redundancy based retention policy use \"REDUNDANCY i\" (where i is an integer &gt; 0 and defines the number of backups to retain). For recovery window retention policy use \"RECOVERY WINDOW OF i DAYS\" or \"RECOVERY WINDOW OF i WEEKS\" or \"RECOVERY WINDOW OF i MONTHS\" where i is a positive integer representing, specifically, the number of days, weeks or months to retain your backups. Option Default Scope <code>retention_policy_mode</code> Global/Server/Model Description Currently only \"auto\" is implemented. Option Default Scope <code>reuse_backup</code> off Global/Server/Model Description This option controls incremental backup support. Possible values are: <code>off</code>: disabled; <code>copy</code>: reuse the last available backup for a server and create a copy of the unchanged files (reduce backup time); <code>link</code>: reuse the last available backup for a server and create a hard link of the unchanged files (reduce backup time and space). Requires operating system and file system support for hard links. Option Default Scope <code>slot_name</code> None Global/Server/Model Description Physical replication slot to be used by the <code>receive-wal</code> command when streaming_archiver is set to on. Option Default Scope <code>snapshot_disks</code> Server/Model Description A comma-separated list of disks which should be included in a backup taken using cloud snapshots. Required when the snapshot value is specified for <code>backup_method</code>. Option Default Scope <code>snapshot_instance</code> Server/Model Description The name of the VM or compute instance where the storage volumes are attached. Required when the snapshot value is specified for <code>backup_method</code>. Option Default Scope <code>snapshot_provider</code> Global/Server/Model Description The name of the cloud provider which should be used to create snapshots. Required when the snapshot value is specified for <code>backup_method</code>. Supported values: <code>gcp</code>. Option Default Scope <code>ssh_command</code> Server/Model Description Command used by Barman to login to the Postgres server via ssh. Option Default Scope <code>streaming_archiver</code> off Global/Server/Model Description This option allows you to use the PostgreSQL's streaming protocol to receive transaction logs from a server. If set to on, Barman expects to find <code>pg_receivewal</code> (known as <code>pg_receivexlog</code> prior to PostgreSQL 10) in the <code>PATH</code> (see <code>path_prefix option</code>) and that streaming connection for the server is working. This activates connection checks as well as management (including compression) of WAL files. If set to off, Barman will rely only on continuous archiving for a server WAL archive operations, eventually terminating any running <code>pg_receivexlog</code> for the server.  If neither <code>streaming_archiver</code> nor archiver are set, Barman will automatically set archiver to true. This is in order to maintain parity with deprecated behaviour where archiver would be enabled by default. This behaviour will be removed from the next major Barman version. Option Default Scope <code>streaming_archiver_batch_size</code> Global/Server/Model Description This option allows you to activate batch processing of WAL files for the <code>streaming_archiver</code> process, by setting it to a value &gt; 0. Otherwise, the traditional unlimited processing of the WAL queue is enabled. When batch processing is activated, the <code>archive-wal</code> process would limit itself to maximum <code>streaming_archiver_batch_size</code> WAL segments per single run. Integer. Option Default Scope <code>streaming_archiver_name</code> Global/Server/Model Description Identifier to be used as application_name by the <code>receive-wal</code> command. Only available with <code>pg_receivewal</code> (or <code>pg_receivexlog</code> &gt;= 9.3). By default it is set to <code>barman_receive_wal</code>. Option Default Scope <code>streaming_backup_name</code> <code>barman_streaming_backup</code> Global/Server/Model Description Identifier to be used as application_name by the pg_basebackup command. Option Default Scope <code>streaming_conninfo</code> <code>conninfo</code> Server/Model Description Connection string used by Barman to connect to the Postgres server via streaming replication protocol. Option Default Scope <code>streaming_wals_directory</code> Server Description Directory where WAL files are streamed from the PostgreSQL server to Barman. Requires <code>streaming_archiver</code> to be enabled. Option Default Scope <code>tablespace_bandwidth_limit</code> 0 Global/Server/Model Description This option allows you to specify a maximum transfer rate in kilobytes per second, by specifying a comma separated list of tablespaces (pairs TBNAME:BWLIMIT). A value of zero specifies no limit. Option Default Scope <code>wal_conninfo</code> Server/Model Description A connection string which, if set, will be used by Barman to connect to the Postgres server when checking the status of the replication slot used for receiving WALs. If left unset then Barman will use the connection string defined by <code>wal_streaming_conninfo</code>. If <code>wal_conninfo</code> is set but <code>wal_streaming_conninfo</code> is unset then <code>wal_conninfo</code> will be ignored. Option Default Scope <code>wal_retention_policy</code> Global/Server/Model Description Policy for retention of archive logs (WAL files). Currently only \"MAIN\" is available. Option Default Scope <code>wal_streaming_conninfo</code> Server/Model Description A connection string which, if set, will be used by Barman to connect to the Postgres server when receiving WAL segments via the streaming replication protocol. If left unset then Barman will use the connection string defined by <code>streaming_conninfo</code> for receiving WAL segments. Option Default Scope <code>wals_directory</code> Server Description Directory which contains WAL files."},{"location":"configuring/configuring_ssh/","title":"SSH connections","text":"<p>SSH is a protocol and a set of tools that allows you to open a remote shell to a remote server and copy files between the server and the local system. For more information, see \"SSH Essentials\" by Digital Ocean.</p> <p>SSH key exchange is a common practice used to implement secure passwordless connections between users on different machines. It's required for using rsync with WAL archiving and backups.</p> <p>Note</p> <p>This procedure isn't needed if you plan to use the streaming connection only to archive transaction logs and backup your PostgreSQL server.</p>"},{"location":"configuring/configuring_ssh/#configuring","title":"Configuring","text":""},{"location":"configuring/configuring_ssh/#ssh-configuration-of-the-postgres-user","title":"SSH configuration of the postgres user","text":"<p>To create an SSH key for the PostgreSQL user, log into the pg host as postgres and run the following command:</p> <p><pre><code>postgres@pg\\$ ssh-keygen -t rsa\n</code></pre> This key must be used to connect from hosts without providing a password, so don't enter a passphrase when creating the key pair.</p>"},{"location":"configuring/configuring_ssh/#ssh-configuration-of-the-barman-user","title":"SSH configuration of the barman user","text":"<p>To create an SSH key for the Barman user, log into the backup host as barman and run the following command: <pre><code>barman@backup\\$ ssh-keygen -t rsa\n</code></pre> This key must be used to connect from hosts without providing a password, so don't enter a passphrase when creating the key pair.</p>"},{"location":"configuring/configuring_ssh/#connectivity-from-postgresql-to-barman","title":"Connectivity from PostgreSQL to Barman","text":"<p>The SSH connection from the PostgreSQL server to the backup server is required to correctly archive WAL files using the <code>archive_command</code> setting.</p> <p>To connect from the PostgreSQL server to the backup server, the PostgreSQL public key must be added to the authorized keys of the backup server for the barman user.</p> <p>The public key to be authorized is stored inside the postgres user home directory in <code>.ssh/id_rsa.pub</code>, and its contents should be included in a file named <code>.ssh/authorized_keys</code> inside the home directory of the barman user in the backup server. </p> <p>If the <code>authorized_keys</code> file doesn't exist, create it.  The permissions of that file should be <code>600</code>.</p> <p>The following command should succeed without any output if the SSH key pair exchange has been completed successfully: <pre><code>postgres@pg\\$ ssh barman@backup -C true\n</code></pre></p>"},{"location":"configuring/configuring_ssh/#connectivity-from-barman-to-postgresql","title":"Connectivity from Barman to PostgreSQL","text":"<p>The SSH connection between the backup server and the PostgreSQL server is used for traditional backup over rsync. Just as with the connection from the PostgreSQL server to the backup server, authorize the public key of the backup server in the PostgreSQL server for the postgres user.</p> <p>The content of the file <code>.ssh/id_rsa.pub</code> in the Barman server should be added to the file named <code>.ssh/authorized_keys</code> in the PostgreSQL server. The permissions of that file should be <code>600</code>.</p> <p>The following command should succeed without any output if the key pair exchange has been completed successfully. <pre><code>barman@backup\\$ ssh postgres@pg -C true\n</code></pre></p>"},{"location":"configuring/configuring_streaming/","title":"Configuring streaming","text":""},{"location":"configuring/configuring_streaming/#postgresql-streaming-connection","title":"PostgreSQL streaming connection","text":"<p>If you plan to use WAL streaming or streaming backup, you need to setup a streaming connection. We recommend creating a specific user in PostgreSQL, named streaming_barman, as follows: <pre><code>postgres@pg\\$ createuser -P --replication streaming_barman\n</code></pre></p> <p>Security</p> <p>The <code>createuser</code> command will prompt for a password, which you are then advised to add to the <code>\\~barman/.pgpass</code> file on the backup server. For more information, see \"The Password File\" in the PostgreSQL documentation..</p> <p>You can manually verify that the streaming connection works through the following command: <pre><code>barman@backup\\$ psql -U streaming_barman -h pg \\\\\n\\-c \"IDENTIFY_SYSTEM\" \\\\\nreplication=1\n</code></pre> If the connection is working you should see a response containing the system identifier, current timeline ID, and current WAL flush location.  For example: <pre><code>systemid \\| timeline \\| xlogpos \\| dbname\n\\---------------------+----------+------------+--------\n7139870358166741016 \\| 1 \\| 1/330000D8 \\|\n(1 row)\n</code></pre> Ensure you're able to connect via streaming replication before proceeding.</p> <p>You also need to configure the <code>max_wal_senders</code> parameter in the PostgreSQL configuration file. The number of WAL senders depends on the PostgreSQL architecture you've implemented. This option represents the maximum number of concurrent streaming connections that the server will be allowed to manage.  For example:</p> <p><code>max_wal_senders = 2</code></p> <p>Another important parameter is <code>max_replication_slots</code>, which represents the maximum number of replication slots 5 that the server will be allowed to manage. This parameter is needed if you're planning to use the streaming connection to receive WAL files over the streaming connection.  For example:</p> <p><code>max_replication_slots = 2</code></p> <p>The values proposed for <code>max_replication_slots</code> and <code>max_wal_senders</code> here are only examples.  The values you'll use in your actual setup must be chosen after a careful evaluation of your architecture. For guidelines and clarification, see the PostgreSQL documentation.</p>"},{"location":"configuring/configuring_wal_archiving_replication/","title":"Configuring WAL Archiving and Replication","text":""},{"location":"configuring/configuring_wal_archiving_replication/#archiving-features","title":"Archiving features","text":""},{"location":"configuring/configuring_wal_archiving_replication/#wal-compression","title":"WAL compression","text":"<p>The <code>barman cron</code> command will compress WAL files if the compression option is set in the configuration file. This option allows five values:</p> Value Description Note <code>bzip2</code> Used for Bzip2 compression Requires the <code>bzip2</code> utility <code>gzip</code> Used for Gzip compression Requires the <code>gzip</code> utility <code>pybzip2</code> Used for Bzip2 compression Uses Python's internal compression module <code>pygzip</code> Used for Gzip compression Uses Python's internal compression module <code>pigz</code> Used for Pigz compression Requires the <code>pigz</code> utility <code>custom</code> Used for custom compression Requires configuring following options: <code>custom_compression_filter</code>, <code>custom_decompression_filter</code>, <code>custom_compression_magic</code> <p>Info</p> <p>All methods but <code>pybzip2</code> and <code>pygzip</code> require <code>barman archive-wal</code> to fork a new process.</p>"},{"location":"configuring/configuring_wal_archiving_replication/#synchronous-wal-streaming","title":"Synchronous WAL streaming","text":"<p>Barman can also reduce the Recovery Point Objective to zero, by collecting the transaction WAL files like a synchronous standby server would.</p> <p>To configure such a scenario, the Barman server must be configured to archive WALs via the streaming connection, and the <code>receive-walprocess</code> should figure as a synchronous standby of the PostgreSQL server.</p> <p>Use the following steps to configure it:</p> <ol> <li> <p>Retrieve the application name of the Barman <code>receive-wal</code> process with the <code>show-servers</code> command: <pre><code>barman@backup\\$ barman show-servers pg**\\|**grep streaming_archiver_name\nstreaming_archiver_name: barman_receive_wal\n</code></pre></p> </li> <li> <p>Add the application name to the <code>postgresql.conf</code> file as a synchronous standby: <pre><code>synchronous_standby_names = 'barman_receive_wal'\n</code></pre></p> </li> <li>Restart the PostgreSQL server for the configuration to be reloaded.</li> </ol> <p>Success</p> <p>If the server has been configured correctly, the <code>replication-status</code> command should show the <code>receive_wal</code> process as a synchronous streaming client:</p> <pre><code>[root@backup \\~]\\# barman replication-status pg\nStatus of streaming clients for server 'pg':\nCurrent xlog location on master: 0/9000098\nNumber of streaming clients: 1\n1\\. *\\#1 Sync WAL streamer*\nApplication name: barman_receive_wal\nSync stage : 3/3 Remote write\nCommunication : TCP/IP\nIP Address : 139.59.135.32 / Port: 58262 / Host: -\nUser name : streaming_barman\nCurrent state : streaming (sync)\nReplication slot: barman\nWAL sender PID : 2501\nStarted at : 2016-09-16 10:33:01.725883+00:00\nSent location : 0/9000098 (diff: 0 B)\nWrite location : 0/9000098 (diff: 0 B)\nFlush location : 0/9000098 (diff: 0 B)\n</code></pre> <p>Important</p> <p>This is only an example of configuration, to show you that Barman is eligible to be a synchronous standby node. It doesn't imply to use ONLY Barman. You can read \"Synchronous Replication\" from the PostgreSQL documentation for further information on this topic.</p>"},{"location":"configuring/configuring_wal_archiving_replication/#catalog-management-features","title":"Catalog management features","text":""},{"location":"configuring/configuring_wal_archiving_replication/#minimum-redundancy-safety","title":"Minimum redundancy safety","text":"<p>You can define the minimum number of periodic backups for a PostgreSQL server, using the global/per server configuration option  <code>minimum_redundancy</code>.  It is set to 0 by default.</p> <p>When set to any number greater than 0, Barman makes sure that at any time, you'll have at least that number of backups in a server catalog.</p> <p>This can protect from accidental <code>barman delete</code> operations.</p> <p>Important</p> <p>Make sure that your retention policy settings don't collide with minimum redundancy requirements. Regularly check Barman's log for messages on this topic.</p>"},{"location":"configuring/configuring_wal_archiving_replication/#retention-policies","title":"Retention policies","text":"<p>Barman supports retention policies for backups.</p> <p>A backup retention policy is a user-defined policy that determines how long backups and related archive logs (Write Ahead Log segments) need to be retained for recovery procedures.</p> <p>Barman can retain the periodic backups required to satisfy the current retention policy and any archived WAL files required for the complete recovery of those backups.</p> <p>You can define a retention policy in terms of backup redundancy (how many periodic backups) or a recovery window (how long).</p>"},{"location":"configuring/configuring_wal_archiving_replication/#retention-policy-based-on-redundancy","title":"Retention policy based on redundancy","text":"<p>With a redundancy-based retention policy, you can determine how many periodic backups to keep. A redundancy-based retention policy is contrasted with retention policies that use a recovery window.</p>"},{"location":"configuring/configuring_wal_archiving_replication/#retention-policy-based-on-recovery-window","title":"Retention policy based on recovery window","text":"<p>A recovery window is one type of Barman backup retention policy, in which you specify a period of time and Barman ensures retention of backups and/or archived WAL files required for point-in-time recovery to any time during the recovery window. The interval always ends with the current time and extends back in time for the number of days specified by the user. </p> <p>For example, if the retention policy is set for a recovery window of seven days, and the current time is 9:30 AM on Friday, Barman retains the backups required to allow point-in-time recovery back to 9:30 AM on the previous Friday.</p>"},{"location":"configuring/configuring_wal_archiving_replication/#scope","title":"Scope","text":"<p>Retention policies can be defined for:</p> <ul> <li>PostgreSQL periodic base backups: through the <code>retention_policy</code> configuration option</li> <li>Archive logs for Point-In-Time-Recovery: through the <code>wal_retention_policy</code> configuration option</li> </ul> <p>Important</p> <p>In a temporal dimension, archive logs must be included in the time window of periodic backups.</p> <p>The two typical use cases are full or partial point-in-time recovery.</p> <p>Full point in time recovery scenario</p> <ul> <li>The base backups and archive logs share the same retention policy, allowing you to recover at any point in time from the first available backup.</li> </ul> <p>Partial point in time recovery scenario</p> <ul> <li>The base backup retention policy is wider than that of archive logs.  You can keep full or weekly backups of the last six months, but archive logs for the last four weeks (granting to recover at any point in time starting from the last four periodic weekly backups).</li> </ul> <p>Info</p> <p>Barman implements only the full point in time recovery scenario, by constraining the <code>wal_retention_policy</code> option to <code>main</code>.</p>"},{"location":"configuring/configuring_wal_archiving_replication/#how-retention-policies-work","title":"How retention policies work","text":"<p>Retention policies in Barman can be:</p> <ul> <li>automated: Enforced by <code>barman cron</code>.</li> <li>manual: Barman reports obsolete backups and allows you to delete them.</li> </ul> <p>Info</p> <p>Barman doesn't implement manual enforcement. This feature is planned for future versions.</p>"},{"location":"configuring/configuring_wal_archiving_replication/#configuration-and-syntax","title":"Configuration and syntax","text":"<p>Retention policies can be defined through the following configuration options:</p> Option Description <code>retention_policy</code> For base backup retention <code>wal_retention_policy</code> For archive logs retention <code>retention_policy_mode</code> Can only be set to <code>auto</code> (retention policies are automatically enforced by the <code>barman cron</code> command) <p>These configuration options can be defined both at a global level and a server level, allowing maximum flexibility in a multi-server environment.</p>"},{"location":"configuring/configuring_wal_archiving_replication/#syntax-for-retention_policy","title":"Syntax for <code>retention_policy</code>","text":"<p>The general syntax for a base backup retention policy through <code>retention_policy</code> is: <pre><code>retention_policy = {REDUNDANCY value \\| RECOVERY WINDOW OF value {DAYS \\| WEEKS \\| MONTHS}}\n</code></pre> Where:</p> <ul> <li>Syntax is case insensitive</li> <li>Value is an integer and is &gt; 0</li> </ul> <p>redundancy retention policy</p> <ul> <li><code>value</code> must be greater than or equal to the server minimum redundancy level.  If that value isn't assigned, a warning is generated. The first valid backup is the value of the backup in a reverse-ordered time series.</li> </ul> <p>recovery window policy</p> <ul> <li>The point of recoverability is: (current time - window - the first valid backup is the first available backup before the point of recoverability). Its value in a reverse-ordered time series must be greater than or equal to the server minimum redundancy level.  If it isn't assigned to that value, a warning is generated.</li> </ul> <p>By default, <code>retention_policy</code> is empty (no retention enforced).</p>"},{"location":"configuring/configuring_wal_archiving_replication/#syntax-for-wal_retention_policy","title":"Syntax for <code>wal_retention_policy</code>","text":"<p>The only allowed value for <code>wal_retention_policy</code> is the value <code>main</code>.  It maps the retention policy of archive logs to that of base backups.</p>"},{"location":"configuring/configuring_wal_archiving_replication/#setting-up","title":"Setting up","text":"<p>Before proceeding, ensure you've properly configured PostgreSQL on pg to accept streaming replication connections from the Barman server.  For more information, see the following sections in the PostgreSQL documentation:</p> <ul> <li>Role attributes</li> <li>The pg_hba.conf file</li> <li>Setting up standby servers using streaming replication</li> </ul> <p>Use the following steps to set it up:</p> <ol> <li>Configure the <code>wal_level</code> parameter to ensure that all the useful information necessary for a backup to be coherent are included in the transaction log file: <pre><code>wal_level = 'replica'\\|'logical'\n</code></pre></li> <li>Restart the PostgreSQL server for the configuration to be reloaded.</li> </ol>"},{"location":"configuring/configuring_wal_archiving_replication/#server-configuration-file","title":"Server configuration file","text":"<p>Create a new file, called <code>pg.conf</code> in the <code>/etc/barman.d</code> directory, with the following content: <pre><code>**[pg]**\ndescription = \"Our main PostgreSQL server\"\nconninfo = host=pg user=barman dbname=postgres\nbackup_method = postgres\n*\\# backup_method = rsync*\n</code></pre> The <code>conninfo</code> option is set accordingly to the section \"Preliminary steps: PostgreSQL connection\".</p> <p>If you plan to use the streaming connection for WAL archiving or to create a backup of your server, add the <code>streaming_conninfo</code> parameter in your server configuration file: <pre><code>streaming_conninfo = host=pg user=streaming_barman dbname=postgres\n</code></pre> This value must be chosen accordingly as described in the section \"Preliminary steps: PostgreSQL connection\".</p>"},{"location":"configuring/configuring_wal_streaming/","title":"Configuring WAL Streaming","text":"<p>Barman can reduce the Recovery Point Objective (RPO) by allowing users to add continuous WAL streaming from a PostgreSQL server, on top of the standard archive_command strategy.</p> <p>Barman relies on pg_receivewal.  It exploits the native streaming replication protocol and continuously receives transaction logs from a PostgreSQL server (master or standby). </p> <p>Info</p> <p>Prior to PostgreSQL 10, <code>pg_receivewal</code> was named <code>pg_receivexlog</code>.</p> <p>Important</p> <p>Barman requires that <code>pg_receivewal</code> is installed on the same server. It's recommended to install the latest available version of <code>pg_receivewal</code>, as it is back compatible. Otherwise, users can install multiple versions of <code>pg_receivewal</code> on the Barman server and properly point to the specific version for a server, using the <code>path_prefix</code> option in the configuration file.</p>"},{"location":"configuring/configuring_wal_streaming/#enable-transaction-log-streaming","title":"Enable transaction log streaming","text":"<p>To enable streaming of transaction logs:</p> <ol> <li>Set up a streaming connection.</li> <li>Set the <code>streaming_archiver</code> option to <code>on</code>.</li> </ol> <p>Tip</p> <p>The <code>cron</code> command transparently manages log streaming through the execution of the <code>receive-wal</code> command. This is the recommended scenario.</p> <p>Alternatively, you can manually execute the <code>receive-wal</code> command: <pre><code>barman receive-wal \\&lt;server_name\\&gt;\n</code></pre></p> <p>Info</p> <p>The <code>receive-wal</code> command is a foreground process.</p> <p>Transaction logs are streamed directly in the directory specified by the <code>streaming_wals_directory</code> configuration option. They are then archived by the <code>archive-wal</code> command.</p> <p>Unless otherwise specified in the <code>streaming_archiver_name</code> parameter, Barman will set the <code>application_name</code> of the WAL streamer process to <code>barman_receive_wal</code>.  This allows you to monitor the status in the <code>pg_stat_replication</code> system view of the PostgreSQL server.</p>"},{"location":"configuring/configuring_wal_streaming/#replication-slots","title":"Replication slots","text":"<p>Replication slots are an automated way to ensure that the PostgreSQL server won't remove WAL files until they're received by all archivers. Barman uses this mechanism to receive transaction logs from PostgreSQL.</p> <p>For more information about replication slots, see the PostgreSQL manual.</p> <p>You can base your backup architecture on streaming connection only. This scenario is useful to configure Docker-based PostgreSQL servers and to work with PostgreSQL servers running on Windows.</p> <p>Warning</p> <p>Microsoft Windows support is still experimental, as it is not yet part of our continuous integration system.</p>"},{"location":"configuring/configuring_wal_streaming/#configuring-wal-streaming","title":"Configuring WAL streaming","text":"<p>The PostgreSQL server must be configured to stream the transaction log files to the Barman server.</p> <p>To configure the streaming connection from Barman to the PostgreSQL server, enable the <code>streaming_archiver</code> by adding this line in the server configuration file: <pre><code>streaming_archiver = **on**\n</code></pre> If you plan to use replication slots (recommended), another essential option for the setup of the streaming-based transaction log archiving is the <code>slot_name</code> option: <pre><code>slot_name = barman\n</code></pre> This option defines the name of the replication slot that will be used by Barman. It is required for using replication slots.</p> <p>When configuring the replication slot name, you can manually create a replication slot for Barman with this command: <pre><code>barman@backup\\$ barman receive-wal --create-slot pg\nCreating physical replication slot 'barman' on server 'pg'\nReplication slot 'barman' created\nStarting with Barman 2.10, you can configure Barman to automatically create the replication slot by setting:\ncreate_slot = auto\n</code></pre></p>"},{"location":"configuring/configuring_wal_streaming/#streaming-wals-and-backups-from-different-hosts","title":"Streaming WALs and backups from different hosts","text":"<p>Note</p> <p>This is supported only for Barman 3.10.0 and higher versions.</p> <p>Barman uses the connection info defined in <code>streaming_conninfo</code> when creating <code>pg_receivewal</code> processes to stream WAL segments and uses <code>conninfo</code> when checking the status of replication slots. As <code>conninfo</code> and <code>streaming_conninfo</code> are also used when taking backups, this default configuration forces Barman to stream WALs and take backups from the same host.</p> <p>If an alternative configuration is required, such as backups being sourced from a standby with WALs being streamed from the primary, then you can use the following options:</p> <ul> <li><code>wal_streaming_conninfo</code>: A connection string which Barman will use instead of streaming_conninfo when receiving WAL segments via the streaming replication protocol and when checking the status of the replication slot used for receiving WALs.</li> <li><code>wal_conninfo</code>: An optional connection string specifically for monitoring WAL streaming status and performing related checks. If set, Barman will use this instead of <code>wal_streaming_conninfo</code> when checking the status of the replication slot.</li> </ul>"},{"location":"configuring/configuring_wal_streaming/#restrictions","title":"Restrictions","text":"<p>The following restrictions apply and are enforced by Barman during checks:</p> <ul> <li>Connections defined by <code>wal_streaming_conninfo</code> and <code>wal_conninfo</code> must reach a PostgreSQL instance which belongs to the same cluster reached by the <code>streaming_conninfo</code> and <code>conninfo</code> connections.</li> <li>The <code>wal_streaming_conninfo</code> connection string must be able to create streaming replication connections.</li> <li>Either <code>wal_streaming_conninfo</code> or <code>wal_conninfo</code>, if it is set, must have permissions to read settings and check replication slot status. The required permissions can be any of:<ul> <li>The <code>pg_monitor</code> role.</li> <li>Both the <code>pg_read_all_settings</code> and <code>pg_read_all_stats roles</code>.</li> <li>The <code>superuser</code> role.</li> </ul> </li> </ul> <p>Tip</p> <p>While it's possible to stream WALs from any PostgreSQL instance in a cluster, there's a risk that WAL segments can be lost when streaming WALs from a standby, if the standby is unable to keep up with its own upstream source. It's recommended that WALs are always streamed directly from the primary.</p>"},{"location":"configuring/configuring_wal_streaming/#limitations-of-partial-wal-files-with-recovery","title":"Limitations of partial WAL files with recovery","text":"<p>The standard behaviour of <code>pg_receivewal</code> is to write transactional information in a file with <code>.partial</code> suffix after the WAL segment name.</p> <p>Barman expects a partial file to be in the <code>streaming_wals_directory</code> of a server. When completed, <code>pg_receivewal</code> removes the <code>.partial</code> suffix and opens the following one, delivering the file to the <code>archive-wal</code> command of Barman for permanent storage and compression.</p> <p>In the case of a sudden and unrecoverable failure of the master PostgreSQL server, the <code>.partial</code> file that has been streamed to Barman contains very important information that the standard archiver (through PostgreSQL's <code>archive_command</code>) has not been able to deliver to Barman.</p> <p>As of Barman version 2.10, the <code>get-wal</code> command is able to return the content of the current <code>.partial</code> WAL file through the <code>--partial/-P</code> option. This is useful in the case of recovery, either full or point in time. If you run a <code>recover</code> command with <code>get-wal</code> enabled, and without <code>--standby-mode</code>, Barman will automatically add the <code>-P</code> option to <code>barman-wal-restore</code>.  It will then relay that to the remote <code>get-wal</code> command in the <code>restore_command</code> recovery option.</p> <p><code>get-wal</code> will also search in the incoming directory, in case a WAL file has already been shipped to Barman, but not yet archived.</p>"},{"location":"configuring/configuring_wal_streaming/#wal-archiving-via-archive_command","title":"WAL archiving via <code>archive_command</code>","text":"<p>The <code>archive_command</code> is the traditional method to archive WAL files.</p> <p>The value of this PostgreSQL configuration parameter must be a shell command to be executed by the PostgreSQL server to copy the WAL files to the Barman incoming directory.</p> <p>This can be done in two ways, both requiring a SSH connection:</p> <ul> <li>via <code>barman-wal-archive</code> utility (for Barman 2.6 and higher versions)</li> <li>via rsync/SSH (This was a common approach with Barman 2.5 and lower versions.)</li> </ul> <p>For more information on how Barman supports this feature, see the \"Concurrent Backup and backup from a standby\" section.</p>"},{"location":"configuring/configuring_wal_streaming/#wal-archiving-via-barman-wal-archive","title":"WAL archiving via <code>barman-wal-archive</code>","text":"<p>For Barman 2.6 and higher versions, the recommended way to safely and reliably archive WAL files to Barman via <code>archive_command</code> is to use the <code>barman-wal-archive</code> command.  To use commands, <code>barman-cli</code> must be installed on each PostgreSQL server that is part of the Barman cluster.</p> <p>Using <code>barman-wal-archive</code> instead of rsync/SSH reduces the risk of data corruption of the shipped WAL file on the Barman server. When using rsync/SSH as <code>archive_command</code>, there's no mechanism that guarantees that the content of the file is flushed and fsync-ed to disk on destination.</p> <p>For this reason, we have developed the <code>barman-wal-archive</code> utility that natively communicates with Barman's <code>put-wal</code> command (introduced in Barman version 2.6), which is responsible for receiving the file, fsync'ing its content, and placing it in the proper incoming directory for that server.  This reduces the risk of copying a WAL file in the wrong location or directory in Barman, as the only parameter to be used in the <code>archive_command</code> is the server ID.</p> <p>Info</p> <p>For more information on the <code>barman-wal-archive</code> command, type <code>man barman-wal-archive</code>on the PostgreSQL server.</p> <p>To verify that <code>barman-wal-archive</code> can connect to the Barman server, and that the required PostgreSQL server is configured in Barman to accept incoming WAL files, use the following command: <pre><code>barman-wal-archive --test backup pg DUMMY\n</code></pre> Where:</p> <ul> <li><code>backup</code> is the host where Barman is installed.</li> <li><code>pg</code> is the name of the PostgreSQL server as configured in Barman.</li> <li><code>DUMMY</code> is a placeholder (<code>barman-wal-archive</code> requires an argument for the WAL file name, which is ignored).</li> </ul> <p>Success</p> <p>If everything is configured correctly, the following output is returned:</p> <p><pre><code>Ready to accept WAL files for the server pg\n</code></pre> Since it uses SSH to communicate with the Barman server, SSH key authentication is required for the postgres user to login as barman on the backup server. If a port other than the SSH default of 22 is used, the <code>--port</code> option can be added to specify the SSH port number.</p> <p>Edit the <code>postgresql.conf</code> file of the PostgreSQL instance on the pg database, activate the archive mode and set <code>archive_command</code> to use <code>barman-wal-archive</code>: <pre><code>archive_mode = **on**\nwal_level = 'replica'\narchive_command = 'barman-wal-archive backup pg %p'\n</code></pre> Restart the PostgreSQL server.</p>"},{"location":"configuring/configuring_wal_streaming/#wal-archiving-via-rsyncssh","title":"WAL archiving via rsync/SSH","text":"<p>You can retrieve the incoming WALs directory using the <code>show-servers</code> Barman command and confirming the value of  <code>incoming_wals_directory</code>: <pre><code>barman@backup\\$ barman show-servers pg **\\|**grep incoming_wals_directory\nincoming_wals_directory: /var/lib/barman/pg/incoming\n</code></pre> Edit the <code>postgresql.conf</code> file of the PostgreSQL instance on the pg database and activate the archive mode: <pre><code>archive_mode = **on**\nwal_level = 'replica'\narchive_command = 'rsync -a %p barman@backup:INCOMING_WALS_DIRECTORY/%f'\n</code></pre> Ensure you change the <code>INCOMING_WALS_DIRECTORY</code> placeholder with the value returned by the previous <code>barman show-servers pg</code> command.</p> <p>Restart the PostgreSQL server.</p> <p>In some cases, you might want to add stricter checks to the <code>archive_command</code> process. For example: <pre><code>archive_command = 'test \\$(/bin/hostname --fqdn) = HOSTNAME \\\\\n&amp;&amp; rsync -a %p barman@backup:INCOMING_WALS_DIRECTORY/%f'\n</code></pre> The <code>HOSTNAME</code> placeholder should be replaced with the value returned by <code>hostname --fqdn</code>. This trick is a safeguard in case the server is cloned, and avoids receiving WAL files from recovered PostgreSQL instances.</p>"},{"location":"configuring/configuring_wal_streaming/#verification-of-wal-archiving-configuration","title":"Verification of WAL archiving configuration","text":"<p>To test that continuous archiving is on and properly working, check both the PostgreSQL server and the backup server. Confirm that the WAL files are collected in the destination directory.</p> <p>Use the <code>switch-wal</code> command for verification: <pre><code>barman@backup\\$ barman switch-wal --force --archive pg\n</code></pre> The <code>switch-wal</code> command will force PostgreSQL to switch the WAL file and trigger the archiving process in Barman. Barman will wait for one file to arrive within 30 seconds. If no WAL file is received, an error is returned.</p> <p>Note</p> <p>You can change the 30-second timeout with the <code>--archive-timeout</code> option.</p> <p>Verify if the WAL archiving has been correctly configured using the <code>barman check</code> command.</p>"},{"location":"configuring/configuring_windows/","title":"Configuring Windows","text":""},{"location":"configuring/configuring_windows/#setting-up-a-microsoft-windows-based-server","title":"Setting up a Microsoft Windows-based server","text":"<p>You can back up a PostgreSQL server running on Windows using the streaming connection for both WAL archiving and for backups.</p> <p>Warning</p> <p>This feature is still experimental because it is not yet part of our continuous integration system.</p>"},{"location":"configuring/configuring_windows/#requirements","title":"Requirements","text":"<p>Ensure that the system user chosen to run PostgreSQL has the permission needed to access the restored data. It must have full control over the PostgreSQL data directory.</p>"},{"location":"configuring/configuring_windows/#limitations","title":"Limitations","text":"<ul> <li> <p>Remote recovery isn't supported for Windows servers.  You must recover your cluster locally in the Barman server and then copy all the files on a Windows server or use a folder shared between the PostgreSQL server and the Barman server.</p> </li> <li> <p><code>pg_basebackup</code> interoperability from Windows to Linux is still experimental. If you're experiencing issues taking a backup from a Windows server and your PostgreSQL locale is not English, a possible workaround for the issue is instructing your PostgreSQL to emit messages in English. You can do this by adding the following parameter in your <code>postgresql.conf</code> file: <code>lc_messages = 'English'</code></p> </li> </ul>"},{"location":"configuring/configuring_windows/#setting-up","title":"Setting up","text":"<p>Follow the steps to set up a streaming connection.  You can then back up your server as usual.</p>"},{"location":"customizing/binary_paths/","title":"Binary Paths","text":"<p>Barman allows users to specify one or more directories where Barman looks for executable files, using the global/server option <code>path_prefix</code>.</p>"},{"location":"customizing/binary_paths/#details","title":"Details","text":"<p>If a <code>path_prefix</code> is provided, it must contain a list of one or more directories separated by colon. Barman will search inside these directories first, then in those specified by the <code>PATH</code> environment variable.</p> <p>By default the <code>path_prefix</code> option is empty.</p>"},{"location":"customizing/binary_paths/#supported-versions","title":"Supported versions","text":"<p><code>path_prefix</code> is supported for Barman version 1.6.0 and higher.</p>"},{"location":"customizing/cluster_integration/","title":"Integration with cluster management systems","text":"<p>Barman has been designed for integration with standby servers (with streaming replication or traditional file based log shipping) and high availability tools like repmgr.</p> <p>From an architectural point of view, PostgreSQL must be configured to archive WAL files directly to the Barman server. Barman, thanks to the <code>get-wal</code> framework, can also be used as a WAL hub. For this purpose, you can use the <code>barman-wal-restore</code> script, part of the <code>barman-cli</code> package, with all your standby servers.</p> <p>The <code>replication-status</code> command allows you to get information about any streaming client attached to the managed server, in particular hot standby servers and WAL streamers.</p>"},{"location":"customizing/configuration_models/","title":"Configuration Models","text":"<p>Configuration models define a set of overrides for configuration options. These overrides can be applied to Barman servers which are part of the same cluster as the config models. They can be useful when handling clustered environments, so you can change the configuration of a Barman server in response to failover events, for example.</p> <p>For example, in a PostgreSQL cluster with the following nodes:</p> <ul> <li>pg-node-1: primary</li> <li>pg-node-2: standby</li> <li>pg-node-3: standby</li> </ul> <p>Assume you're backing up from the primary node.  Your configuration includes the following options:</p> <pre><code>**[my-barman-server]**\ncluster = my-cluster\nconninfo = host=pg-node-1 user=barman database=postgres\nstreaming_conninfo = host=pg-node-1 user=streaming_barman\n*; other options...*\n</code></pre> <p>You could have a configuration model for that cluster as follows: <pre><code>**[my-barman-server:backup-from-pg-node-2]**\ncluster = my-cluster\nmodel = **true**\nconninfo = host=pg-node-2 user=barman database=postgres\nstreaming_conninfo = host=pg-node-2 user=streaming_barman\n</code></pre> That model could be applied upon a failover from pg-node-1 to pg-node-2 so you start backing up from the new primary node.  The following command could be used: <pre><code>barman config-switch my-barman-server my-barman-server:backup-from-pg-node-2\n</code></pre> The command will override the cluster configuration options with the values defined in the selected model.</p> <p>Info</p> <p>Not all options are configurable through models.  Confirm your selected option is compatible with the model scope.</p> <p>Tip</p> <p>The pg-backup-api can start a REST API and listen for remote requests for executing Barman commands, including <code>barman config-switch</code>.</p>"},{"location":"customizing/geographical_redundancy/","title":"Geographical redundancy","text":"<p>You can set up cascading backup architectures with Barman, where the source of a backup server is a Barman installation rather than a PostgreSQL server.</p> <p>This feature allows users to transparently keep geographically distributed copies of PostgreSQL backups.</p> <p>A backup server that's connected to a Barman installation rather than a PostgreSQL server is defined passive node. A passive node is configured through the <code>primary_ssh_command</code> option.  The option is available for the following levels:</p> <ul> <li>Global: for a full replica of a primary Barman installation</li> <li>Server: for mixed scenarios, with both a direct and passive server(s).</li> </ul>"},{"location":"customizing/lock_file_directory/","title":"Lock file directory","text":"<p>Barman allows you to specify a directory for lock files through the <code>barman_lock_directory</code> global option.</p> <p>Lock files are used to coordinate concurrent work at global and server level, such as:</p> <ul> <li>cron operations</li> <li>backup operations</li> <li>access to the WAL archive</li> </ul> <p><code>barman_lock_directory</code> defaults to <code>barman_home</code>.</p> <p>Tip</p> <p>You can use a directory in a volatile partition, such as the one dedicated to run-time variable data (e.g. <code>/var/run/barman</code>).</p>"},{"location":"customizing/parallel_jobs/","title":"Parallel jobs","text":"<p>By default, Barman uses only one worker for file copy during both backup and recover operations.  You can use the <code>parallel_jobs</code> parameter to customize the number of workers that will perform file copy. The files to be copied will then be equally distributed among all parallel workers.</p> <p>It can be configured in global and server scopes, adding these in the corresponding configuration file: <pre><code>parallel_jobs = n\n</code></pre> Where <code>n</code> is the number of parallel workers to be used in file copy operations. The default value is 1.</p> <p>You can override this value at run-time when executing backup or recover commands. For example, you can use four parallel workers as follows: <pre><code>barman backup --jobs 4 server1\n</code></pre> Or, alternatively: <pre><code>barman backup --j 4 server1\n</code></pre></p> <p>Note</p> <p>The parallel jobs feature is only available for servers configured through rsync/SSH. For servers configured through streaming protocol, Barman will rely on <code>pg_basebackup</code>, which is currently limited to only one worker.</p>"},{"location":"customizing/parallel_jobs/#supported-versions","title":"Supported versions","text":"<p>The <code>parallel_jobs</code> parameter is supported for Barman version 2.2 and higher.</p>"},{"location":"customizing/parallel_jobs/#parallel-jobs-and-sshd-maxstartups","title":"Parallel jobs and sshd MaxStartups","text":"<p>Barman limits the rate at which parallel Rsync jobs are started.  This prevents exceeding the maximum number of concurrent unauthenticated connections allowed by the SSH server. This maximum is defined by the sshd parameter <code>MaxStartups</code>.  </p> <p>Warning</p> <p>If more than <code>MaxStartups</code> connections have been created but not authenticated, the SSH server may drop some or all of the connections, and cause a failed backup or recovery.</p> <p>The default value of sshd <code>MaxStartups</code> on most platforms is 10. Barman starts parallel jobs in batches of 10 and does not start more than one batch of jobs within a one-second time period. This yields an effective rate limit of 10 jobs per second.</p> <p>This limit can be changed using the following two configuration options:</p> <ul> <li><code>parallel_jobs_start_batch_size</code>: The maximum number of parallel jobs to start in a single batch.</li> <li><code>parallel_jobs_start_batch_period</code>: The time period in seconds over which a single batch of jobs will be started.</li> </ul> <p>For example, to ensure no more than five new Rsync jobs will be created within any two-second time period: <pre><code>parallel_jobs_start_batch_size = 5\nparallel_jobs_start_batch_period = 2\n</code></pre> The configuration options can be overridden using the following arguments with both <code>barman backup</code> and <code>barman recover</code> commands:</p> <ul> <li><code>\\--jobs-start-batch-size</code></li> <li><code>\\--jobs-start-batch-period</code></li> </ul>"},{"location":"customizing/passive_nodes/","title":"Passive Nodes","text":"<p>You can configure a server as passive node by adding the following option to the server configuration: <pre><code>primary_ssh_command = ssh barman@primary_barman\n</code></pre> This option specifies the SSH connection parameters to the primary server, identifying the source of the backup data for the passive server.</p> <p>If you invoke Barman with the <code>-c/--config</code> option and want to use the same option when the passive node invokes Barman, add the following option on the primary node: <pre><code>forward_config_path = **true**\n</code></pre></p>"},{"location":"customizing/passive_nodes/#node-synchronization","title":"Node synchronization","text":"<p>When a node is marked as passive, Barman imposes the following restrictions:</p> <ul> <li>It's excluded from standard maintenance operations.</li> <li>Direct operations to PostgreSQL are forbidden, including <code>barman backup</code>.</li> </ul> <p>Synchronization between a passive server and its primary is automatically managed by <code>barman cron</code>, which will transparently invoke:</p> <ol> <li><code>barman sync-info --primary</code>:  Collects synchronization information</li> <li><code>barman sync-backup</code>:  Creates a local copy of every backup that is available on the primary node</li> <li><code>barman sync-wals</code>:  Copies locally all the WAL files available on the primary node</li> </ol>"},{"location":"customizing/passive_nodes/#manual-synchronization","title":"Manual synchronization","text":"<p>Although <code>barman cron</code> automatically manages passive/primary node synchronization, you can manually trigger synchronization of a backup with the following command: <pre><code>barman sync-backup \\&lt;server_name\\&gt; \\&lt;backup_id\\&gt;\n</code></pre> When <code>sync-backup</code> is launched, Barman will use the <code>primary_ssh_command</code> to connect to the master server.  If the backup is present on the remote machine, Barman will begin to copy all the files using rsync. </p> <p>Note</p> <p>Only one single synchronization process per backup is allowed.</p> <p>WAL files also can be synchronized with the following command: <pre><code>barman sync-wals \\&lt;server_name\\&gt;\n</code></pre></p>"},{"location":"external_content/blogs/","title":"Blogs","text":"<p>You can find additional learning material for Barman with the following blogs, books, and tutorials.</p> <ul> <li>check-barman: a Nagios plugin for Barman, written by Holger Hamann (MIT license)</li> <li>puppet-barman: Barman module for Puppet (GPL)</li> <li>Tutorial on \"How To Back Up, Restore, and Migrate PostgreSQL Databases with Barman on CentOS 7\", by Sadequl Hussain (available on DigitalOcean Community)</li> <li>BarmanAPI: RESTFul API for Barman, written by Mehmet Emin Karaka\u015f (GPL)</li> </ul>"},{"location":"external_content/books/","title":"Books","text":"<ul> <li>PostgreSQL 10 Administration Cookbook</li> </ul>"},{"location":"external_content/tutorials/","title":"Tutorials","text":"<ul> <li>SQL Dump1<ul> <li>File System Level Backup</li> <li>Continuous Archiving and Point-in-Time Recovery (PITR)</li> <li>Reliability and the Write-Ahead Log</li> </ul> </li> </ul>"},{"location":"recovering/cloud-restores/","title":"Barman-cloud-restore for snapshots","text":"<p>The process for recovering from a snapshot backup with <code>barman-cloud</code> is very similar to the process for barman backups except that <code>barman-cloud-restore</code> should be run instead of <code>barman recover</code> once a recovery instance has been provisioned. This carries out the same pre-recovery checks as <code>barman recover</code> and copies the backup label into place on the recovery instance.</p> <p>The snapshot metadata required to provision the recovery instance can be queried using <code>barman-cloud-backup-show</code>.</p> <p>Note</p> <p>When using <code>barman-cloud-restore</code> with an object stored backup, the command won't prepare PostgreSQL for the recovery. Any PITR options, custom <code>restore_command</code> values, or WAL files required before PostgreSQL starts must be handled manually or by external tooling.</p> <p>The following additional argument must be used with <code>barman-cloud-restore</code> when restoring a backup made with cloud snapshots:</p> <p><code>--snapshot-recovery-instance</code></p> <p>The following additional arguments are required for <code>--snapshot-recovery-instance</code>:</p> <ul> <li>For the gcp provider:    <code>--gcp-zone</code></li> <li>For the azure provider:  <code>--azure-resource-group</code></li> <li>For the aws-s3 provider: <code>--aws-region</code></li> </ul> <p>The<code>--tablespace</code> option can't be used with <code>barman-cloud-restore</code> when restoring a cloud snapshot backup.</p>"},{"location":"recovering/recovering_from_snapshot/","title":"Recovering from a snapshot backup","text":"<p>Barman won't perform a fully-automated recovery from snapshot backups. This is because recovery from snapshots requires the provision and management of new infrastructure which is something better handled by dedicated infrastructure-as-code solutions such as Terraform.</p> <p>However, the <code>barman recover</code> command can still be used to validate the snapshot recovery instance, carry out post-recovery tasks such as checking the PostgreSQL configuration for unsafe options, and set any required PITR options. It will also copy the <code>backup_label</code> file into place (since the backup label is not stored in any of the volume snapshots), and copy across any required WALs (unless the <code>--get-wal</code> recovery option is used, in which case it will configure the PostgreSQL <code>restore_command</code> to fetch the WALs).</p> <p>If restoring a backup made with <code>barman-cloud-backup</code>, use the <code>barman-cloud-restore</code> command instead of <code>barman recover</code>.</p>"},{"location":"recovering/recovering_from_snapshot/#process","title":"Process","text":"<p>Recovery from a snapshot backup consists of the following steps:</p> <ol> <li>Provision a new disk for each snapshot taken during the backup.</li> <li>Provision a compute instance where each provisioned disk is attached and mounted according to the backup metadata.</li> <li>Use the <code>barman recover</code> or <code>barman-cloud-restore</code> command to validate and finalize the recovery.</li> </ol> <p>Steps 1 and 2 are best-handled by an existing infrastructure-as-code system, however, you can perform these steps manually or with a custom script.</p> <p>Tip</p> <p>For example scripts that can be helpful when carrying out these steps, see Cloud snapshot recovery scripts.</p> <p>Warning</p> <p>The above resources make assumptions about the backup/recovery environment and shouln't be considered suitable for production use without further customization.</p> <p>Once the recovery instance is provisioned and the disks cloned from the backup snapshots are attached and mounted, run <code>barman recover</code> with the following additional arguments:</p> Argument Description <code>--remote-ssh-command</code> The ssh command required to log in to the recovery instance <code>--snapshot-recovery-instance</code> The name of the recovery instance as required by the cloud provider <p>Add any additional arguments specific to the snapshot provider.  For example:</p> <p><pre><code>barman recover SERVER_NAME BACKUP_ID REMOTE_RECOVERY_DIRECTORY \\\n--remote-ssh-command 'ssh USER@HOST' \\\n--snapshot-recovery-instance INSTANCE_NAME\n</code></pre> Barman will automatically detect that the backup is a snapshot backup and check that the attached disks were cloned from the snapshots for that backup. Barman will then prepare PostgreSQL for recovery by copying the backup label and WALs into place and setting any required recovery options in the PostgreSQL configuration.</p>"},{"location":"recovering/recovering_from_snapshot/#additional-arguments","title":"Additional arguments","text":"<p>The following additional `barman recover arguments are available for cloud providers:</p> <p>For <code>gcp</code>:</p> <ul> <li><code>--gcp-zone</code>: The name of the availability zone in which the recovery instance is located. If not provided, Barman will use the value of gcp_zone set in the server config.</li> </ul> <p>For <code>azure</code>:</p> <ul> <li><code>--azure-resource-group</code>: The resource group to which the recovery instance belongs. If not provided, Barman will use the value of <code>azure_resource_group</code> set in the server config.</li> </ul> <p>For <code>aws</code>:</p> <ul> <li><code>--aws-region</code>: The AWS region in which the recovery instance is located. If not provided, Barman will use the value of aws_region set in the server config.</li> </ul>"},{"location":"recovering/recovering_from_snapshot/#unavailable-arguments","title":"Unavailable arguments","text":"<p>The following <code>barman recover</code> arguments and configuration variables aren't available when recovering snapshot backups:</p> Command argument Variable <code>--bwlimit</code> bandwidth_limit <code>--jobs</code> parallel_jobs <code>--recovery-staging-path</code> recovery_staging_path <code>--tablespace</code> N/A"},{"location":"recovering/recovering_from_snapshot/#backup-metadata-for-snapshot-backups","title":"Backup metadata for snapshot backups","text":"<p>Whether the recovery disks and instance are provisioned via infrastructure-as-code, ad-hoc automation, or manually, it's necessary to query Barman to find the snapshots required for a given backup.  Use <code>barman show-backup</code> to view details for each snapshot in the backup. </p> <p>For example: <pre><code>$ barman show-backup primary 20230123T131430\nBackup 20230123T131430:\n  Server Name            : primary\n  System Id              : 7190784995399903779\n  Status                 : DONE\n  PostgreSQL Version     : 140006\n  PGDATA directory       : /opt/postgres/data\n\n  Snapshot information:\n    provider             : gcp\n    project              : project_id\n\n    device_name          : pgdata\n    snapshot_name        : barman-av-ubuntu20-primary-pgdata-20230123t131430\n    snapshot_project     : project_id\n    Mount point          : /opt/postgres\n    Mount options        : rw,noatime\n\n    device_name          : tbs1\n    snapshot_name        : barman-av-ubuntu20-primary-tbs1-20230123t131430\n    snapshot_project     : project_id\n    Mount point          : /opt/postgres/tablespaces/tbs1\n    Mount options        : rw,noatime\n</code></pre> The the <code>--format=json</code> option can be used when integrating with external tooling, e.g.:</p> <pre><code>$ barman --format=json show-backup primary 20230123T131430\n...\n\"snapshots_info\": {\n  \"provider\": \"gcp\",\n  \"provider_info\": {\n    \"project\": \"project_id\"\n  },\n  \"snapshots\": [\n    {\n      \"mount\": {\n        \"mount_options\": \"rw,noatime\",\n        \"mount_point\": \"/opt/postgres\"\n      },\n      \"provider\": {\n        \"device_name\": \"pgdata\",\n        \"snapshot_name\": \"barman-av-ubuntu20-primary-pgdata-20230123t131430\",\n        \"snapshot_project\": \"project_id\"\n      }\n    },\n    {\n      \"mount\": {\n        \"mount_options\": \"rw,noatime\",\n        \"mount_point\": \"/opt/postgres/tablespaces/tbs1\"\n      },\n      \"provider\": {\n        \"device_name\": \"tbs1\",\n        \"snapshot_name\": \"barman-av-ubuntu20-primary-tbs1-20230123t131430\",\n        \"snapshot_project\": \"project_id\",\n      }\n    }\n  ]\n}\n</code></pre> <p>For backups taken with <code>barman-cloud-backup</code>, there's an analogous <code>barman-cloud-backup-show</code> command which can be used along with <code>barman-cloud-backup-list</code> to query the backup metadata in the cloud object store.</p>"},{"location":"recovering/recovering_from_snapshot/#cloud-provider-specific-metadata","title":"Cloud provider-specific metadata","text":"<p>Metadata available in <code>snapshots_info/provider_info</code> and <code>snapshots_info/snapshots/*/provider</code> varies by cloud provider as follows:</p>"},{"location":"recovering/recovering_from_snapshot/#for-gcp","title":"For GCP","text":"<p>The following fields are available in <code>snapshots_info/provider_info</code>:</p> Field Description <code>project</code> The GCP project ID of the project which owns the resources involved in backup and recovery <p>The following fields are available in <code>snapshots_info/snapshots/*/provider</code>:</p> Field Description <code>device_name</code> The short device name with which the source disk for the snapshot was attached to the backup VM at the time of the backup <code>snapshot_name</code> The name of the snapshot <code>snapshot_project</code> The GCP project ID which owns the snapshot"},{"location":"recovering/recovering_from_snapshot/#for-azure","title":"For Azure","text":"<p>The following fields are available in <code>snapshots_info/provider_info</code>:</p> Field Description <code>subscription_id</code> The Azure subscription ID which owns the resources involved in backup and recovery <code>resource_group</code> The Azure resource group to which the resources involved in the backup belong <p>The following fields are available in <code>snapshots_info/snapshots/*/provider</code>:</p> Field Description <code>location</code> The Azure location of the disk from which the snapshot was taken <code>lun</code> The LUN identifying the disk from which the snapshot was taken at the time of the backup <code>snapshot_name</code> The name of the snapshot"},{"location":"recovering/recovering_from_snapshot/#for-aws","title":"For AWS","text":"<p>The following fields are available in <code>snapshots_info/provider_info</code>:</p> Field Description <code>account_id</code> The ID of the AWS account which owns the resources used to make the backup <code>region</code> The AWS region in which the resources involved in backup are located <p>The following fields are available in <code>snapshots_info/snapshots/*/provider</code>:</p> Field Description <code>device_name</code> The device to which the source disk was mapped on the backup VM at the time of the backup <code>snapshot_id</code> The ID of the snapshot as assigned by AWS <code>snapshot_name</code> The name of the snapshot"},{"location":"recovering/using_recovery/","title":"Recovering","text":"<p>Barman offers a variety of recovery methods, including remote recovery, point in time recovery, and recovery of compressed backups.  The <code>recover</code> command is used to recover a whole server after a backup is executed using the <code>backup</code> command.</p> <p>Warning</p> <p>Recovery options can be complex.  Ensure you're familiar with all aspects and options of the <code>recovery</code> command before using it!  For a list of recovery commands and options, see  barman recover.</p>"},{"location":"recovering/using_recovery/#syntax","title":"Syntax","text":"<pre><code>barman@backup\\$ barman recover \\&lt;server_name\\&gt; \\&lt;backup_id\\&gt; /path/to/recover/dir\n</code></pre> <p>Note</p> <p>Running this command as user barman will make it become the database superuser.</p>"},{"location":"recovering/using_recovery/#requirements","title":"Requirements","text":"<p>Remote recovery is the most common way to restore a PostgreSQL server with Barman.  The same requirements for PostgreSQL's Log shipping and Point-In-Time-Recovery apply:</p> <ul> <li>Identical hardware architecture</li> <li>Identical major version of PostgreSQL</li> <li>Time is synchronised between the servers using NTP or another reliable method</li> </ul> <p>Tip</p> <p>It's recommended to create recovery environments that are as similar as possible, if not identical, to the original server.  Such environments are easier to maintain. For example, you should ideally use the same operating system, the same PostgreSQL version, the same disk layouts, and so on.</p> <p>At the end of the execution of the recovery, the selected backup is recovered locally and the destination path contains a data directory ready to be used to start a PostgreSQL instance.</p> <p>At the end of the execution of the recovery, the selected backup is recovered locally and the destination path contains a data directory ready to be used to start a PostgreSQL instance.</p> <p>Important</p> <p>Barman doesn't keep track of symbolic links inside <code>PGDATA</code> (except for tablespaces inside <code>pg_tblspc</code>). It's recommended that system administrators to keep track of symbolic links and to add them to the disaster recovery procedures in case they need to be restored in their original location.</p>"},{"location":"recovering/using_recovery/#remote-recovery","title":"Remote recovery","text":"<p>Add the <code>--remote-ssh-command \\&lt;COMMAND\\&gt;</code> option to the invocation of the recovery command. Doing this will allow Barman to execute the copy on a remote server, using the provided command to connect to the remote host.</p> <p>Note</p> <p>It is advisable to use the postgres user to perform the recovery on the remote host.</p>"},{"location":"recovering/using_recovery/#limitations-of-the-remote-recovery","title":"Limitations of the remote recovery","text":"<p>Remote recovery has the following limitations:</p> <ul> <li>Barman requires at least 4GB of free space in the system temporary directory unless the <code>get-wal</code> command is specified in the <code>recovery_option</code> parameter in the Barman configuration.</li> <li>The SSH connection between Barman and the remote host must use the public key exchange authentication method.</li> <li>The remote user must be able to create the directory structure of the backup in the destination directory.</li> <li>There must be enough free space on the remote server to contain the base backup and the WAL files needed for recovery.</li> </ul>"},{"location":"recovering/using_recovery/#tablespace-remapping","title":"Tablespace remapping","text":"<p>Barman is able to automatically remap one or more tablespaces using the recover command with the <code>--tablespace</code> option. The option accepts a pair of values as arguments using the <code>NAME:DIRECTORY</code> format.</p> <ul> <li><code>NAME</code> is the identifier of the tablespace</li> <li><code>DIRECTORY</code> is the new destination path for the tablespace</li> </ul> <p>If the destination directory does not exists, Barman will try to create it (assuming you have the required permissions).</p>"},{"location":"recovering/using_recovery/#point-in-time-recovery","title":"Point in time recovery","text":"<p>Barman wraps PostgreSQL's Point-in-Time Recovery (PITR), allowing you to specify a recovery target, either as a timestamp, a restore label, or a transaction ID.</p> <p>Important</p> <p>The earliest PITR for a given backup is the end of the base backup itself. If you want to recover at any point in time between the start and the end of a backup, you must use the previous backup. From Barman 2.3 you can exit recovery when consistency is reached by using <code>--target-immediate option</code>.</p>"},{"location":"recovering/using_recovery/#recovery-target-options","title":"Recovery target options","text":"<p>The recovery target can be specified using one of the following mutually exclusive options:</p> Option Description <code>\\--target-time TARGET_TIME</code> Specify a timestamp <code>\\--target-xid TARGET_XID</code> Specify a transaction ID <code>\\--target-lsn TARGET_LSN</code> Specify a Log Sequence Number (LSN) - requires PostgreSQL 10 or higher <code>\\--target-name TARGET_NAME</code> Specify a named restore point previously created with the <code>pg_create_restore_point</code>(name) function <code>\\--target-immediate</code> Recovery ends when a consistent state is reached (that is the end of the base backup process) <p>Important</p> <p>Recovery target via time, XID and LSN must be subsequent to the end of the backup. If you want to recover to a point in time between the start and the end of a backup, you must recover from the previous backup in the catalog.</p> <p>You can use the <code>--exclusive</code> option to specify whether to stop immediately before or immediately after the recovery target.</p>"},{"location":"recovering/using_recovery/#target-timeline-option","title":"Target timeline option","text":"<p>Barman allows you to specify a target timeline for recovery using the <code>--target-tli</code> option. This can be set to a numeric timeline ID or one of the special values latest (to recover to the most recent timeline in the WAL archive) and current (to recover to the timeline which was current when the backup was taken). </p> <p>If the the <code>--target-tli</code> option is omitted, the following takes place:</p> <ul> <li>PostgreSQL version 12 and higher will recover to the latest timeline.</li> <li>PostgreSQL version 11 and lower will recover to the current timeline. </li> </ul> <p>For more information about timelines, see the PostgreSQL documentation.</p>"},{"location":"recovering/using_recovery/#target-action-option","title":"Target action option","text":"<p>Barman 2.4 added support for <code>--target-action</code> option.  It accepts the following values: |Value|Description| |----------|---------------| |<code>shutdown</code>|Once recovery target is reached, PostgreSQL is shut down| |<code>pause</code>|Once recovery target is reached, PostgreSQL is started in pause state, allowing users to inspect the instance| |<code>promote</code>|Once recovery target is reached, PostgreSQL will exit recovery and is promoted as a master|</p> <p>Important</p> <p>By default, no target action is defined (for back compatibility). The <code>--target-action</code> option requires a Point In Time Recovery target to be specified.</p> <p>For more information on the above settings, see the PostgreSQL documentation on recovery target settings.</p>"},{"location":"recovering/using_recovery/#standby-mode-option","title":"Standby mode option","text":"<p>Barman 2.4 and higher versions can use the <code>--standby-mode</code> option for the recover command which will configures the recovered instance as a standby by creating a <code>standby.signal</code> file (from PostgreSQL versions lower than 12), or by adding <code>standby_mode = on</code> to the generated recovery configuration.</p> <p>For more information on PostgreSQL standby mode, see the official documentation:</p> <ul> <li>For Postgres 11 and lower versions in the standby section of PostgreSQL documentation.</li> <li>For PostgreSQL 12 and greater versions in the replication section of PostgreSQL documentation.</li> </ul> <p>Important</p> <p>When <code>--standby-mode</code> is used during recovery, it's necessary to modify the configuration of the recovered instance, allowing the recovered server to connect to the primary once the WAL file replication from Barman is successfully completed. </p> <p>If the recovered instance is PostgreSQL version 11 or lower, this is achieved by adding the <code>primary_conninfo</code> parameter to the <code>recovery.conf</code> file. </p> <p>If the recovered instance is PostgreSQL version 12 or greater, the <code>primary_conninfo</code> parameter needs to be added to the <code>postgresql.conf</code> file.</p>"},{"location":"recovering/using_recovery/#fetching-wals-from-the-barman-server","title":"Fetching WALs from the Barman server","text":"<p>The <code>barman recover</code> command can optionally configure PostgreSQL to fetch WALs from Barman during recovery. You can enable it by setting the <code>recovery_options</code> global/server configuration option to <code>get-wal</code>. If <code>recovery_options</code> isn't set or is empty, Barman will instead copy the WALs required for recovery while executing the <code>barman recover</code> command.</p> <p>The <code>--get-wal</code> and <code>--no-get-wal</code> options can be used to override the behaviour defined by recovery_options. Use <code>--get-wal</code> with <code>barman recover</code> to enable the fetching of WALs from the Barman server.  Use <code>--no-get-wal</code> to disable it.</p>"},{"location":"recovering/using_recovery/#recovering-compressed-backups","title":"Recovering compressed backups","text":"<p>If a backup has been compressed using the <code>backup_compression</code> option, <code>barman recover</code> is able to uncompress the backup on recovery. This is a multi-step process:</p> <ol> <li>The compressed backup files are copied to a staging directory on the local or remote server using rsync.</li> <li>The compressed files are uncompressed to the target directory.</li> <li>Config files which need special handling by Barman are copied from the recovery destination, analyzed or edited as required, and copied back to the recovery destination using rsync.</li> <li>The staging directory for the backup is removed.</li> </ol> <p>Barman doesn't know anything about the environment in which it will be deployed, so it relies on the <code>recovery_staging_path</code> option in order to choose a suitable location for the staging directory.</p> <p>If you're using the <code>backup_compression</code> option you must do one of the following:</p> <ul> <li>Set <code>recovery_staging_path</code> in the global/server config.</li> <li>Use the <code>--recovery-staging-path</code> option with the <code>barman recover</code> command. </li> </ul> <p>Warning</p> <p>If you do neither of these things and attempt to recover a compressed backup, Barman will fail rather than try to guess a suitable location.</p>"},{"location":"scripts/backup-delete-scripts/","title":"Backup delete scripts","text":"<p>Pre and post backup delete scripts are supported for Barman version 2.4 and higher.</p> <p>As previous scripts, backup delete scripts can be configured within global configuration options.  You can override them on a per-server basis:</p>"},{"location":"scripts/backup-delete-scripts/#scripts","title":"Scripts","text":"Script Description <code>pre_delete_script</code> Hook script launched before the deletion of a backup, only once, with no check on the exit code <code>pre_delete_retry_script</code> Retry hook script executed before the deletion of a backup, repeatedly until success or abort <code>post_delete_retry_script</code> Retry hook script executed after the deletion of a backup, repeatedly until success or abort <code>post_delete_script</code> Hook script launched after the deletion of a backup, only once, with no check on the exit code <p>The script is executed through a shell and can return any exit code. Only in case of a retry script, Barman checks the return code.</p>"},{"location":"scripts/backup-delete-scripts/#variables","title":"Variables","text":"<p>Delete scripts uses the same environmental variables of a backup script, plus this:</p> <p><code>BARMAN_NEXT_ID</code>: ID of the next backup (if present)</p>"},{"location":"scripts/backup-scripts/","title":"Backup scripts","text":"<p>Backup scripts can be configured with the following global configuration options.  You can override them on a per-server basis.</p>"},{"location":"scripts/backup-scripts/#scripts","title":"Scripts","text":"Script Description <code>pre_backup_script</code> Hook script executed before a base backup, only once, with no check on the exit code <code>pre_backup_retry_script</code> Retry hook script executed before a base backup, repeatedly until success or abort <code>post_backup_retry_script</code> Retry hook script executed after a base backup, repeatedly until success or abort <code>post_backup_script</code> Hook script executed after a base backup, only once, with no check on the exit code <p>The script definition is passed to a shell and can return any exit code. Only in case of a retry script, Barman checks the return code.</p>"},{"location":"scripts/backup-scripts/#variables","title":"Variables","text":"<p>The shell environment will contain the following variables:</p> Variable Description <code>BARMAN_BACKUP_DIR</code> Backup destination directory <code>BARMAN_BACKUP_ID</code> ID of the backup <code>BARMAN_CONFIGURATION</code> Configuration file used by Barman <code>BARMAN_ERROR</code> Error message, if any (only for the post phase) <code>BARMAN_PHASE</code> Phase of the script, either pre or post <code>BARMAN_PREVIOUS_ID</code> ID of the previous backup (if present) <code>BARMAN_RETRY</code> 1 if it is a retry script, 0 if not <code>BARMAN_SERVER</code> Name of the server <code>BARMAN_STATUS</code> Status of the backup <code>BARMAN_VERSION</code> Version of Barman"},{"location":"scripts/cloud-hook-scripts/","title":"Cloud hook scripts","text":"<p>To use cloud hook scripts, install the <code>barman-cli-cloud</code> package on the Barman server.  You can use cloud hook scripts for a post-backup or pre-wal archive.</p>"},{"location":"scripts/cloud-hook-scripts/#as-a-post-backup","title":"As a post-backup","text":"<p>You can use <code>barman-cloud-backup</code> as a post backup script for the following Barman backup types:</p> <ul> <li>Backups taken with <code>backup_method = rsync</code>.</li> <li>Backups taken with `backup_method = postgres, where backup_compression is not used.</li> </ul> <p>To use the post backup script, add the following to the server configuration in Barman: <pre><code>post_backup_retry_script = 'barman-cloud-backup [*OPTIONS*] *DESTINATION_URL* ${BARMAN_SERVER}\n</code></pre></p> <p>Warning</p> <p>When running as a hook script <code>barman-cloud-backup</code> requires that the status of the backup is <code>DONE</code>.  It will fail if the backup has any other status. </p> <p>It's recommended to run backups with the <code>-w / --wait</code> option so the hook script isn't executed while a backup has a status of <code>WAITING_FOR_WALS</code>.</p>"},{"location":"scripts/cloud-hook-scripts/#as-a-pre-wal-archive","title":"As a pre-wal archive","text":"<p>Configure <code>barman-cloud-wal-archive</code> as a pre-WAL archive script by adding the following to the Barman configuration for a PostgreSQL server: <pre><code>pre_archive_retry_script = 'barman-cloud-wal-archive [*OPTIONS*] *DESTINATION_URL* ${BARMAN_SERVER}'\n</code></pre></p>"},{"location":"scripts/hook-scripts/","title":"Hook scripts","text":""},{"location":"scripts/hook-scripts/#events","title":"Events","text":"<p>You can run hook scripts on these events:</p> <ul> <li>Before and after a backup</li> <li>Before and after the deletion of a backup</li> <li>Before and after a WAL file is archived</li> <li>Before and after a WAL file is deleted</li> </ul>"},{"location":"scripts/hook-scripts/#types","title":"Types","text":"<p>There are two types of hook scripts that Barman can manage:</p> <ul> <li>Standard hook scripts</li> <li>Retry hook scripts</li> </ul>"},{"location":"scripts/hook-scripts/#differences","title":"Differences","text":"<p>Hook scripts differ in the following ways:</p> <ul> <li>Standard:  Barman executes a standard hook script only once, without checking its return code.</li> <li>Retry:  Barman may execute a retry hook script more than once, depending on its return code.</li> </ul> <p>When executing a retry hook script, Barman checks the return code and retries indefinitely until the script returns either of the following:</p> Message Return code <code>SUCCESS</code> 0 <code>ABORT_CONTINUE</code> 62 <code>ABORT_STOP</code> 63 <p>Barman treats any other return code as a transient failure to be retried. </p> <p>A hook script can control its workflow by specifying whether a failure is transient.  In the event of a pre-hook script returning <code>ABORT_STOP</code>, you can request Barman to interrupt the main operation with a failure.</p>"},{"location":"scripts/hook-scripts/#order-of-operation","title":"Order of operation","text":"<p>Hook scripts are executed in the following order:</p> <ol> <li>The standard pre-hook script (if present)</li> <li>The retry pre-hook script (if present)</li> <li>The actual event (i.e. backup operation, or WAL archiving), if the retry 'pre' hook script was not aborted with <code>ABORT_STOP</code></li> <li>The retry post-hook script (if present)</li> <li>The standard post-hook script (if present)</li> <li>The output generated by any hook script is written in the log file of Barman.</li> </ol> <p>Note</p> <p><code>ABORT_STOP</code> is ignored by retry post-hook scripts. In these cases, apart from logging an additional warning, <code>ABORT_STOP</code> will behave like <code>ABORT_CONTINUE</code>.</p>"},{"location":"scripts/recovery-scripts/","title":"Recovery scripts","text":"<p>Pre and post recovery scripts are supported for Barman version 2.4 and higher.</p> <p>Similar to other scripts, recovery scripts can be configured within global configuration options.  You can override them on a per-server basis.</p>"},{"location":"scripts/recovery-scripts/#scripts","title":"Scripts","text":"Script Description <code>pre_recovery_script</code> Hook script launched before the recovery of a backup, only once, with no check on the exit code <code>pre_recovery_retry_script</code> Retry hook script executed before the recovery of a backup, repeatedly until success or abort <code>post_recovery_retry_script</code> Retry hook script executed after the recovery of a backup, repeatedly until success or abort <code>post_recovery_script</code> Hook script launched after the recovery of a backup, only once, with no check on the exit code <p>The script is executed through a shell and can return any exit code. Only in case of a retry script, Barman checks the return code.</p>"},{"location":"scripts/recovery-scripts/#variables","title":"Variables","text":"<p>Recovery scripts uses the same environmental variables of a backup script, plus the following:</p> Variable Description <code>BARMAN_DESTINATION_DIRECTORY</code> The directory where the new instance is recovered <code>BARMAN_TABLESPACES</code> Tablespace relocation map (JSON, if present) <code>BARMAN_REMOTE_COMMAND</code> Secure shell command used by the recovery (if present) <code>BARMAN_RECOVER_OPTIONS</code> Recovery additional options (JSON, if present)"},{"location":"scripts/recovery-scripts/#cloud-snapshot-recovery-scripts","title":"Cloud snapshot recovery scripts","text":"<p>For example scripts that can be helpful when recovering from a snapshot backup in the cloud, see:</p> <ul> <li>An example recovery script for GCP</li> <li>An example runbook for Azure</li> </ul>"},{"location":"scripts/script-variables/","title":"Script variables","text":"<p>Barman scripts can contain the following variables:</p> Variable Description Script type BARMAN_CONFIGURATION Configuration file used by barman Shell BARMAN_ERROR Error message, if any (only for the 'post' phase) Shell BARMAN_PHASE 'pre' or 'post' Shell BARMAN_RETRY 1 if it is a retry script (from 1.5.0), 0 if not Shell BARMAN_SERVER Name of the server Shell BARMAN_BACKUP_DIR Backup destination directory Backup BARMAN_BACKUP_ID ID of the backup Backup BARMAN_PREVIOUS_ID ID of the previous backup (if present) Backup BARMAN_NEXT_ID ID of the next backup (if present) Backup BARMAN_STATUS Status of the backup Backup BARMAN_VERSION Version of Barman Backup BARMAN_SEGMENT Name of the WAL file Archive BARMAN_FILE Full path of the WAL file Archive BARMAN_SIZE Size of the WAL file Archive BARMAN_TIMESTAMP WAL file timestamp Archive BARMAN_COMPRESSION Type of compression used for the WAL file Archive BARMAN_DESTINATION_DIRECTORY The directory where the new instance is recovered Recovery BARMAN_TABLESPACES Tablespace relocation map (JSON, if present) Recovery BARMAN_REMOTE_COMMAND Secure shell command used by the recovery (if present) Recovery BARMAN_RECOVER_OPTIONS Recovery additional options (JSON, if present) Recovery"},{"location":"scripts/wal-archive-scripts/","title":"Wal archive scripts","text":"<p>Similar to backup scripts, archive scripts can be configured with global configuration options.  You can override them on a per-server basis.</p>"},{"location":"scripts/wal-archive-scripts/#scripts","title":"Scripts","text":"Script Description <code>pre_archive_script</code> Hook script executed before a WAL file is archived by maintenance (usually <code>barman cron</code>), only once, with no check on the exit code <code>pre_archive_retry_script</code> Retry hook script executed before a WAL file is archived by maintenance (usually <code>barman cron</code>), repeatedly until it is successful or aborted <code>post_archive_retry_script</code> Retry hook script executed after a WAL file is archived by maintenance, repeatedly until it is successful or aborted <code>post_archive_script</code> Hook script executed after a WAL file is archived by maintenance, only once, with no check on the exit code <p>The script is executed through a shell and can return any exit code. Only in case of a retry script, Barman checks the return code.</p>"},{"location":"scripts/wal-archive-scripts/#shared-variables","title":"Shared variables","text":"<p>Archive scripts and backup scripts share the following environmental variables:</p> Variable Description <code>BARMAN_CONFIGURATION</code> Configuration file used by Barman <code>BARMAN_ERROR</code> Error message, if any (only for the post phase) <code>BARMAN_PHASE</code> Phase of the script, either pre or post <code>BARMAN_SERVER</code> Name of the server"},{"location":"scripts/wal-archive-scripts/#archive-only-variables","title":"Archive-only variables","text":"<p>The following variables are specific to archive scripts:</p> Variable Description <code>BARMAN_SEGMENT</code> Name of the WAL file <code>BARMAN_FILE</code> Full path of the WAL file <code>BARMAN_SIZE</code> Size of the WAL file <code>BARMAN_TIMESTAMP</code> WAL file timestamp <code>BARMAN_COMPRESSION</code> Type of compression used for the WAL file"},{"location":"scripts/wal-delete-scripts/","title":"Wal delete scripts","text":"<p>Pre and post <code>wal delete</code> scripts are supported for Barman version 2.4 and higher.</p> <p>Similar to the other hook scripts, <code>wal delete</code> scripts can be configured with global configuration options.  You can override them on a per server basis.</p>"},{"location":"scripts/wal-delete-scripts/#scripts","title":"Scripts","text":"Script Description <code>pre_wal_delete_script</code> Hook script executed before the deletion of a WAL file <code>pre_wal_delete_retry_script</code> Retry hook script executed before the deletion of a WAL file, repeatedly until it is successful or aborted <code>post_wal_delete_retry_script</code> Retry hook script executed after the deletion of a WAL file, repeatedly until it is successful or aborted <code>post_wal_delete_script</code> Hook script executed after the deletion of a WAL file <p>The script is executed through a shell and can return any exit code. Only in case of a retry script, Barman checks the return code.</p> <p>Info</p> <p>WAL delete scripts use the same environmental variables as WAL archive scripts.</p>"}]}